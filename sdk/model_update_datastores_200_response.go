/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateDatastores200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDatastores200Response{}

// UpdateDatastores200Response struct for UpdateDatastores200Response
type UpdateDatastores200Response struct {
	Datastore *UpdateDatastores200ResponseDatastore `json:"datastore,omitempty"`
}

// NewUpdateDatastores200Response instantiates a new UpdateDatastores200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDatastores200Response() *UpdateDatastores200Response {
	this := UpdateDatastores200Response{}
	return &this
}

// NewUpdateDatastores200ResponseWithDefaults instantiates a new UpdateDatastores200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDatastores200ResponseWithDefaults() *UpdateDatastores200Response {
	this := UpdateDatastores200Response{}
	return &this
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *UpdateDatastores200Response) GetDatastore() UpdateDatastores200ResponseDatastore {
	if o == nil || IsNil(o.Datastore) {
		var ret UpdateDatastores200ResponseDatastore
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDatastores200Response) GetDatastoreOk() (*UpdateDatastores200ResponseDatastore, bool) {
	if o == nil || IsNil(o.Datastore) {
		return nil, false
	}
	return o.Datastore, true
}

// IsSetDatastore returns a boolean if a field has been set.
func (o *UpdateDatastores200Response) IsSetDatastore() bool {
	if o != nil && !IsNil(o.Datastore) {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given UpdateDatastores200ResponseDatastore and assigns it to the Datastore field.
func (o *UpdateDatastores200Response) SetDatastore(v UpdateDatastores200ResponseDatastore) {
	o.Datastore = &v
}

func (o UpdateDatastores200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDatastores200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datastore) {
		toSerialize["datastore"] = o.Datastore
	}
	return toSerialize, nil
}

type NullableUpdateDatastores200Response struct {
	value *UpdateDatastores200Response
	isSet bool
}

func (v NullableUpdateDatastores200Response) Get() *UpdateDatastores200Response {
	return v.value
}

func (v *NullableUpdateDatastores200Response) Set(val *UpdateDatastores200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDatastores200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDatastores200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDatastores200Response(val *UpdateDatastores200Response) *NullableUpdateDatastores200Response {
	return &NullableUpdateDatastores200Response{value: val, isSet: true}
}

func (v NullableUpdateDatastores200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDatastores200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


