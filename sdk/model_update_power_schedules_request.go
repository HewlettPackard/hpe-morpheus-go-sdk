/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdatePowerSchedulesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePowerSchedulesRequest{}

// UpdatePowerSchedulesRequest struct for UpdatePowerSchedulesRequest
type UpdatePowerSchedulesRequest struct {
	Schedule UpdatePowerSchedulesRequestSchedule `json:"schedule"`
}

type _UpdatePowerSchedulesRequest UpdatePowerSchedulesRequest

// NewUpdatePowerSchedulesRequest instantiates a new UpdatePowerSchedulesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePowerSchedulesRequest(schedule UpdatePowerSchedulesRequestSchedule) *UpdatePowerSchedulesRequest {
	this := UpdatePowerSchedulesRequest{}
	this.Schedule = schedule
	return &this
}

// NewUpdatePowerSchedulesRequestWithDefaults instantiates a new UpdatePowerSchedulesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePowerSchedulesRequestWithDefaults() *UpdatePowerSchedulesRequest {
	this := UpdatePowerSchedulesRequest{}
	return &this
}

// GetSchedule returns the Schedule field value
func (o *UpdatePowerSchedulesRequest) GetSchedule() UpdatePowerSchedulesRequestSchedule {
	if o == nil {
		var ret UpdatePowerSchedulesRequestSchedule
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *UpdatePowerSchedulesRequest) GetScheduleOk() (*UpdatePowerSchedulesRequestSchedule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *UpdatePowerSchedulesRequest) SetSchedule(v UpdatePowerSchedulesRequestSchedule) {
	o.Schedule = v
}

func (o UpdatePowerSchedulesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePowerSchedulesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schedule"] = o.Schedule
	return toSerialize, nil
}

func (o *UpdatePowerSchedulesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"schedule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdatePowerSchedulesRequest := _UpdatePowerSchedulesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdatePowerSchedulesRequest)

	if err != nil {
		return err
	}

	*o = UpdatePowerSchedulesRequest(varUpdatePowerSchedulesRequest)

	return err
}

type NullableUpdatePowerSchedulesRequest struct {
	value *UpdatePowerSchedulesRequest
	isSet bool
}

func (v NullableUpdatePowerSchedulesRequest) Get() *UpdatePowerSchedulesRequest {
	return v.value
}

func (v *NullableUpdatePowerSchedulesRequest) Set(val *UpdatePowerSchedulesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePowerSchedulesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePowerSchedulesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePowerSchedulesRequest(val *UpdatePowerSchedulesRequest) *NullableUpdatePowerSchedulesRequest {
	return &NullableUpdatePowerSchedulesRequest{value: val, isSet: true}
}

func (v NullableUpdatePowerSchedulesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePowerSchedulesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


