/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ListCertificates200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListCertificates200Response{}

// ListCertificates200Response struct for ListCertificates200Response
type ListCertificates200Response struct {
	Certificates []ListCertificates200ResponseCertificatesInner `json:"certificates,omitempty"`
	CertificateCount *int64 `json:"certificateCount,omitempty"`
}

// NewListCertificates200Response instantiates a new ListCertificates200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListCertificates200Response() *ListCertificates200Response {
	this := ListCertificates200Response{}
	return &this
}

// NewListCertificates200ResponseWithDefaults instantiates a new ListCertificates200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListCertificates200ResponseWithDefaults() *ListCertificates200Response {
	this := ListCertificates200Response{}
	return &this
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *ListCertificates200Response) GetCertificates() []ListCertificates200ResponseCertificatesInner {
	if o == nil || IsNil(o.Certificates) {
		var ret []ListCertificates200ResponseCertificatesInner
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCertificates200Response) GetCertificatesOk() ([]ListCertificates200ResponseCertificatesInner, bool) {
	if o == nil || IsNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// IsSetCertificates returns a boolean if a field has been set.
func (o *ListCertificates200Response) IsSetCertificates() bool {
	if o != nil && !IsNil(o.Certificates) {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []ListCertificates200ResponseCertificatesInner and assigns it to the Certificates field.
func (o *ListCertificates200Response) SetCertificates(v []ListCertificates200ResponseCertificatesInner) {
	o.Certificates = v
}

// GetCertificateCount returns the CertificateCount field value if set, zero value otherwise.
func (o *ListCertificates200Response) GetCertificateCount() int64 {
	if o == nil || IsNil(o.CertificateCount) {
		var ret int64
		return ret
	}
	return *o.CertificateCount
}

// GetCertificateCountOk returns a tuple with the CertificateCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCertificates200Response) GetCertificateCountOk() (*int64, bool) {
	if o == nil || IsNil(o.CertificateCount) {
		return nil, false
	}
	return o.CertificateCount, true
}

// IsSetCertificateCount returns a boolean if a field has been set.
func (o *ListCertificates200Response) IsSetCertificateCount() bool {
	if o != nil && !IsNil(o.CertificateCount) {
		return true
	}

	return false
}

// SetCertificateCount gets a reference to the given int64 and assigns it to the CertificateCount field.
func (o *ListCertificates200Response) SetCertificateCount(v int64) {
	o.CertificateCount = &v
}

func (o ListCertificates200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListCertificates200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificates) {
		toSerialize["certificates"] = o.Certificates
	}
	if !IsNil(o.CertificateCount) {
		toSerialize["certificateCount"] = o.CertificateCount
	}
	return toSerialize, nil
}

type NullableListCertificates200Response struct {
	value *ListCertificates200Response
	isSet bool
}

func (v NullableListCertificates200Response) Get() *ListCertificates200Response {
	return v.value
}

func (v *NullableListCertificates200Response) Set(val *ListCertificates200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListCertificates200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListCertificates200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCertificates200Response(val *ListCertificates200Response) *NullableListCertificates200Response {
	return &NullableListCertificates200Response{value: val, isSet: true}
}

func (v NullableListCertificates200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCertificates200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


