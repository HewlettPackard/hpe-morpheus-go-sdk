/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AttachServerVolumeRequestMountPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachServerVolumeRequestMountPoint{}

// AttachServerVolumeRequestMountPoint struct for AttachServerVolumeRequestMountPoint
type AttachServerVolumeRequestMountPoint struct {
	Controller AttachServerVolumeRequestMountPointController `json:"controller"`
	// The unit number for the disk (e.g., \"3\")
	UnitNumber           string                 `json:"unitNumber"`
	AdditionalProperties map[string]interface{} `json:",remain"`
}

type _AttachServerVolumeRequestMountPoint AttachServerVolumeRequestMountPoint

// NewAttachServerVolumeRequestMountPoint instantiates a new AttachServerVolumeRequestMountPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachServerVolumeRequestMountPoint(controller AttachServerVolumeRequestMountPointController, unitNumber string) *AttachServerVolumeRequestMountPoint {
	this := AttachServerVolumeRequestMountPoint{}
	this.Controller = controller
	this.UnitNumber = unitNumber
	return &this
}

// NewAttachServerVolumeRequestMountPointWithDefaults instantiates a new AttachServerVolumeRequestMountPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachServerVolumeRequestMountPointWithDefaults() *AttachServerVolumeRequestMountPoint {
	this := AttachServerVolumeRequestMountPoint{}
	return &this
}

// GetController returns the Controller field value
func (o *AttachServerVolumeRequestMountPoint) GetController() AttachServerVolumeRequestMountPointController {
	if o == nil {
		var ret AttachServerVolumeRequestMountPointController
		return ret
	}

	return o.Controller
}

// GetControllerOk returns a tuple with the Controller field value
// and a boolean to check if the value has been set.
func (o *AttachServerVolumeRequestMountPoint) GetControllerOk() (*AttachServerVolumeRequestMountPointController, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Controller, true
}

// SetController sets field value
func (o *AttachServerVolumeRequestMountPoint) SetController(v AttachServerVolumeRequestMountPointController) {
	o.Controller = v
}

// GetUnitNumber returns the UnitNumber field value
func (o *AttachServerVolumeRequestMountPoint) GetUnitNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnitNumber
}

// GetUnitNumberOk returns a tuple with the UnitNumber field value
// and a boolean to check if the value has been set.
func (o *AttachServerVolumeRequestMountPoint) GetUnitNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnitNumber, true
}

// SetUnitNumber sets field value
func (o *AttachServerVolumeRequestMountPoint) SetUnitNumber(v string) {
	o.UnitNumber = v
}

func (o AttachServerVolumeRequestMountPoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachServerVolumeRequestMountPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["controller"] = o.Controller
	toSerialize["unitNumber"] = o.UnitNumber

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *AttachServerVolumeRequestMountPoint) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
