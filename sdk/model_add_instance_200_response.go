/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AddInstance200Response - struct for AddInstance200Response
type AddInstance200Response struct {
	AddInstance200ResponseOneOf *AddInstance200ResponseOneOf
	RestartClusterContainer200Response *RestartClusterContainer200Response
}

// AddInstance200ResponseOneOfAsAddInstance200Response is a convenience function that returns AddInstance200ResponseOneOf wrapped in AddInstance200Response
func AddInstance200ResponseOneOfAsAddInstance200Response(v *AddInstance200ResponseOneOf) AddInstance200Response {
	return AddInstance200Response{
		AddInstance200ResponseOneOf: v,
	}
}

// RestartClusterContainer200ResponseAsAddInstance200Response is a convenience function that returns RestartClusterContainer200Response wrapped in AddInstance200Response
func RestartClusterContainer200ResponseAsAddInstance200Response(v *RestartClusterContainer200Response) AddInstance200Response {
	return AddInstance200Response{
		RestartClusterContainer200Response: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddInstance200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddInstance200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.AddInstance200ResponseOneOf)
	if err == nil {
		jsonAddInstance200ResponseOneOf, _ := json.Marshal(dst.AddInstance200ResponseOneOf)
		if string(jsonAddInstance200ResponseOneOf) == "{}" { // empty struct
			dst.AddInstance200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.AddInstance200ResponseOneOf); err != nil {
				dst.AddInstance200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddInstance200ResponseOneOf = nil
	}

	// try to unmarshal data into RestartClusterContainer200Response
	err = newStrictDecoder(data).Decode(&dst.RestartClusterContainer200Response)
	if err == nil {
		jsonRestartClusterContainer200Response, _ := json.Marshal(dst.RestartClusterContainer200Response)
		if string(jsonRestartClusterContainer200Response) == "{}" { // empty struct
			dst.RestartClusterContainer200Response = nil
		} else {
			if err = validator.Validate(dst.RestartClusterContainer200Response); err != nil {
				dst.RestartClusterContainer200Response = nil
			} else {
				match++
			}
		}
	} else {
		dst.RestartClusterContainer200Response = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddInstance200ResponseOneOf = nil
		dst.RestartClusterContainer200Response = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddInstance200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddInstance200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddInstance200Response) MarshalJSON() ([]byte, error) {
	if src.AddInstance200ResponseOneOf != nil {
		return json.Marshal(&src.AddInstance200ResponseOneOf)
	}

	if src.RestartClusterContainer200Response != nil {
		return json.Marshal(&src.RestartClusterContainer200Response)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddInstance200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddInstance200ResponseOneOf != nil {
		return obj.AddInstance200ResponseOneOf
	}

	if obj.RestartClusterContainer200Response != nil {
		return obj.RestartClusterContainer200Response
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AddInstance200Response) GetActualInstanceValue() (interface{}) {
	if obj.AddInstance200ResponseOneOf != nil {
		return *obj.AddInstance200ResponseOneOf
	}

	if obj.RestartClusterContainer200Response != nil {
		return *obj.RestartClusterContainer200Response
	}

	// all schemas are nil
	return nil
}

type NullableAddInstance200Response struct {
	value *AddInstance200Response
	isSet bool
}

func (v NullableAddInstance200Response) Get() *AddInstance200Response {
	return v.value
}

func (v *NullableAddInstance200Response) Set(val *AddInstance200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddInstance200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddInstance200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddInstance200Response(val *AddInstance200Response) *NullableAddInstance200Response {
	return &NullableAddInstance200Response{value: val, isSet: true}
}

func (v NullableAddInstance200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddInstance200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


