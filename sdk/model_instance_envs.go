/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the InstanceEnvs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceEnvs{}

// InstanceEnvs struct for InstanceEnvs
type InstanceEnvs struct {
	Envs []GetEnvVariables200ResponseInstanceEnvsInner `json:"envs,omitempty"`
	ReadOnlyEnvs []GetEnvVariables200ResponseInstanceEnvsInner `json:"readOnlyEnvs,omitempty"`
	ImportedEnvs []GetEnvVariables200ResponseInstanceEnvsInner `json:"importedEnvs,omitempty"`
}

// NewInstanceEnvs instantiates a new InstanceEnvs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceEnvs() *InstanceEnvs {
	this := InstanceEnvs{}
	return &this
}

// NewInstanceEnvsWithDefaults instantiates a new InstanceEnvs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceEnvsWithDefaults() *InstanceEnvs {
	this := InstanceEnvs{}
	return &this
}

// GetEnvs returns the Envs field value if set, zero value otherwise.
func (o *InstanceEnvs) GetEnvs() []GetEnvVariables200ResponseInstanceEnvsInner {
	if o == nil || IsNil(o.Envs) {
		var ret []GetEnvVariables200ResponseInstanceEnvsInner
		return ret
	}
	return o.Envs
}

// GetEnvsOk returns a tuple with the Envs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceEnvs) GetEnvsOk() ([]GetEnvVariables200ResponseInstanceEnvsInner, bool) {
	if o == nil || IsNil(o.Envs) {
		return nil, false
	}
	return o.Envs, true
}

// IsSetEnvs returns a boolean if a field has been set.
func (o *InstanceEnvs) IsSetEnvs() bool {
	if o != nil && !IsNil(o.Envs) {
		return true
	}

	return false
}

// SetEnvs gets a reference to the given []GetEnvVariables200ResponseInstanceEnvsInner and assigns it to the Envs field.
func (o *InstanceEnvs) SetEnvs(v []GetEnvVariables200ResponseInstanceEnvsInner) {
	o.Envs = v
}

// GetReadOnlyEnvs returns the ReadOnlyEnvs field value if set, zero value otherwise.
func (o *InstanceEnvs) GetReadOnlyEnvs() []GetEnvVariables200ResponseInstanceEnvsInner {
	if o == nil || IsNil(o.ReadOnlyEnvs) {
		var ret []GetEnvVariables200ResponseInstanceEnvsInner
		return ret
	}
	return o.ReadOnlyEnvs
}

// GetReadOnlyEnvsOk returns a tuple with the ReadOnlyEnvs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceEnvs) GetReadOnlyEnvsOk() ([]GetEnvVariables200ResponseInstanceEnvsInner, bool) {
	if o == nil || IsNil(o.ReadOnlyEnvs) {
		return nil, false
	}
	return o.ReadOnlyEnvs, true
}

// IsSetReadOnlyEnvs returns a boolean if a field has been set.
func (o *InstanceEnvs) IsSetReadOnlyEnvs() bool {
	if o != nil && !IsNil(o.ReadOnlyEnvs) {
		return true
	}

	return false
}

// SetReadOnlyEnvs gets a reference to the given []GetEnvVariables200ResponseInstanceEnvsInner and assigns it to the ReadOnlyEnvs field.
func (o *InstanceEnvs) SetReadOnlyEnvs(v []GetEnvVariables200ResponseInstanceEnvsInner) {
	o.ReadOnlyEnvs = v
}

// GetImportedEnvs returns the ImportedEnvs field value if set, zero value otherwise.
func (o *InstanceEnvs) GetImportedEnvs() []GetEnvVariables200ResponseInstanceEnvsInner {
	if o == nil || IsNil(o.ImportedEnvs) {
		var ret []GetEnvVariables200ResponseInstanceEnvsInner
		return ret
	}
	return o.ImportedEnvs
}

// GetImportedEnvsOk returns a tuple with the ImportedEnvs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceEnvs) GetImportedEnvsOk() ([]GetEnvVariables200ResponseInstanceEnvsInner, bool) {
	if o == nil || IsNil(o.ImportedEnvs) {
		return nil, false
	}
	return o.ImportedEnvs, true
}

// IsSetImportedEnvs returns a boolean if a field has been set.
func (o *InstanceEnvs) IsSetImportedEnvs() bool {
	if o != nil && !IsNil(o.ImportedEnvs) {
		return true
	}

	return false
}

// SetImportedEnvs gets a reference to the given []GetEnvVariables200ResponseInstanceEnvsInner and assigns it to the ImportedEnvs field.
func (o *InstanceEnvs) SetImportedEnvs(v []GetEnvVariables200ResponseInstanceEnvsInner) {
	o.ImportedEnvs = v
}

func (o InstanceEnvs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceEnvs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Envs) {
		toSerialize["envs"] = o.Envs
	}
	if !IsNil(o.ReadOnlyEnvs) {
		toSerialize["readOnlyEnvs"] = o.ReadOnlyEnvs
	}
	if !IsNil(o.ImportedEnvs) {
		toSerialize["importedEnvs"] = o.ImportedEnvs
	}
	return toSerialize, nil
}

type NullableInstanceEnvs struct {
	value *InstanceEnvs
	isSet bool
}

func (v NullableInstanceEnvs) Get() *InstanceEnvs {
	return v.value
}

func (v *NullableInstanceEnvs) Set(val *InstanceEnvs) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceEnvs) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceEnvs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceEnvs(val *InstanceEnvs) *NullableInstanceEnvs {
	return &NullableInstanceEnvs{value: val, isSet: true}
}

func (v NullableInstanceEnvs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceEnvs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


