/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AddCredentialsRequestCredential - Payload for creating a new credential
type AddCredentialsRequestCredential struct {
	AddCredentialsRequestCredentialOneOf *AddCredentialsRequestCredentialOneOf
	AddCredentialsRequestCredentialOneOf1 *AddCredentialsRequestCredentialOneOf1
	AddCredentialsRequestCredentialOneOf2 *AddCredentialsRequestCredentialOneOf2
	AddCredentialsRequestCredentialOneOf3 *AddCredentialsRequestCredentialOneOf3
	AddCredentialsRequestCredentialOneOf4 *AddCredentialsRequestCredentialOneOf4
	AddCredentialsRequestCredentialOneOf5 *AddCredentialsRequestCredentialOneOf5
	AddCredentialsRequestCredentialOneOf6 *AddCredentialsRequestCredentialOneOf6
	AddCredentialsRequestCredentialOneOf7 *AddCredentialsRequestCredentialOneOf7
	AddCredentialsRequestCredentialOneOf8 *AddCredentialsRequestCredentialOneOf8
}

// AddCredentialsRequestCredentialOneOfAsAddCredentialsRequestCredential is a convenience function that returns AddCredentialsRequestCredentialOneOf wrapped in AddCredentialsRequestCredential
func AddCredentialsRequestCredentialOneOfAsAddCredentialsRequestCredential(v *AddCredentialsRequestCredentialOneOf) AddCredentialsRequestCredential {
	return AddCredentialsRequestCredential{
		AddCredentialsRequestCredentialOneOf: v,
	}
}

// AddCredentialsRequestCredentialOneOf1AsAddCredentialsRequestCredential is a convenience function that returns AddCredentialsRequestCredentialOneOf1 wrapped in AddCredentialsRequestCredential
func AddCredentialsRequestCredentialOneOf1AsAddCredentialsRequestCredential(v *AddCredentialsRequestCredentialOneOf1) AddCredentialsRequestCredential {
	return AddCredentialsRequestCredential{
		AddCredentialsRequestCredentialOneOf1: v,
	}
}

// AddCredentialsRequestCredentialOneOf2AsAddCredentialsRequestCredential is a convenience function that returns AddCredentialsRequestCredentialOneOf2 wrapped in AddCredentialsRequestCredential
func AddCredentialsRequestCredentialOneOf2AsAddCredentialsRequestCredential(v *AddCredentialsRequestCredentialOneOf2) AddCredentialsRequestCredential {
	return AddCredentialsRequestCredential{
		AddCredentialsRequestCredentialOneOf2: v,
	}
}

// AddCredentialsRequestCredentialOneOf3AsAddCredentialsRequestCredential is a convenience function that returns AddCredentialsRequestCredentialOneOf3 wrapped in AddCredentialsRequestCredential
func AddCredentialsRequestCredentialOneOf3AsAddCredentialsRequestCredential(v *AddCredentialsRequestCredentialOneOf3) AddCredentialsRequestCredential {
	return AddCredentialsRequestCredential{
		AddCredentialsRequestCredentialOneOf3: v,
	}
}

// AddCredentialsRequestCredentialOneOf4AsAddCredentialsRequestCredential is a convenience function that returns AddCredentialsRequestCredentialOneOf4 wrapped in AddCredentialsRequestCredential
func AddCredentialsRequestCredentialOneOf4AsAddCredentialsRequestCredential(v *AddCredentialsRequestCredentialOneOf4) AddCredentialsRequestCredential {
	return AddCredentialsRequestCredential{
		AddCredentialsRequestCredentialOneOf4: v,
	}
}

// AddCredentialsRequestCredentialOneOf5AsAddCredentialsRequestCredential is a convenience function that returns AddCredentialsRequestCredentialOneOf5 wrapped in AddCredentialsRequestCredential
func AddCredentialsRequestCredentialOneOf5AsAddCredentialsRequestCredential(v *AddCredentialsRequestCredentialOneOf5) AddCredentialsRequestCredential {
	return AddCredentialsRequestCredential{
		AddCredentialsRequestCredentialOneOf5: v,
	}
}

// AddCredentialsRequestCredentialOneOf6AsAddCredentialsRequestCredential is a convenience function that returns AddCredentialsRequestCredentialOneOf6 wrapped in AddCredentialsRequestCredential
func AddCredentialsRequestCredentialOneOf6AsAddCredentialsRequestCredential(v *AddCredentialsRequestCredentialOneOf6) AddCredentialsRequestCredential {
	return AddCredentialsRequestCredential{
		AddCredentialsRequestCredentialOneOf6: v,
	}
}

// AddCredentialsRequestCredentialOneOf7AsAddCredentialsRequestCredential is a convenience function that returns AddCredentialsRequestCredentialOneOf7 wrapped in AddCredentialsRequestCredential
func AddCredentialsRequestCredentialOneOf7AsAddCredentialsRequestCredential(v *AddCredentialsRequestCredentialOneOf7) AddCredentialsRequestCredential {
	return AddCredentialsRequestCredential{
		AddCredentialsRequestCredentialOneOf7: v,
	}
}

// AddCredentialsRequestCredentialOneOf8AsAddCredentialsRequestCredential is a convenience function that returns AddCredentialsRequestCredentialOneOf8 wrapped in AddCredentialsRequestCredential
func AddCredentialsRequestCredentialOneOf8AsAddCredentialsRequestCredential(v *AddCredentialsRequestCredentialOneOf8) AddCredentialsRequestCredential {
	return AddCredentialsRequestCredential{
		AddCredentialsRequestCredentialOneOf8: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddCredentialsRequestCredential) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddCredentialsRequestCredentialOneOf
	err = newStrictDecoder(data).Decode(&dst.AddCredentialsRequestCredentialOneOf)
	if err == nil {
		jsonAddCredentialsRequestCredentialOneOf, _ := json.Marshal(dst.AddCredentialsRequestCredentialOneOf)
		if string(jsonAddCredentialsRequestCredentialOneOf) == "{}" { // empty struct
			dst.AddCredentialsRequestCredentialOneOf = nil
		} else {
			if err = validator.Validate(dst.AddCredentialsRequestCredentialOneOf); err != nil {
				dst.AddCredentialsRequestCredentialOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddCredentialsRequestCredentialOneOf = nil
	}

	// try to unmarshal data into AddCredentialsRequestCredentialOneOf1
	err = newStrictDecoder(data).Decode(&dst.AddCredentialsRequestCredentialOneOf1)
	if err == nil {
		jsonAddCredentialsRequestCredentialOneOf1, _ := json.Marshal(dst.AddCredentialsRequestCredentialOneOf1)
		if string(jsonAddCredentialsRequestCredentialOneOf1) == "{}" { // empty struct
			dst.AddCredentialsRequestCredentialOneOf1 = nil
		} else {
			if err = validator.Validate(dst.AddCredentialsRequestCredentialOneOf1); err != nil {
				dst.AddCredentialsRequestCredentialOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddCredentialsRequestCredentialOneOf1 = nil
	}

	// try to unmarshal data into AddCredentialsRequestCredentialOneOf2
	err = newStrictDecoder(data).Decode(&dst.AddCredentialsRequestCredentialOneOf2)
	if err == nil {
		jsonAddCredentialsRequestCredentialOneOf2, _ := json.Marshal(dst.AddCredentialsRequestCredentialOneOf2)
		if string(jsonAddCredentialsRequestCredentialOneOf2) == "{}" { // empty struct
			dst.AddCredentialsRequestCredentialOneOf2 = nil
		} else {
			if err = validator.Validate(dst.AddCredentialsRequestCredentialOneOf2); err != nil {
				dst.AddCredentialsRequestCredentialOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddCredentialsRequestCredentialOneOf2 = nil
	}

	// try to unmarshal data into AddCredentialsRequestCredentialOneOf3
	err = newStrictDecoder(data).Decode(&dst.AddCredentialsRequestCredentialOneOf3)
	if err == nil {
		jsonAddCredentialsRequestCredentialOneOf3, _ := json.Marshal(dst.AddCredentialsRequestCredentialOneOf3)
		if string(jsonAddCredentialsRequestCredentialOneOf3) == "{}" { // empty struct
			dst.AddCredentialsRequestCredentialOneOf3 = nil
		} else {
			if err = validator.Validate(dst.AddCredentialsRequestCredentialOneOf3); err != nil {
				dst.AddCredentialsRequestCredentialOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddCredentialsRequestCredentialOneOf3 = nil
	}

	// try to unmarshal data into AddCredentialsRequestCredentialOneOf4
	err = newStrictDecoder(data).Decode(&dst.AddCredentialsRequestCredentialOneOf4)
	if err == nil {
		jsonAddCredentialsRequestCredentialOneOf4, _ := json.Marshal(dst.AddCredentialsRequestCredentialOneOf4)
		if string(jsonAddCredentialsRequestCredentialOneOf4) == "{}" { // empty struct
			dst.AddCredentialsRequestCredentialOneOf4 = nil
		} else {
			if err = validator.Validate(dst.AddCredentialsRequestCredentialOneOf4); err != nil {
				dst.AddCredentialsRequestCredentialOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddCredentialsRequestCredentialOneOf4 = nil
	}

	// try to unmarshal data into AddCredentialsRequestCredentialOneOf5
	err = newStrictDecoder(data).Decode(&dst.AddCredentialsRequestCredentialOneOf5)
	if err == nil {
		jsonAddCredentialsRequestCredentialOneOf5, _ := json.Marshal(dst.AddCredentialsRequestCredentialOneOf5)
		if string(jsonAddCredentialsRequestCredentialOneOf5) == "{}" { // empty struct
			dst.AddCredentialsRequestCredentialOneOf5 = nil
		} else {
			if err = validator.Validate(dst.AddCredentialsRequestCredentialOneOf5); err != nil {
				dst.AddCredentialsRequestCredentialOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddCredentialsRequestCredentialOneOf5 = nil
	}

	// try to unmarshal data into AddCredentialsRequestCredentialOneOf6
	err = newStrictDecoder(data).Decode(&dst.AddCredentialsRequestCredentialOneOf6)
	if err == nil {
		jsonAddCredentialsRequestCredentialOneOf6, _ := json.Marshal(dst.AddCredentialsRequestCredentialOneOf6)
		if string(jsonAddCredentialsRequestCredentialOneOf6) == "{}" { // empty struct
			dst.AddCredentialsRequestCredentialOneOf6 = nil
		} else {
			if err = validator.Validate(dst.AddCredentialsRequestCredentialOneOf6); err != nil {
				dst.AddCredentialsRequestCredentialOneOf6 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddCredentialsRequestCredentialOneOf6 = nil
	}

	// try to unmarshal data into AddCredentialsRequestCredentialOneOf7
	err = newStrictDecoder(data).Decode(&dst.AddCredentialsRequestCredentialOneOf7)
	if err == nil {
		jsonAddCredentialsRequestCredentialOneOf7, _ := json.Marshal(dst.AddCredentialsRequestCredentialOneOf7)
		if string(jsonAddCredentialsRequestCredentialOneOf7) == "{}" { // empty struct
			dst.AddCredentialsRequestCredentialOneOf7 = nil
		} else {
			if err = validator.Validate(dst.AddCredentialsRequestCredentialOneOf7); err != nil {
				dst.AddCredentialsRequestCredentialOneOf7 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddCredentialsRequestCredentialOneOf7 = nil
	}

	// try to unmarshal data into AddCredentialsRequestCredentialOneOf8
	err = newStrictDecoder(data).Decode(&dst.AddCredentialsRequestCredentialOneOf8)
	if err == nil {
		jsonAddCredentialsRequestCredentialOneOf8, _ := json.Marshal(dst.AddCredentialsRequestCredentialOneOf8)
		if string(jsonAddCredentialsRequestCredentialOneOf8) == "{}" { // empty struct
			dst.AddCredentialsRequestCredentialOneOf8 = nil
		} else {
			if err = validator.Validate(dst.AddCredentialsRequestCredentialOneOf8); err != nil {
				dst.AddCredentialsRequestCredentialOneOf8 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddCredentialsRequestCredentialOneOf8 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddCredentialsRequestCredentialOneOf = nil
		dst.AddCredentialsRequestCredentialOneOf1 = nil
		dst.AddCredentialsRequestCredentialOneOf2 = nil
		dst.AddCredentialsRequestCredentialOneOf3 = nil
		dst.AddCredentialsRequestCredentialOneOf4 = nil
		dst.AddCredentialsRequestCredentialOneOf5 = nil
		dst.AddCredentialsRequestCredentialOneOf6 = nil
		dst.AddCredentialsRequestCredentialOneOf7 = nil
		dst.AddCredentialsRequestCredentialOneOf8 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddCredentialsRequestCredential)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddCredentialsRequestCredential)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddCredentialsRequestCredential) MarshalJSON() ([]byte, error) {
	if src.AddCredentialsRequestCredentialOneOf != nil {
		return json.Marshal(&src.AddCredentialsRequestCredentialOneOf)
	}

	if src.AddCredentialsRequestCredentialOneOf1 != nil {
		return json.Marshal(&src.AddCredentialsRequestCredentialOneOf1)
	}

	if src.AddCredentialsRequestCredentialOneOf2 != nil {
		return json.Marshal(&src.AddCredentialsRequestCredentialOneOf2)
	}

	if src.AddCredentialsRequestCredentialOneOf3 != nil {
		return json.Marshal(&src.AddCredentialsRequestCredentialOneOf3)
	}

	if src.AddCredentialsRequestCredentialOneOf4 != nil {
		return json.Marshal(&src.AddCredentialsRequestCredentialOneOf4)
	}

	if src.AddCredentialsRequestCredentialOneOf5 != nil {
		return json.Marshal(&src.AddCredentialsRequestCredentialOneOf5)
	}

	if src.AddCredentialsRequestCredentialOneOf6 != nil {
		return json.Marshal(&src.AddCredentialsRequestCredentialOneOf6)
	}

	if src.AddCredentialsRequestCredentialOneOf7 != nil {
		return json.Marshal(&src.AddCredentialsRequestCredentialOneOf7)
	}

	if src.AddCredentialsRequestCredentialOneOf8 != nil {
		return json.Marshal(&src.AddCredentialsRequestCredentialOneOf8)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddCredentialsRequestCredential) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddCredentialsRequestCredentialOneOf != nil {
		return obj.AddCredentialsRequestCredentialOneOf
	}

	if obj.AddCredentialsRequestCredentialOneOf1 != nil {
		return obj.AddCredentialsRequestCredentialOneOf1
	}

	if obj.AddCredentialsRequestCredentialOneOf2 != nil {
		return obj.AddCredentialsRequestCredentialOneOf2
	}

	if obj.AddCredentialsRequestCredentialOneOf3 != nil {
		return obj.AddCredentialsRequestCredentialOneOf3
	}

	if obj.AddCredentialsRequestCredentialOneOf4 != nil {
		return obj.AddCredentialsRequestCredentialOneOf4
	}

	if obj.AddCredentialsRequestCredentialOneOf5 != nil {
		return obj.AddCredentialsRequestCredentialOneOf5
	}

	if obj.AddCredentialsRequestCredentialOneOf6 != nil {
		return obj.AddCredentialsRequestCredentialOneOf6
	}

	if obj.AddCredentialsRequestCredentialOneOf7 != nil {
		return obj.AddCredentialsRequestCredentialOneOf7
	}

	if obj.AddCredentialsRequestCredentialOneOf8 != nil {
		return obj.AddCredentialsRequestCredentialOneOf8
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AddCredentialsRequestCredential) GetActualInstanceValue() (interface{}) {
	if obj.AddCredentialsRequestCredentialOneOf != nil {
		return *obj.AddCredentialsRequestCredentialOneOf
	}

	if obj.AddCredentialsRequestCredentialOneOf1 != nil {
		return *obj.AddCredentialsRequestCredentialOneOf1
	}

	if obj.AddCredentialsRequestCredentialOneOf2 != nil {
		return *obj.AddCredentialsRequestCredentialOneOf2
	}

	if obj.AddCredentialsRequestCredentialOneOf3 != nil {
		return *obj.AddCredentialsRequestCredentialOneOf3
	}

	if obj.AddCredentialsRequestCredentialOneOf4 != nil {
		return *obj.AddCredentialsRequestCredentialOneOf4
	}

	if obj.AddCredentialsRequestCredentialOneOf5 != nil {
		return *obj.AddCredentialsRequestCredentialOneOf5
	}

	if obj.AddCredentialsRequestCredentialOneOf6 != nil {
		return *obj.AddCredentialsRequestCredentialOneOf6
	}

	if obj.AddCredentialsRequestCredentialOneOf7 != nil {
		return *obj.AddCredentialsRequestCredentialOneOf7
	}

	if obj.AddCredentialsRequestCredentialOneOf8 != nil {
		return *obj.AddCredentialsRequestCredentialOneOf8
	}

	// all schemas are nil
	return nil
}

type NullableAddCredentialsRequestCredential struct {
	value *AddCredentialsRequestCredential
	isSet bool
}

func (v NullableAddCredentialsRequestCredential) Get() *AddCredentialsRequestCredential {
	return v.value
}

func (v *NullableAddCredentialsRequestCredential) Set(val *AddCredentialsRequestCredential) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCredentialsRequestCredential) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCredentialsRequestCredential) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCredentialsRequestCredential(val *AddCredentialsRequestCredential) *NullableAddCredentialsRequestCredential {
	return &NullableAddCredentialsRequestCredential{value: val, isSet: true}
}

func (v NullableAddCredentialsRequestCredential) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCredentialsRequestCredential) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


