/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the PhpIPAMNetworkPoolServerUpdateConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhpIPAMNetworkPoolServerUpdateConfig{}

// PhpIPAMNetworkPoolServerUpdateConfig struct for PhpIPAMNetworkPoolServerUpdateConfig
type PhpIPAMNetworkPoolServerUpdateConfig struct {
	// App ID (Your App name in phpIPAM)
	AppId *string `json:"appId,omitempty"`
	// Inventory Existing
	InventoryExisting *string `json:"inventoryExisting,omitempty"`
}

// NewPhpIPAMNetworkPoolServerUpdateConfig instantiates a new PhpIPAMNetworkPoolServerUpdateConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhpIPAMNetworkPoolServerUpdateConfig() *PhpIPAMNetworkPoolServerUpdateConfig {
	this := PhpIPAMNetworkPoolServerUpdateConfig{}
	var inventoryExisting string = "off"
	this.InventoryExisting = &inventoryExisting
	return &this
}

// NewPhpIPAMNetworkPoolServerUpdateConfigWithDefaults instantiates a new PhpIPAMNetworkPoolServerUpdateConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhpIPAMNetworkPoolServerUpdateConfigWithDefaults() *PhpIPAMNetworkPoolServerUpdateConfig {
	this := PhpIPAMNetworkPoolServerUpdateConfig{}
	var inventoryExisting string = "off"
	this.InventoryExisting = &inventoryExisting
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *PhpIPAMNetworkPoolServerUpdateConfig) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhpIPAMNetworkPoolServerUpdateConfig) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// IsSetAppId returns a boolean if a field has been set.
func (o *PhpIPAMNetworkPoolServerUpdateConfig) IsSetAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *PhpIPAMNetworkPoolServerUpdateConfig) SetAppId(v string) {
	o.AppId = &v
}

// GetInventoryExisting returns the InventoryExisting field value if set, zero value otherwise.
func (o *PhpIPAMNetworkPoolServerUpdateConfig) GetInventoryExisting() string {
	if o == nil || IsNil(o.InventoryExisting) {
		var ret string
		return ret
	}
	return *o.InventoryExisting
}

// GetInventoryExistingOk returns a tuple with the InventoryExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhpIPAMNetworkPoolServerUpdateConfig) GetInventoryExistingOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryExisting) {
		return nil, false
	}
	return o.InventoryExisting, true
}

// IsSetInventoryExisting returns a boolean if a field has been set.
func (o *PhpIPAMNetworkPoolServerUpdateConfig) IsSetInventoryExisting() bool {
	if o != nil && !IsNil(o.InventoryExisting) {
		return true
	}

	return false
}

// SetInventoryExisting gets a reference to the given string and assigns it to the InventoryExisting field.
func (o *PhpIPAMNetworkPoolServerUpdateConfig) SetInventoryExisting(v string) {
	o.InventoryExisting = &v
}

func (o PhpIPAMNetworkPoolServerUpdateConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhpIPAMNetworkPoolServerUpdateConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.InventoryExisting) {
		toSerialize["inventoryExisting"] = o.InventoryExisting
	}
	return toSerialize, nil
}

type NullablePhpIPAMNetworkPoolServerUpdateConfig struct {
	value *PhpIPAMNetworkPoolServerUpdateConfig
	isSet bool
}

func (v NullablePhpIPAMNetworkPoolServerUpdateConfig) Get() *PhpIPAMNetworkPoolServerUpdateConfig {
	return v.value
}

func (v *NullablePhpIPAMNetworkPoolServerUpdateConfig) Set(val *PhpIPAMNetworkPoolServerUpdateConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePhpIPAMNetworkPoolServerUpdateConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePhpIPAMNetworkPoolServerUpdateConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhpIPAMNetworkPoolServerUpdateConfig(val *PhpIPAMNetworkPoolServerUpdateConfig) *NullablePhpIPAMNetworkPoolServerUpdateConfig {
	return &NullablePhpIPAMNetworkPoolServerUpdateConfig{value: val, isSet: true}
}

func (v NullablePhpIPAMNetworkPoolServerUpdateConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhpIPAMNetworkPoolServerUpdateConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


