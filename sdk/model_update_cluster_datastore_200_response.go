/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateClusterDatastore200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateClusterDatastore200Response{}

// UpdateClusterDatastore200Response struct for UpdateClusterDatastore200Response
type UpdateClusterDatastore200Response struct {
	Datastore *SaveCloudDatastore200ResponseAllOfDatastore `json:"datastore,omitempty"`
	Success *bool `json:"success,omitempty"`
}

// NewUpdateClusterDatastore200Response instantiates a new UpdateClusterDatastore200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateClusterDatastore200Response() *UpdateClusterDatastore200Response {
	this := UpdateClusterDatastore200Response{}
	return &this
}

// NewUpdateClusterDatastore200ResponseWithDefaults instantiates a new UpdateClusterDatastore200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateClusterDatastore200ResponseWithDefaults() *UpdateClusterDatastore200Response {
	this := UpdateClusterDatastore200Response{}
	return &this
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *UpdateClusterDatastore200Response) GetDatastore() SaveCloudDatastore200ResponseAllOfDatastore {
	if o == nil || IsNil(o.Datastore) {
		var ret SaveCloudDatastore200ResponseAllOfDatastore
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterDatastore200Response) GetDatastoreOk() (*SaveCloudDatastore200ResponseAllOfDatastore, bool) {
	if o == nil || IsNil(o.Datastore) {
		return nil, false
	}
	return o.Datastore, true
}

// IsSetDatastore returns a boolean if a field has been set.
func (o *UpdateClusterDatastore200Response) IsSetDatastore() bool {
	if o != nil && !IsNil(o.Datastore) {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given SaveCloudDatastore200ResponseAllOfDatastore and assigns it to the Datastore field.
func (o *UpdateClusterDatastore200Response) SetDatastore(v SaveCloudDatastore200ResponseAllOfDatastore) {
	o.Datastore = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *UpdateClusterDatastore200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterDatastore200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// IsSetSuccess returns a boolean if a field has been set.
func (o *UpdateClusterDatastore200Response) IsSetSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *UpdateClusterDatastore200Response) SetSuccess(v bool) {
	o.Success = &v
}

func (o UpdateClusterDatastore200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateClusterDatastore200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datastore) {
		toSerialize["datastore"] = o.Datastore
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return toSerialize, nil
}

type NullableUpdateClusterDatastore200Response struct {
	value *UpdateClusterDatastore200Response
	isSet bool
}

func (v NullableUpdateClusterDatastore200Response) Get() *UpdateClusterDatastore200Response {
	return v.value
}

func (v *NullableUpdateClusterDatastore200Response) Set(val *UpdateClusterDatastore200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateClusterDatastore200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateClusterDatastore200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateClusterDatastore200Response(val *UpdateClusterDatastore200Response) *NullableUpdateClusterDatastore200Response {
	return &NullableUpdateClusterDatastore200Response{value: val, isSet: true}
}

func (v NullableUpdateClusterDatastore200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateClusterDatastore200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


