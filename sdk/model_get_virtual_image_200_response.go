/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the GetVirtualImage200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetVirtualImage200Response{}

// GetVirtualImage200Response struct for GetVirtualImage200Response
type GetVirtualImage200Response struct {
	VirtualImage *ListVirtualImages200ResponseAllOfVirtualImagesInner `json:"virtualImage,omitempty"`
}

// NewGetVirtualImage200Response instantiates a new GetVirtualImage200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetVirtualImage200Response() *GetVirtualImage200Response {
	this := GetVirtualImage200Response{}
	return &this
}

// NewGetVirtualImage200ResponseWithDefaults instantiates a new GetVirtualImage200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetVirtualImage200ResponseWithDefaults() *GetVirtualImage200Response {
	this := GetVirtualImage200Response{}
	return &this
}

// GetVirtualImage returns the VirtualImage field value if set, zero value otherwise.
func (o *GetVirtualImage200Response) GetVirtualImage() ListVirtualImages200ResponseAllOfVirtualImagesInner {
	if o == nil || IsNil(o.VirtualImage) {
		var ret ListVirtualImages200ResponseAllOfVirtualImagesInner
		return ret
	}
	return *o.VirtualImage
}

// GetVirtualImageOk returns a tuple with the VirtualImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetVirtualImage200Response) GetVirtualImageOk() (*ListVirtualImages200ResponseAllOfVirtualImagesInner, bool) {
	if o == nil || IsNil(o.VirtualImage) {
		return nil, false
	}
	return o.VirtualImage, true
}

// IsSetVirtualImage returns a boolean if a field has been set.
func (o *GetVirtualImage200Response) IsSetVirtualImage() bool {
	if o != nil && !IsNil(o.VirtualImage) {
		return true
	}

	return false
}

// SetVirtualImage gets a reference to the given ListVirtualImages200ResponseAllOfVirtualImagesInner and assigns it to the VirtualImage field.
func (o *GetVirtualImage200Response) SetVirtualImage(v ListVirtualImages200ResponseAllOfVirtualImagesInner) {
	o.VirtualImage = &v
}

func (o GetVirtualImage200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetVirtualImage200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VirtualImage) {
		toSerialize["virtualImage"] = o.VirtualImage
	}
	return toSerialize, nil
}

type NullableGetVirtualImage200Response struct {
	value *GetVirtualImage200Response
	isSet bool
}

func (v NullableGetVirtualImage200Response) Get() *GetVirtualImage200Response {
	return v.value
}

func (v *NullableGetVirtualImage200Response) Set(val *GetVirtualImage200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetVirtualImage200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetVirtualImage200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetVirtualImage200Response(val *GetVirtualImage200Response) *NullableGetVirtualImage200Response {
	return &NullableGetVirtualImage200Response{value: val, isSet: true}
}

func (v NullableGetVirtualImage200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetVirtualImage200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


