/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddSecurityGroupsRequestSecurityGroupTenantPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddSecurityGroupsRequestSecurityGroupTenantPermissions{}

// AddSecurityGroupsRequestSecurityGroupTenantPermissions struct for AddSecurityGroupsRequestSecurityGroupTenantPermissions
type AddSecurityGroupsRequestSecurityGroupTenantPermissions struct {
	// Array of tenant account ids that are allowed access
	Accounts []int64 `json:"accounts,omitempty"`
	// Array of tenant account ids that can manage
	CanManageAccounts []int64 `json:"canManageAccounts,omitempty"`
}

// NewAddSecurityGroupsRequestSecurityGroupTenantPermissions instantiates a new AddSecurityGroupsRequestSecurityGroupTenantPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddSecurityGroupsRequestSecurityGroupTenantPermissions() *AddSecurityGroupsRequestSecurityGroupTenantPermissions {
	this := AddSecurityGroupsRequestSecurityGroupTenantPermissions{}
	return &this
}

// NewAddSecurityGroupsRequestSecurityGroupTenantPermissionsWithDefaults instantiates a new AddSecurityGroupsRequestSecurityGroupTenantPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddSecurityGroupsRequestSecurityGroupTenantPermissionsWithDefaults() *AddSecurityGroupsRequestSecurityGroupTenantPermissions {
	this := AddSecurityGroupsRequestSecurityGroupTenantPermissions{}
	return &this
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *AddSecurityGroupsRequestSecurityGroupTenantPermissions) GetAccounts() []int64 {
	if o == nil || IsNil(o.Accounts) {
		var ret []int64
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSecurityGroupsRequestSecurityGroupTenantPermissions) GetAccountsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// IsSetAccounts returns a boolean if a field has been set.
func (o *AddSecurityGroupsRequestSecurityGroupTenantPermissions) IsSetAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []int64 and assigns it to the Accounts field.
func (o *AddSecurityGroupsRequestSecurityGroupTenantPermissions) SetAccounts(v []int64) {
	o.Accounts = v
}

// GetCanManageAccounts returns the CanManageAccounts field value if set, zero value otherwise.
func (o *AddSecurityGroupsRequestSecurityGroupTenantPermissions) GetCanManageAccounts() []int64 {
	if o == nil || IsNil(o.CanManageAccounts) {
		var ret []int64
		return ret
	}
	return o.CanManageAccounts
}

// GetCanManageAccountsOk returns a tuple with the CanManageAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddSecurityGroupsRequestSecurityGroupTenantPermissions) GetCanManageAccountsOk() ([]int64, bool) {
	if o == nil || IsNil(o.CanManageAccounts) {
		return nil, false
	}
	return o.CanManageAccounts, true
}

// IsSetCanManageAccounts returns a boolean if a field has been set.
func (o *AddSecurityGroupsRequestSecurityGroupTenantPermissions) IsSetCanManageAccounts() bool {
	if o != nil && !IsNil(o.CanManageAccounts) {
		return true
	}

	return false
}

// SetCanManageAccounts gets a reference to the given []int64 and assigns it to the CanManageAccounts field.
func (o *AddSecurityGroupsRequestSecurityGroupTenantPermissions) SetCanManageAccounts(v []int64) {
	o.CanManageAccounts = v
}

func (o AddSecurityGroupsRequestSecurityGroupTenantPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddSecurityGroupsRequestSecurityGroupTenantPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.CanManageAccounts) {
		toSerialize["canManageAccounts"] = o.CanManageAccounts
	}
	return toSerialize, nil
}

type NullableAddSecurityGroupsRequestSecurityGroupTenantPermissions struct {
	value *AddSecurityGroupsRequestSecurityGroupTenantPermissions
	isSet bool
}

func (v NullableAddSecurityGroupsRequestSecurityGroupTenantPermissions) Get() *AddSecurityGroupsRequestSecurityGroupTenantPermissions {
	return v.value
}

func (v *NullableAddSecurityGroupsRequestSecurityGroupTenantPermissions) Set(val *AddSecurityGroupsRequestSecurityGroupTenantPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableAddSecurityGroupsRequestSecurityGroupTenantPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableAddSecurityGroupsRequestSecurityGroupTenantPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddSecurityGroupsRequestSecurityGroupTenantPermissions(val *AddSecurityGroupsRequestSecurityGroupTenantPermissions) *NullableAddSecurityGroupsRequestSecurityGroupTenantPermissions {
	return &NullableAddSecurityGroupsRequestSecurityGroupTenantPermissions{value: val, isSet: true}
}

func (v NullableAddSecurityGroupsRequestSecurityGroupTenantPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddSecurityGroupsRequestSecurityGroupTenantPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


