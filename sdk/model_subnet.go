/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the Subnet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subnet{}

// Subnet struct for Subnet
type Subnet struct {
	Id *int64 `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
	Labels []string `json:"labels,omitempty"`
	Active *bool `json:"active,omitempty"`
	Description *string `json:"description,omitempty"`
	ExternalId *string `json:"externalId,omitempty"`
	UniqueId *string `json:"uniqueId,omitempty"`
	AddressPrefix *string `json:"addressPrefix,omitempty"`
	Cidr *string `json:"cidr,omitempty"`
	Gateway *string `json:"gateway,omitempty"`
	Netmask *string `json:"netmask,omitempty"`
	SubnetAddress *string `json:"subnetAddress,omitempty"`
	TftpServer *string `json:"tftpServer,omitempty"`
	BootFile *string `json:"bootFile,omitempty"`
	Pool *string `json:"pool,omitempty"`
	DhcpServer *bool `json:"dhcpServer,omitempty"`
	HasFloatingIps *bool `json:"hasFloatingIps,omitempty"`
	DhcpIp *string `json:"dhcpIp,omitempty"`
	DnsPrimary *string `json:"dnsPrimary,omitempty"`
	DnsSecondary *string `json:"dnsSecondary,omitempty"`
	DhcpStart *string `json:"dhcpStart,omitempty"`
	DhcpEnd *string `json:"dhcpEnd,omitempty"`
	DhcpRange *string `json:"dhcpRange,omitempty"`
	NetworkProxy *string `json:"networkProxy,omitempty"`
	NetworkDomain *string `json:"networkDomain,omitempty"`
	SearchDomains *string `json:"searchDomains,omitempty"`
	DefaultNetwork *bool `json:"defaultNetwork,omitempty"`
	AssignPublicIp *bool `json:"assignPublicIp,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Status *GetAppState200ResponseAllOfInputProvidersInner `json:"status,omitempty"`
	Network *ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner `json:"network,omitempty"`
	Type *ListBackupSettings200ResponseBackupSettingsDefaultSchedule `json:"type,omitempty"`
	Account *ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner `json:"account,omitempty"`
	SecurityGroups []map[string]interface{} `json:"securityGroups,omitempty"`
	Tenants []ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner `json:"tenants,omitempty"`
	ResourcePermission *GetNetworkSubnets200ResponseAllOfSubnetsInnerResourcePermission `json:"resourcePermission,omitempty"`
}

// NewSubnet instantiates a new Subnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnet() *Subnet {
	this := Subnet{}
	return &this
}

// NewSubnetWithDefaults instantiates a new Subnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetWithDefaults() *Subnet {
	this := Subnet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Subnet) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *Subnet) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Subnet) SetId(v int64) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Subnet) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// IsSetCode returns a boolean if a field has been set.
func (o *Subnet) IsSetCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Subnet) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Subnet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *Subnet) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Subnet) SetName(v string) {
	o.Name = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Subnet) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// IsSetLabels returns a boolean if a field has been set.
func (o *Subnet) IsSetLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *Subnet) SetLabels(v []string) {
	o.Labels = v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Subnet) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// IsSetActive returns a boolean if a field has been set.
func (o *Subnet) IsSetActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Subnet) SetActive(v bool) {
	o.Active = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Subnet) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *Subnet) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Subnet) SetDescription(v string) {
	o.Description = &v
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *Subnet) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// IsSetExternalId returns a boolean if a field has been set.
func (o *Subnet) IsSetExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *Subnet) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetUniqueId returns the UniqueId field value if set, zero value otherwise.
func (o *Subnet) GetUniqueId() string {
	if o == nil || IsNil(o.UniqueId) {
		var ret string
		return ret
	}
	return *o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetUniqueIdOk() (*string, bool) {
	if o == nil || IsNil(o.UniqueId) {
		return nil, false
	}
	return o.UniqueId, true
}

// IsSetUniqueId returns a boolean if a field has been set.
func (o *Subnet) IsSetUniqueId() bool {
	if o != nil && !IsNil(o.UniqueId) {
		return true
	}

	return false
}

// SetUniqueId gets a reference to the given string and assigns it to the UniqueId field.
func (o *Subnet) SetUniqueId(v string) {
	o.UniqueId = &v
}

// GetAddressPrefix returns the AddressPrefix field value if set, zero value otherwise.
func (o *Subnet) GetAddressPrefix() string {
	if o == nil || IsNil(o.AddressPrefix) {
		var ret string
		return ret
	}
	return *o.AddressPrefix
}

// GetAddressPrefixOk returns a tuple with the AddressPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetAddressPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.AddressPrefix) {
		return nil, false
	}
	return o.AddressPrefix, true
}

// IsSetAddressPrefix returns a boolean if a field has been set.
func (o *Subnet) IsSetAddressPrefix() bool {
	if o != nil && !IsNil(o.AddressPrefix) {
		return true
	}

	return false
}

// SetAddressPrefix gets a reference to the given string and assigns it to the AddressPrefix field.
func (o *Subnet) SetAddressPrefix(v string) {
	o.AddressPrefix = &v
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *Subnet) GetCidr() string {
	if o == nil || IsNil(o.Cidr) {
		var ret string
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetCidrOk() (*string, bool) {
	if o == nil || IsNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// IsSetCidr returns a boolean if a field has been set.
func (o *Subnet) IsSetCidr() bool {
	if o != nil && !IsNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given string and assigns it to the Cidr field.
func (o *Subnet) SetCidr(v string) {
	o.Cidr = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *Subnet) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// IsSetGateway returns a boolean if a field has been set.
func (o *Subnet) IsSetGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *Subnet) SetGateway(v string) {
	o.Gateway = &v
}

// GetNetmask returns the Netmask field value if set, zero value otherwise.
func (o *Subnet) GetNetmask() string {
	if o == nil || IsNil(o.Netmask) {
		var ret string
		return ret
	}
	return *o.Netmask
}

// GetNetmaskOk returns a tuple with the Netmask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetNetmaskOk() (*string, bool) {
	if o == nil || IsNil(o.Netmask) {
		return nil, false
	}
	return o.Netmask, true
}

// IsSetNetmask returns a boolean if a field has been set.
func (o *Subnet) IsSetNetmask() bool {
	if o != nil && !IsNil(o.Netmask) {
		return true
	}

	return false
}

// SetNetmask gets a reference to the given string and assigns it to the Netmask field.
func (o *Subnet) SetNetmask(v string) {
	o.Netmask = &v
}

// GetSubnetAddress returns the SubnetAddress field value if set, zero value otherwise.
func (o *Subnet) GetSubnetAddress() string {
	if o == nil || IsNil(o.SubnetAddress) {
		var ret string
		return ret
	}
	return *o.SubnetAddress
}

// GetSubnetAddressOk returns a tuple with the SubnetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetSubnetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetAddress) {
		return nil, false
	}
	return o.SubnetAddress, true
}

// IsSetSubnetAddress returns a boolean if a field has been set.
func (o *Subnet) IsSetSubnetAddress() bool {
	if o != nil && !IsNil(o.SubnetAddress) {
		return true
	}

	return false
}

// SetSubnetAddress gets a reference to the given string and assigns it to the SubnetAddress field.
func (o *Subnet) SetSubnetAddress(v string) {
	o.SubnetAddress = &v
}

// GetTftpServer returns the TftpServer field value if set, zero value otherwise.
func (o *Subnet) GetTftpServer() string {
	if o == nil || IsNil(o.TftpServer) {
		var ret string
		return ret
	}
	return *o.TftpServer
}

// GetTftpServerOk returns a tuple with the TftpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetTftpServerOk() (*string, bool) {
	if o == nil || IsNil(o.TftpServer) {
		return nil, false
	}
	return o.TftpServer, true
}

// IsSetTftpServer returns a boolean if a field has been set.
func (o *Subnet) IsSetTftpServer() bool {
	if o != nil && !IsNil(o.TftpServer) {
		return true
	}

	return false
}

// SetTftpServer gets a reference to the given string and assigns it to the TftpServer field.
func (o *Subnet) SetTftpServer(v string) {
	o.TftpServer = &v
}

// GetBootFile returns the BootFile field value if set, zero value otherwise.
func (o *Subnet) GetBootFile() string {
	if o == nil || IsNil(o.BootFile) {
		var ret string
		return ret
	}
	return *o.BootFile
}

// GetBootFileOk returns a tuple with the BootFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetBootFileOk() (*string, bool) {
	if o == nil || IsNil(o.BootFile) {
		return nil, false
	}
	return o.BootFile, true
}

// IsSetBootFile returns a boolean if a field has been set.
func (o *Subnet) IsSetBootFile() bool {
	if o != nil && !IsNil(o.BootFile) {
		return true
	}

	return false
}

// SetBootFile gets a reference to the given string and assigns it to the BootFile field.
func (o *Subnet) SetBootFile(v string) {
	o.BootFile = &v
}

// GetPool returns the Pool field value if set, zero value otherwise.
func (o *Subnet) GetPool() string {
	if o == nil || IsNil(o.Pool) {
		var ret string
		return ret
	}
	return *o.Pool
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetPoolOk() (*string, bool) {
	if o == nil || IsNil(o.Pool) {
		return nil, false
	}
	return o.Pool, true
}

// IsSetPool returns a boolean if a field has been set.
func (o *Subnet) IsSetPool() bool {
	if o != nil && !IsNil(o.Pool) {
		return true
	}

	return false
}

// SetPool gets a reference to the given string and assigns it to the Pool field.
func (o *Subnet) SetPool(v string) {
	o.Pool = &v
}

// GetDhcpServer returns the DhcpServer field value if set, zero value otherwise.
func (o *Subnet) GetDhcpServer() bool {
	if o == nil || IsNil(o.DhcpServer) {
		var ret bool
		return ret
	}
	return *o.DhcpServer
}

// GetDhcpServerOk returns a tuple with the DhcpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDhcpServerOk() (*bool, bool) {
	if o == nil || IsNil(o.DhcpServer) {
		return nil, false
	}
	return o.DhcpServer, true
}

// IsSetDhcpServer returns a boolean if a field has been set.
func (o *Subnet) IsSetDhcpServer() bool {
	if o != nil && !IsNil(o.DhcpServer) {
		return true
	}

	return false
}

// SetDhcpServer gets a reference to the given bool and assigns it to the DhcpServer field.
func (o *Subnet) SetDhcpServer(v bool) {
	o.DhcpServer = &v
}

// GetHasFloatingIps returns the HasFloatingIps field value if set, zero value otherwise.
func (o *Subnet) GetHasFloatingIps() bool {
	if o == nil || IsNil(o.HasFloatingIps) {
		var ret bool
		return ret
	}
	return *o.HasFloatingIps
}

// GetHasFloatingIpsOk returns a tuple with the HasFloatingIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetHasFloatingIpsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasFloatingIps) {
		return nil, false
	}
	return o.HasFloatingIps, true
}

// IsSetHasFloatingIps returns a boolean if a field has been set.
func (o *Subnet) IsSetHasFloatingIps() bool {
	if o != nil && !IsNil(o.HasFloatingIps) {
		return true
	}

	return false
}

// SetHasFloatingIps gets a reference to the given bool and assigns it to the HasFloatingIps field.
func (o *Subnet) SetHasFloatingIps(v bool) {
	o.HasFloatingIps = &v
}

// GetDhcpIp returns the DhcpIp field value if set, zero value otherwise.
func (o *Subnet) GetDhcpIp() string {
	if o == nil || IsNil(o.DhcpIp) {
		var ret string
		return ret
	}
	return *o.DhcpIp
}

// GetDhcpIpOk returns a tuple with the DhcpIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDhcpIpOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpIp) {
		return nil, false
	}
	return o.DhcpIp, true
}

// IsSetDhcpIp returns a boolean if a field has been set.
func (o *Subnet) IsSetDhcpIp() bool {
	if o != nil && !IsNil(o.DhcpIp) {
		return true
	}

	return false
}

// SetDhcpIp gets a reference to the given string and assigns it to the DhcpIp field.
func (o *Subnet) SetDhcpIp(v string) {
	o.DhcpIp = &v
}

// GetDnsPrimary returns the DnsPrimary field value if set, zero value otherwise.
func (o *Subnet) GetDnsPrimary() string {
	if o == nil || IsNil(o.DnsPrimary) {
		var ret string
		return ret
	}
	return *o.DnsPrimary
}

// GetDnsPrimaryOk returns a tuple with the DnsPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDnsPrimaryOk() (*string, bool) {
	if o == nil || IsNil(o.DnsPrimary) {
		return nil, false
	}
	return o.DnsPrimary, true
}

// IsSetDnsPrimary returns a boolean if a field has been set.
func (o *Subnet) IsSetDnsPrimary() bool {
	if o != nil && !IsNil(o.DnsPrimary) {
		return true
	}

	return false
}

// SetDnsPrimary gets a reference to the given string and assigns it to the DnsPrimary field.
func (o *Subnet) SetDnsPrimary(v string) {
	o.DnsPrimary = &v
}

// GetDnsSecondary returns the DnsSecondary field value if set, zero value otherwise.
func (o *Subnet) GetDnsSecondary() string {
	if o == nil || IsNil(o.DnsSecondary) {
		var ret string
		return ret
	}
	return *o.DnsSecondary
}

// GetDnsSecondaryOk returns a tuple with the DnsSecondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDnsSecondaryOk() (*string, bool) {
	if o == nil || IsNil(o.DnsSecondary) {
		return nil, false
	}
	return o.DnsSecondary, true
}

// IsSetDnsSecondary returns a boolean if a field has been set.
func (o *Subnet) IsSetDnsSecondary() bool {
	if o != nil && !IsNil(o.DnsSecondary) {
		return true
	}

	return false
}

// SetDnsSecondary gets a reference to the given string and assigns it to the DnsSecondary field.
func (o *Subnet) SetDnsSecondary(v string) {
	o.DnsSecondary = &v
}

// GetDhcpStart returns the DhcpStart field value if set, zero value otherwise.
func (o *Subnet) GetDhcpStart() string {
	if o == nil || IsNil(o.DhcpStart) {
		var ret string
		return ret
	}
	return *o.DhcpStart
}

// GetDhcpStartOk returns a tuple with the DhcpStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDhcpStartOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpStart) {
		return nil, false
	}
	return o.DhcpStart, true
}

// IsSetDhcpStart returns a boolean if a field has been set.
func (o *Subnet) IsSetDhcpStart() bool {
	if o != nil && !IsNil(o.DhcpStart) {
		return true
	}

	return false
}

// SetDhcpStart gets a reference to the given string and assigns it to the DhcpStart field.
func (o *Subnet) SetDhcpStart(v string) {
	o.DhcpStart = &v
}

// GetDhcpEnd returns the DhcpEnd field value if set, zero value otherwise.
func (o *Subnet) GetDhcpEnd() string {
	if o == nil || IsNil(o.DhcpEnd) {
		var ret string
		return ret
	}
	return *o.DhcpEnd
}

// GetDhcpEndOk returns a tuple with the DhcpEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDhcpEndOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpEnd) {
		return nil, false
	}
	return o.DhcpEnd, true
}

// IsSetDhcpEnd returns a boolean if a field has been set.
func (o *Subnet) IsSetDhcpEnd() bool {
	if o != nil && !IsNil(o.DhcpEnd) {
		return true
	}

	return false
}

// SetDhcpEnd gets a reference to the given string and assigns it to the DhcpEnd field.
func (o *Subnet) SetDhcpEnd(v string) {
	o.DhcpEnd = &v
}

// GetDhcpRange returns the DhcpRange field value if set, zero value otherwise.
func (o *Subnet) GetDhcpRange() string {
	if o == nil || IsNil(o.DhcpRange) {
		var ret string
		return ret
	}
	return *o.DhcpRange
}

// GetDhcpRangeOk returns a tuple with the DhcpRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDhcpRangeOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpRange) {
		return nil, false
	}
	return o.DhcpRange, true
}

// IsSetDhcpRange returns a boolean if a field has been set.
func (o *Subnet) IsSetDhcpRange() bool {
	if o != nil && !IsNil(o.DhcpRange) {
		return true
	}

	return false
}

// SetDhcpRange gets a reference to the given string and assigns it to the DhcpRange field.
func (o *Subnet) SetDhcpRange(v string) {
	o.DhcpRange = &v
}

// GetNetworkProxy returns the NetworkProxy field value if set, zero value otherwise.
func (o *Subnet) GetNetworkProxy() string {
	if o == nil || IsNil(o.NetworkProxy) {
		var ret string
		return ret
	}
	return *o.NetworkProxy
}

// GetNetworkProxyOk returns a tuple with the NetworkProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetNetworkProxyOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkProxy) {
		return nil, false
	}
	return o.NetworkProxy, true
}

// IsSetNetworkProxy returns a boolean if a field has been set.
func (o *Subnet) IsSetNetworkProxy() bool {
	if o != nil && !IsNil(o.NetworkProxy) {
		return true
	}

	return false
}

// SetNetworkProxy gets a reference to the given string and assigns it to the NetworkProxy field.
func (o *Subnet) SetNetworkProxy(v string) {
	o.NetworkProxy = &v
}

// GetNetworkDomain returns the NetworkDomain field value if set, zero value otherwise.
func (o *Subnet) GetNetworkDomain() string {
	if o == nil || IsNil(o.NetworkDomain) {
		var ret string
		return ret
	}
	return *o.NetworkDomain
}

// GetNetworkDomainOk returns a tuple with the NetworkDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetNetworkDomainOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkDomain) {
		return nil, false
	}
	return o.NetworkDomain, true
}

// IsSetNetworkDomain returns a boolean if a field has been set.
func (o *Subnet) IsSetNetworkDomain() bool {
	if o != nil && !IsNil(o.NetworkDomain) {
		return true
	}

	return false
}

// SetNetworkDomain gets a reference to the given string and assigns it to the NetworkDomain field.
func (o *Subnet) SetNetworkDomain(v string) {
	o.NetworkDomain = &v
}

// GetSearchDomains returns the SearchDomains field value if set, zero value otherwise.
func (o *Subnet) GetSearchDomains() string {
	if o == nil || IsNil(o.SearchDomains) {
		var ret string
		return ret
	}
	return *o.SearchDomains
}

// GetSearchDomainsOk returns a tuple with the SearchDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetSearchDomainsOk() (*string, bool) {
	if o == nil || IsNil(o.SearchDomains) {
		return nil, false
	}
	return o.SearchDomains, true
}

// IsSetSearchDomains returns a boolean if a field has been set.
func (o *Subnet) IsSetSearchDomains() bool {
	if o != nil && !IsNil(o.SearchDomains) {
		return true
	}

	return false
}

// SetSearchDomains gets a reference to the given string and assigns it to the SearchDomains field.
func (o *Subnet) SetSearchDomains(v string) {
	o.SearchDomains = &v
}

// GetDefaultNetwork returns the DefaultNetwork field value if set, zero value otherwise.
func (o *Subnet) GetDefaultNetwork() bool {
	if o == nil || IsNil(o.DefaultNetwork) {
		var ret bool
		return ret
	}
	return *o.DefaultNetwork
}

// GetDefaultNetworkOk returns a tuple with the DefaultNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetDefaultNetworkOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultNetwork) {
		return nil, false
	}
	return o.DefaultNetwork, true
}

// IsSetDefaultNetwork returns a boolean if a field has been set.
func (o *Subnet) IsSetDefaultNetwork() bool {
	if o != nil && !IsNil(o.DefaultNetwork) {
		return true
	}

	return false
}

// SetDefaultNetwork gets a reference to the given bool and assigns it to the DefaultNetwork field.
func (o *Subnet) SetDefaultNetwork(v bool) {
	o.DefaultNetwork = &v
}

// GetAssignPublicIp returns the AssignPublicIp field value if set, zero value otherwise.
func (o *Subnet) GetAssignPublicIp() bool {
	if o == nil || IsNil(o.AssignPublicIp) {
		var ret bool
		return ret
	}
	return *o.AssignPublicIp
}

// GetAssignPublicIpOk returns a tuple with the AssignPublicIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetAssignPublicIpOk() (*bool, bool) {
	if o == nil || IsNil(o.AssignPublicIp) {
		return nil, false
	}
	return o.AssignPublicIp, true
}

// IsSetAssignPublicIp returns a boolean if a field has been set.
func (o *Subnet) IsSetAssignPublicIp() bool {
	if o != nil && !IsNil(o.AssignPublicIp) {
		return true
	}

	return false
}

// SetAssignPublicIp gets a reference to the given bool and assigns it to the AssignPublicIp field.
func (o *Subnet) SetAssignPublicIp(v bool) {
	o.AssignPublicIp = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *Subnet) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// IsSetVisibility returns a boolean if a field has been set.
func (o *Subnet) IsSetVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *Subnet) SetVisibility(v string) {
	o.Visibility = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Subnet) GetStatus() GetAppState200ResponseAllOfInputProvidersInner {
	if o == nil || IsNil(o.Status) {
		var ret GetAppState200ResponseAllOfInputProvidersInner
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetStatusOk() (*GetAppState200ResponseAllOfInputProvidersInner, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// IsSetStatus returns a boolean if a field has been set.
func (o *Subnet) IsSetStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given GetAppState200ResponseAllOfInputProvidersInner and assigns it to the Status field.
func (o *Subnet) SetStatus(v GetAppState200ResponseAllOfInputProvidersInner) {
	o.Status = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Subnet) GetNetwork() ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner {
	if o == nil || IsNil(o.Network) {
		var ret ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetNetworkOk() (*ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// IsSetNetwork returns a boolean if a field has been set.
func (o *Subnet) IsSetNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner and assigns it to the Network field.
func (o *Subnet) SetNetwork(v ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner) {
	o.Network = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Subnet) GetType() ListBackupSettings200ResponseBackupSettingsDefaultSchedule {
	if o == nil || IsNil(o.Type) {
		var ret ListBackupSettings200ResponseBackupSettingsDefaultSchedule
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetTypeOk() (*ListBackupSettings200ResponseBackupSettingsDefaultSchedule, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// IsSetType returns a boolean if a field has been set.
func (o *Subnet) IsSetType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ListBackupSettings200ResponseBackupSettingsDefaultSchedule and assigns it to the Type field.
func (o *Subnet) SetType(v ListBackupSettings200ResponseBackupSettingsDefaultSchedule) {
	o.Type = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Subnet) GetAccount() ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner {
	if o == nil || IsNil(o.Account) {
		var ret ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetAccountOk() (*ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// IsSetAccount returns a boolean if a field has been set.
func (o *Subnet) IsSetAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner and assigns it to the Account field.
func (o *Subnet) SetAccount(v ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner) {
	o.Account = &v
}

// GetSecurityGroups returns the SecurityGroups field value if set, zero value otherwise.
func (o *Subnet) GetSecurityGroups() []map[string]interface{} {
	if o == nil || IsNil(o.SecurityGroups) {
		var ret []map[string]interface{}
		return ret
	}
	return o.SecurityGroups
}

// GetSecurityGroupsOk returns a tuple with the SecurityGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetSecurityGroupsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.SecurityGroups) {
		return nil, false
	}
	return o.SecurityGroups, true
}

// IsSetSecurityGroups returns a boolean if a field has been set.
func (o *Subnet) IsSetSecurityGroups() bool {
	if o != nil && !IsNil(o.SecurityGroups) {
		return true
	}

	return false
}

// SetSecurityGroups gets a reference to the given []map[string]interface{} and assigns it to the SecurityGroups field.
func (o *Subnet) SetSecurityGroups(v []map[string]interface{}) {
	o.SecurityGroups = v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *Subnet) GetTenants() []ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner {
	if o == nil || IsNil(o.Tenants) {
		var ret []ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetTenantsOk() ([]ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// IsSetTenants returns a boolean if a field has been set.
func (o *Subnet) IsSetTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner and assigns it to the Tenants field.
func (o *Subnet) SetTenants(v []ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner) {
	o.Tenants = v
}

// GetResourcePermission returns the ResourcePermission field value if set, zero value otherwise.
func (o *Subnet) GetResourcePermission() GetNetworkSubnets200ResponseAllOfSubnetsInnerResourcePermission {
	if o == nil || IsNil(o.ResourcePermission) {
		var ret GetNetworkSubnets200ResponseAllOfSubnetsInnerResourcePermission
		return ret
	}
	return *o.ResourcePermission
}

// GetResourcePermissionOk returns a tuple with the ResourcePermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Subnet) GetResourcePermissionOk() (*GetNetworkSubnets200ResponseAllOfSubnetsInnerResourcePermission, bool) {
	if o == nil || IsNil(o.ResourcePermission) {
		return nil, false
	}
	return o.ResourcePermission, true
}

// IsSetResourcePermission returns a boolean if a field has been set.
func (o *Subnet) IsSetResourcePermission() bool {
	if o != nil && !IsNil(o.ResourcePermission) {
		return true
	}

	return false
}

// SetResourcePermission gets a reference to the given GetNetworkSubnets200ResponseAllOfSubnetsInnerResourcePermission and assigns it to the ResourcePermission field.
func (o *Subnet) SetResourcePermission(v GetNetworkSubnets200ResponseAllOfSubnetsInnerResourcePermission) {
	o.ResourcePermission = &v
}

func (o Subnet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subnet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.UniqueId) {
		toSerialize["uniqueId"] = o.UniqueId
	}
	if !IsNil(o.AddressPrefix) {
		toSerialize["addressPrefix"] = o.AddressPrefix
	}
	if !IsNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.Netmask) {
		toSerialize["netmask"] = o.Netmask
	}
	if !IsNil(o.SubnetAddress) {
		toSerialize["subnetAddress"] = o.SubnetAddress
	}
	if !IsNil(o.TftpServer) {
		toSerialize["tftpServer"] = o.TftpServer
	}
	if !IsNil(o.BootFile) {
		toSerialize["bootFile"] = o.BootFile
	}
	if !IsNil(o.Pool) {
		toSerialize["pool"] = o.Pool
	}
	if !IsNil(o.DhcpServer) {
		toSerialize["dhcpServer"] = o.DhcpServer
	}
	if !IsNil(o.HasFloatingIps) {
		toSerialize["hasFloatingIps"] = o.HasFloatingIps
	}
	if !IsNil(o.DhcpIp) {
		toSerialize["dhcpIp"] = o.DhcpIp
	}
	if !IsNil(o.DnsPrimary) {
		toSerialize["dnsPrimary"] = o.DnsPrimary
	}
	if !IsNil(o.DnsSecondary) {
		toSerialize["dnsSecondary"] = o.DnsSecondary
	}
	if !IsNil(o.DhcpStart) {
		toSerialize["dhcpStart"] = o.DhcpStart
	}
	if !IsNil(o.DhcpEnd) {
		toSerialize["dhcpEnd"] = o.DhcpEnd
	}
	if !IsNil(o.DhcpRange) {
		toSerialize["dhcpRange"] = o.DhcpRange
	}
	if !IsNil(o.NetworkProxy) {
		toSerialize["networkProxy"] = o.NetworkProxy
	}
	if !IsNil(o.NetworkDomain) {
		toSerialize["networkDomain"] = o.NetworkDomain
	}
	if !IsNil(o.SearchDomains) {
		toSerialize["searchDomains"] = o.SearchDomains
	}
	if !IsNil(o.DefaultNetwork) {
		toSerialize["defaultNetwork"] = o.DefaultNetwork
	}
	if !IsNil(o.AssignPublicIp) {
		toSerialize["assignPublicIp"] = o.AssignPublicIp
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.SecurityGroups) {
		toSerialize["securityGroups"] = o.SecurityGroups
	}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	if !IsNil(o.ResourcePermission) {
		toSerialize["resourcePermission"] = o.ResourcePermission
	}
	return toSerialize, nil
}

type NullableSubnet struct {
	value *Subnet
	isSet bool
}

func (v NullableSubnet) Get() *Subnet {
	return v.value
}

func (v *NullableSubnet) Set(val *Subnet) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnet(val *Subnet) *NullableSubnet {
	return &NullableSubnet{value: val, isSet: true}
}

func (v NullableSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


