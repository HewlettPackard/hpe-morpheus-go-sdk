/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UpdateVDIGatewaysRequestVdiGateway - struct for UpdateVDIGatewaysRequestVdiGateway
type UpdateVDIGatewaysRequestVdiGateway struct {
	UpdateVDIGatewaysRequestVdiGatewayOneOf *UpdateVDIGatewaysRequestVdiGatewayOneOf
}

// UpdateVDIGatewaysRequestVdiGatewayOneOfAsUpdateVDIGatewaysRequestVdiGateway is a convenience function that returns UpdateVDIGatewaysRequestVdiGatewayOneOf wrapped in UpdateVDIGatewaysRequestVdiGateway
func UpdateVDIGatewaysRequestVdiGatewayOneOfAsUpdateVDIGatewaysRequestVdiGateway(v *UpdateVDIGatewaysRequestVdiGatewayOneOf) UpdateVDIGatewaysRequestVdiGateway {
	return UpdateVDIGatewaysRequestVdiGateway{
		UpdateVDIGatewaysRequestVdiGatewayOneOf: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateVDIGatewaysRequestVdiGateway) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateVDIGatewaysRequestVdiGatewayOneOf
	err = newStrictDecoder(data).Decode(&dst.UpdateVDIGatewaysRequestVdiGatewayOneOf)
	if err == nil {
		jsonUpdateVDIGatewaysRequestVdiGatewayOneOf, _ := json.Marshal(dst.UpdateVDIGatewaysRequestVdiGatewayOneOf)
		if string(jsonUpdateVDIGatewaysRequestVdiGatewayOneOf) == "{}" { // empty struct
			dst.UpdateVDIGatewaysRequestVdiGatewayOneOf = nil
		} else {
			if err = validator.Validate(dst.UpdateVDIGatewaysRequestVdiGatewayOneOf); err != nil {
				dst.UpdateVDIGatewaysRequestVdiGatewayOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.UpdateVDIGatewaysRequestVdiGatewayOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateVDIGatewaysRequestVdiGatewayOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateVDIGatewaysRequestVdiGateway)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateVDIGatewaysRequestVdiGateway)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateVDIGatewaysRequestVdiGateway) MarshalJSON() ([]byte, error) {
	if src.UpdateVDIGatewaysRequestVdiGatewayOneOf != nil {
		return json.Marshal(&src.UpdateVDIGatewaysRequestVdiGatewayOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateVDIGatewaysRequestVdiGateway) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.UpdateVDIGatewaysRequestVdiGatewayOneOf != nil {
		return obj.UpdateVDIGatewaysRequestVdiGatewayOneOf
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateVDIGatewaysRequestVdiGateway) GetActualInstanceValue() (interface{}) {
	if obj.UpdateVDIGatewaysRequestVdiGatewayOneOf != nil {
		return *obj.UpdateVDIGatewaysRequestVdiGatewayOneOf
	}

	// all schemas are nil
	return nil
}

type NullableUpdateVDIGatewaysRequestVdiGateway struct {
	value *UpdateVDIGatewaysRequestVdiGateway
	isSet bool
}

func (v NullableUpdateVDIGatewaysRequestVdiGateway) Get() *UpdateVDIGatewaysRequestVdiGateway {
	return v.value
}

func (v *NullableUpdateVDIGatewaysRequestVdiGateway) Set(val *UpdateVDIGatewaysRequestVdiGateway) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVDIGatewaysRequestVdiGateway) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVDIGatewaysRequestVdiGateway) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVDIGatewaysRequestVdiGateway(val *UpdateVDIGatewaysRequestVdiGateway) *NullableUpdateVDIGatewaysRequestVdiGateway {
	return &NullableUpdateVDIGatewaysRequestVdiGateway{value: val, isSet: true}
}

func (v NullableUpdateVDIGatewaysRequestVdiGateway) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVDIGatewaysRequestVdiGateway) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


