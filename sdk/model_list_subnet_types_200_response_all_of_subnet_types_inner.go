/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ListSubnetTypes200ResponseAllOfSubnetTypesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListSubnetTypes200ResponseAllOfSubnetTypesInner{}

// ListSubnetTypes200ResponseAllOfSubnetTypesInner struct for ListSubnetTypes200ResponseAllOfSubnetTypesInner
type ListSubnetTypes200ResponseAllOfSubnetTypesInner struct {
	Id *int64 `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Creatable *bool `json:"creatable,omitempty"`
	Deletable *bool `json:"deletable,omitempty"`
	DhcpServerEditable *bool `json:"dhcpServerEditable,omitempty"`
	CanAssignPool *bool `json:"canAssignPool,omitempty"`
	OptionTypes []ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner `json:"optionTypes,omitempty"`
}

// NewListSubnetTypes200ResponseAllOfSubnetTypesInner instantiates a new ListSubnetTypes200ResponseAllOfSubnetTypesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSubnetTypes200ResponseAllOfSubnetTypesInner() *ListSubnetTypes200ResponseAllOfSubnetTypesInner {
	this := ListSubnetTypes200ResponseAllOfSubnetTypesInner{}
	return &this
}

// NewListSubnetTypes200ResponseAllOfSubnetTypesInnerWithDefaults instantiates a new ListSubnetTypes200ResponseAllOfSubnetTypesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSubnetTypes200ResponseAllOfSubnetTypesInnerWithDefaults() *ListSubnetTypes200ResponseAllOfSubnetTypesInner {
	this := ListSubnetTypes200ResponseAllOfSubnetTypesInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) SetId(v int64) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// IsSetCode returns a boolean if a field has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) IsSetCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) SetDescription(v string) {
	o.Description = &v
}

// GetCreatable returns the Creatable field value if set, zero value otherwise.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetCreatable() bool {
	if o == nil || IsNil(o.Creatable) {
		var ret bool
		return ret
	}
	return *o.Creatable
}

// GetCreatableOk returns a tuple with the Creatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetCreatableOk() (*bool, bool) {
	if o == nil || IsNil(o.Creatable) {
		return nil, false
	}
	return o.Creatable, true
}

// IsSetCreatable returns a boolean if a field has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) IsSetCreatable() bool {
	if o != nil && !IsNil(o.Creatable) {
		return true
	}

	return false
}

// SetCreatable gets a reference to the given bool and assigns it to the Creatable field.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) SetCreatable(v bool) {
	o.Creatable = &v
}

// GetDeletable returns the Deletable field value if set, zero value otherwise.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetDeletable() bool {
	if o == nil || IsNil(o.Deletable) {
		var ret bool
		return ret
	}
	return *o.Deletable
}

// GetDeletableOk returns a tuple with the Deletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetDeletableOk() (*bool, bool) {
	if o == nil || IsNil(o.Deletable) {
		return nil, false
	}
	return o.Deletable, true
}

// IsSetDeletable returns a boolean if a field has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) IsSetDeletable() bool {
	if o != nil && !IsNil(o.Deletable) {
		return true
	}

	return false
}

// SetDeletable gets a reference to the given bool and assigns it to the Deletable field.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) SetDeletable(v bool) {
	o.Deletable = &v
}

// GetDhcpServerEditable returns the DhcpServerEditable field value if set, zero value otherwise.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetDhcpServerEditable() bool {
	if o == nil || IsNil(o.DhcpServerEditable) {
		var ret bool
		return ret
	}
	return *o.DhcpServerEditable
}

// GetDhcpServerEditableOk returns a tuple with the DhcpServerEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetDhcpServerEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.DhcpServerEditable) {
		return nil, false
	}
	return o.DhcpServerEditable, true
}

// IsSetDhcpServerEditable returns a boolean if a field has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) IsSetDhcpServerEditable() bool {
	if o != nil && !IsNil(o.DhcpServerEditable) {
		return true
	}

	return false
}

// SetDhcpServerEditable gets a reference to the given bool and assigns it to the DhcpServerEditable field.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) SetDhcpServerEditable(v bool) {
	o.DhcpServerEditable = &v
}

// GetCanAssignPool returns the CanAssignPool field value if set, zero value otherwise.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetCanAssignPool() bool {
	if o == nil || IsNil(o.CanAssignPool) {
		var ret bool
		return ret
	}
	return *o.CanAssignPool
}

// GetCanAssignPoolOk returns a tuple with the CanAssignPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetCanAssignPoolOk() (*bool, bool) {
	if o == nil || IsNil(o.CanAssignPool) {
		return nil, false
	}
	return o.CanAssignPool, true
}

// IsSetCanAssignPool returns a boolean if a field has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) IsSetCanAssignPool() bool {
	if o != nil && !IsNil(o.CanAssignPool) {
		return true
	}

	return false
}

// SetCanAssignPool gets a reference to the given bool and assigns it to the CanAssignPool field.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) SetCanAssignPool(v bool) {
	o.CanAssignPool = &v
}

// GetOptionTypes returns the OptionTypes field value if set, zero value otherwise.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetOptionTypes() []ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner {
	if o == nil || IsNil(o.OptionTypes) {
		var ret []ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner
		return ret
	}
	return o.OptionTypes
}

// GetOptionTypesOk returns a tuple with the OptionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) GetOptionTypesOk() ([]ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner, bool) {
	if o == nil || IsNil(o.OptionTypes) {
		return nil, false
	}
	return o.OptionTypes, true
}

// IsSetOptionTypes returns a boolean if a field has been set.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) IsSetOptionTypes() bool {
	if o != nil && !IsNil(o.OptionTypes) {
		return true
	}

	return false
}

// SetOptionTypes gets a reference to the given []ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner and assigns it to the OptionTypes field.
func (o *ListSubnetTypes200ResponseAllOfSubnetTypesInner) SetOptionTypes(v []ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner) {
	o.OptionTypes = v
}

func (o ListSubnetTypes200ResponseAllOfSubnetTypesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListSubnetTypes200ResponseAllOfSubnetTypesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Creatable) {
		toSerialize["creatable"] = o.Creatable
	}
	if !IsNil(o.Deletable) {
		toSerialize["deletable"] = o.Deletable
	}
	if !IsNil(o.DhcpServerEditable) {
		toSerialize["dhcpServerEditable"] = o.DhcpServerEditable
	}
	if !IsNil(o.CanAssignPool) {
		toSerialize["canAssignPool"] = o.CanAssignPool
	}
	if !IsNil(o.OptionTypes) {
		toSerialize["optionTypes"] = o.OptionTypes
	}
	return toSerialize, nil
}

type NullableListSubnetTypes200ResponseAllOfSubnetTypesInner struct {
	value *ListSubnetTypes200ResponseAllOfSubnetTypesInner
	isSet bool
}

func (v NullableListSubnetTypes200ResponseAllOfSubnetTypesInner) Get() *ListSubnetTypes200ResponseAllOfSubnetTypesInner {
	return v.value
}

func (v *NullableListSubnetTypes200ResponseAllOfSubnetTypesInner) Set(val *ListSubnetTypes200ResponseAllOfSubnetTypesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListSubnetTypes200ResponseAllOfSubnetTypesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListSubnetTypes200ResponseAllOfSubnetTypesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSubnetTypes200ResponseAllOfSubnetTypesInner(val *ListSubnetTypes200ResponseAllOfSubnetTypesInner) *NullableListSubnetTypes200ResponseAllOfSubnetTypesInner {
	return &NullableListSubnetTypes200ResponseAllOfSubnetTypesInner{value: val, isSet: true}
}

func (v NullableListSubnetTypes200ResponseAllOfSubnetTypesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSubnetTypes200ResponseAllOfSubnetTypesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


