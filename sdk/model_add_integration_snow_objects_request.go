/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddIntegrationSnowObjectsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddIntegrationSnowObjectsRequest{}

// AddIntegrationSnowObjectsRequest struct for AddIntegrationSnowObjectsRequest
type AddIntegrationSnowObjectsRequest struct {
	Object *AddIntegrationSnowObjectsRequestObject `json:"object,omitempty"`
}

// NewAddIntegrationSnowObjectsRequest instantiates a new AddIntegrationSnowObjectsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddIntegrationSnowObjectsRequest() *AddIntegrationSnowObjectsRequest {
	this := AddIntegrationSnowObjectsRequest{}
	return &this
}

// NewAddIntegrationSnowObjectsRequestWithDefaults instantiates a new AddIntegrationSnowObjectsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddIntegrationSnowObjectsRequestWithDefaults() *AddIntegrationSnowObjectsRequest {
	this := AddIntegrationSnowObjectsRequest{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *AddIntegrationSnowObjectsRequest) GetObject() AddIntegrationSnowObjectsRequestObject {
	if o == nil || IsNil(o.Object) {
		var ret AddIntegrationSnowObjectsRequestObject
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIntegrationSnowObjectsRequest) GetObjectOk() (*AddIntegrationSnowObjectsRequestObject, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// IsSetObject returns a boolean if a field has been set.
func (o *AddIntegrationSnowObjectsRequest) IsSetObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given AddIntegrationSnowObjectsRequestObject and assigns it to the Object field.
func (o *AddIntegrationSnowObjectsRequest) SetObject(v AddIntegrationSnowObjectsRequestObject) {
	o.Object = &v
}

func (o AddIntegrationSnowObjectsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddIntegrationSnowObjectsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	return toSerialize, nil
}

type NullableAddIntegrationSnowObjectsRequest struct {
	value *AddIntegrationSnowObjectsRequest
	isSet bool
}

func (v NullableAddIntegrationSnowObjectsRequest) Get() *AddIntegrationSnowObjectsRequest {
	return v.value
}

func (v *NullableAddIntegrationSnowObjectsRequest) Set(val *AddIntegrationSnowObjectsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddIntegrationSnowObjectsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddIntegrationSnowObjectsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddIntegrationSnowObjectsRequest(val *AddIntegrationSnowObjectsRequest) *NullableAddIntegrationSnowObjectsRequest {
	return &NullableAddIntegrationSnowObjectsRequest{value: val, isSet: true}
}

func (v NullableAddIntegrationSnowObjectsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddIntegrationSnowObjectsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


