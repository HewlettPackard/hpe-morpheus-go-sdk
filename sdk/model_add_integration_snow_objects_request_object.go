/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddIntegrationSnowObjectsRequestObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddIntegrationSnowObjectsRequestObject{}

// AddIntegrationSnowObjectsRequestObject struct for AddIntegrationSnowObjectsRequestObject
type AddIntegrationSnowObjectsRequestObject struct {
	// Name to display
	Name *string `json:"name,omitempty"`
	// Integration Object Type Code
	Type string `json:"type"`
	// Catalog Item Type ID
	CatalogItemType int64 `json:"catalogItemType"`
}

type _AddIntegrationSnowObjectsRequestObject AddIntegrationSnowObjectsRequestObject

// NewAddIntegrationSnowObjectsRequestObject instantiates a new AddIntegrationSnowObjectsRequestObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddIntegrationSnowObjectsRequestObject(type_ string, catalogItemType int64) *AddIntegrationSnowObjectsRequestObject {
	this := AddIntegrationSnowObjectsRequestObject{}
	this.Type = type_
	this.CatalogItemType = catalogItemType
	return &this
}

// NewAddIntegrationSnowObjectsRequestObjectWithDefaults instantiates a new AddIntegrationSnowObjectsRequestObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddIntegrationSnowObjectsRequestObjectWithDefaults() *AddIntegrationSnowObjectsRequestObject {
	this := AddIntegrationSnowObjectsRequestObject{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AddIntegrationSnowObjectsRequestObject) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIntegrationSnowObjectsRequestObject) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *AddIntegrationSnowObjectsRequestObject) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AddIntegrationSnowObjectsRequestObject) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value
func (o *AddIntegrationSnowObjectsRequestObject) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AddIntegrationSnowObjectsRequestObject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AddIntegrationSnowObjectsRequestObject) SetType(v string) {
	o.Type = v
}

// GetCatalogItemType returns the CatalogItemType field value
func (o *AddIntegrationSnowObjectsRequestObject) GetCatalogItemType() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CatalogItemType
}

// GetCatalogItemTypeOk returns a tuple with the CatalogItemType field value
// and a boolean to check if the value has been set.
func (o *AddIntegrationSnowObjectsRequestObject) GetCatalogItemTypeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CatalogItemType, true
}

// SetCatalogItemType sets field value
func (o *AddIntegrationSnowObjectsRequestObject) SetCatalogItemType(v int64) {
	o.CatalogItemType = v
}

func (o AddIntegrationSnowObjectsRequestObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddIntegrationSnowObjectsRequestObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["type"] = o.Type
	toSerialize["catalogItemType"] = o.CatalogItemType
	return toSerialize, nil
}

func (o *AddIntegrationSnowObjectsRequestObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"catalogItemType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddIntegrationSnowObjectsRequestObject := _AddIntegrationSnowObjectsRequestObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddIntegrationSnowObjectsRequestObject)

	if err != nil {
		return err
	}

	*o = AddIntegrationSnowObjectsRequestObject(varAddIntegrationSnowObjectsRequestObject)

	return err
}

type NullableAddIntegrationSnowObjectsRequestObject struct {
	value *AddIntegrationSnowObjectsRequestObject
	isSet bool
}

func (v NullableAddIntegrationSnowObjectsRequestObject) Get() *AddIntegrationSnowObjectsRequestObject {
	return v.value
}

func (v *NullableAddIntegrationSnowObjectsRequestObject) Set(val *AddIntegrationSnowObjectsRequestObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAddIntegrationSnowObjectsRequestObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAddIntegrationSnowObjectsRequestObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddIntegrationSnowObjectsRequestObject(val *AddIntegrationSnowObjectsRequestObject) *NullableAddIntegrationSnowObjectsRequestObject {
	return &NullableAddIntegrationSnowObjectsRequestObject{value: val, isSet: true}
}

func (v NullableAddIntegrationSnowObjectsRequestObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddIntegrationSnowObjectsRequestObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


