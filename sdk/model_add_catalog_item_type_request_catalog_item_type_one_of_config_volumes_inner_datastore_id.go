/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)


// AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId The ID of the specific datastore. Auto selection can be specified as auto or autoCluster (for clusters).
type AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId struct {
	Int64 *int64
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Int64
	err = json.Unmarshal(data, &dst.Int64);
	if err == nil {
		jsonInt64, _ := json.Marshal(dst.Int64)
		if string(jsonInt64) == "{}" { // empty struct
			dst.Int64 = nil
		} else {
			return nil // data stored in dst.Int64, return on the first match
		}
	} else {
		dst.Int64 = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId) MarshalJSON() ([]byte, error) {
	if src.Int64 != nil {
		return json.Marshal(&src.Int64)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableAddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId struct {
	value *AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId
	isSet bool
}

func (v NullableAddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId) Get() *AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId {
	return v.value
}

func (v *NullableAddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId) Set(val *AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId(val *AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId) *NullableAddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId {
	return &NullableAddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId{value: val, isSet: true}
}

func (v NullableAddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCatalogItemTypeRequestCatalogItemTypeOneOfConfigVolumesInnerDatastoreId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


