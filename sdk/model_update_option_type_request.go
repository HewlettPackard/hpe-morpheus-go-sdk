/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateOptionTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOptionTypeRequest{}

// UpdateOptionTypeRequest struct for UpdateOptionTypeRequest
type UpdateOptionTypeRequest struct {
	OptionType *UpdateOptionTypeRequestOptionType `json:"optionType,omitempty"`
}

// NewUpdateOptionTypeRequest instantiates a new UpdateOptionTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOptionTypeRequest() *UpdateOptionTypeRequest {
	this := UpdateOptionTypeRequest{}
	return &this
}

// NewUpdateOptionTypeRequestWithDefaults instantiates a new UpdateOptionTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOptionTypeRequestWithDefaults() *UpdateOptionTypeRequest {
	this := UpdateOptionTypeRequest{}
	return &this
}

// GetOptionType returns the OptionType field value if set, zero value otherwise.
func (o *UpdateOptionTypeRequest) GetOptionType() UpdateOptionTypeRequestOptionType {
	if o == nil || IsNil(o.OptionType) {
		var ret UpdateOptionTypeRequestOptionType
		return ret
	}
	return *o.OptionType
}

// GetOptionTypeOk returns a tuple with the OptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOptionTypeRequest) GetOptionTypeOk() (*UpdateOptionTypeRequestOptionType, bool) {
	if o == nil || IsNil(o.OptionType) {
		return nil, false
	}
	return o.OptionType, true
}

// IsSetOptionType returns a boolean if a field has been set.
func (o *UpdateOptionTypeRequest) IsSetOptionType() bool {
	if o != nil && !IsNil(o.OptionType) {
		return true
	}

	return false
}

// SetOptionType gets a reference to the given UpdateOptionTypeRequestOptionType and assigns it to the OptionType field.
func (o *UpdateOptionTypeRequest) SetOptionType(v UpdateOptionTypeRequestOptionType) {
	o.OptionType = &v
}

func (o UpdateOptionTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOptionTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OptionType) {
		toSerialize["optionType"] = o.OptionType
	}
	return toSerialize, nil
}

type NullableUpdateOptionTypeRequest struct {
	value *UpdateOptionTypeRequest
	isSet bool
}

func (v NullableUpdateOptionTypeRequest) Get() *UpdateOptionTypeRequest {
	return v.value
}

func (v *NullableUpdateOptionTypeRequest) Set(val *UpdateOptionTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOptionTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOptionTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOptionTypeRequest(val *UpdateOptionTypeRequest) *NullableUpdateOptionTypeRequest {
	return &NullableUpdateOptionTypeRequest{value: val, isSet: true}
}

func (v NullableUpdateOptionTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOptionTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


