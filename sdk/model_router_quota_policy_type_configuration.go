/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the RouterQuotaPolicyTypeConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouterQuotaPolicyTypeConfiguration{}

// RouterQuotaPolicyTypeConfiguration Configuration settings for the following policy types: - Router Quota 
type RouterQuotaPolicyTypeConfiguration struct {
	MaxRouters *string `json:"maxRouters,omitempty"`
}

// NewRouterQuotaPolicyTypeConfiguration instantiates a new RouterQuotaPolicyTypeConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouterQuotaPolicyTypeConfiguration() *RouterQuotaPolicyTypeConfiguration {
	this := RouterQuotaPolicyTypeConfiguration{}
	return &this
}

// NewRouterQuotaPolicyTypeConfigurationWithDefaults instantiates a new RouterQuotaPolicyTypeConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouterQuotaPolicyTypeConfigurationWithDefaults() *RouterQuotaPolicyTypeConfiguration {
	this := RouterQuotaPolicyTypeConfiguration{}
	return &this
}

// GetMaxRouters returns the MaxRouters field value if set, zero value otherwise.
func (o *RouterQuotaPolicyTypeConfiguration) GetMaxRouters() string {
	if o == nil || IsNil(o.MaxRouters) {
		var ret string
		return ret
	}
	return *o.MaxRouters
}

// GetMaxRoutersOk returns a tuple with the MaxRouters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouterQuotaPolicyTypeConfiguration) GetMaxRoutersOk() (*string, bool) {
	if o == nil || IsNil(o.MaxRouters) {
		return nil, false
	}
	return o.MaxRouters, true
}

// IsSetMaxRouters returns a boolean if a field has been set.
func (o *RouterQuotaPolicyTypeConfiguration) IsSetMaxRouters() bool {
	if o != nil && !IsNil(o.MaxRouters) {
		return true
	}

	return false
}

// SetMaxRouters gets a reference to the given string and assigns it to the MaxRouters field.
func (o *RouterQuotaPolicyTypeConfiguration) SetMaxRouters(v string) {
	o.MaxRouters = &v
}

func (o RouterQuotaPolicyTypeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouterQuotaPolicyTypeConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxRouters) {
		toSerialize["maxRouters"] = o.MaxRouters
	}
	return toSerialize, nil
}

type NullableRouterQuotaPolicyTypeConfiguration struct {
	value *RouterQuotaPolicyTypeConfiguration
	isSet bool
}

func (v NullableRouterQuotaPolicyTypeConfiguration) Get() *RouterQuotaPolicyTypeConfiguration {
	return v.value
}

func (v *NullableRouterQuotaPolicyTypeConfiguration) Set(val *RouterQuotaPolicyTypeConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableRouterQuotaPolicyTypeConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableRouterQuotaPolicyTypeConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouterQuotaPolicyTypeConfiguration(val *RouterQuotaPolicyTypeConfiguration) *NullableRouterQuotaPolicyTypeConfiguration {
	return &NullableRouterQuotaPolicyTypeConfiguration{value: val, isSet: true}
}

func (v NullableRouterQuotaPolicyTypeConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouterQuotaPolicyTypeConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


