/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the CheckType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckType{}

// CheckType struct for CheckType
type CheckType struct {
	Id *int64 `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
	DefaultInterval *int64 `json:"defaultInterval,omitempty"`
	MetricName *string `json:"metricName,omitempty"`
	InUptime *bool `json:"inUptime,omitempty"`
	CreateIncident *bool `json:"createIncident,omitempty"`
	PushOnly *bool `json:"pushOnly,omitempty"`
	TunnelSupported *bool `json:"tunnelSupported,omitempty"`
}

// NewCheckType instantiates a new CheckType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckType() *CheckType {
	this := CheckType{}
	return &this
}

// NewCheckTypeWithDefaults instantiates a new CheckType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckTypeWithDefaults() *CheckType {
	this := CheckType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CheckType) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckType) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *CheckType) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CheckType) SetId(v int64) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CheckType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// IsSetCode returns a boolean if a field has been set.
func (o *CheckType) IsSetCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CheckType) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CheckType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *CheckType) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CheckType) SetName(v string) {
	o.Name = &v
}

// GetDefaultInterval returns the DefaultInterval field value if set, zero value otherwise.
func (o *CheckType) GetDefaultInterval() int64 {
	if o == nil || IsNil(o.DefaultInterval) {
		var ret int64
		return ret
	}
	return *o.DefaultInterval
}

// GetDefaultIntervalOk returns a tuple with the DefaultInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckType) GetDefaultIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.DefaultInterval) {
		return nil, false
	}
	return o.DefaultInterval, true
}

// IsSetDefaultInterval returns a boolean if a field has been set.
func (o *CheckType) IsSetDefaultInterval() bool {
	if o != nil && !IsNil(o.DefaultInterval) {
		return true
	}

	return false
}

// SetDefaultInterval gets a reference to the given int64 and assigns it to the DefaultInterval field.
func (o *CheckType) SetDefaultInterval(v int64) {
	o.DefaultInterval = &v
}

// GetMetricName returns the MetricName field value if set, zero value otherwise.
func (o *CheckType) GetMetricName() string {
	if o == nil || IsNil(o.MetricName) {
		var ret string
		return ret
	}
	return *o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckType) GetMetricNameOk() (*string, bool) {
	if o == nil || IsNil(o.MetricName) {
		return nil, false
	}
	return o.MetricName, true
}

// IsSetMetricName returns a boolean if a field has been set.
func (o *CheckType) IsSetMetricName() bool {
	if o != nil && !IsNil(o.MetricName) {
		return true
	}

	return false
}

// SetMetricName gets a reference to the given string and assigns it to the MetricName field.
func (o *CheckType) SetMetricName(v string) {
	o.MetricName = &v
}

// GetInUptime returns the InUptime field value if set, zero value otherwise.
func (o *CheckType) GetInUptime() bool {
	if o == nil || IsNil(o.InUptime) {
		var ret bool
		return ret
	}
	return *o.InUptime
}

// GetInUptimeOk returns a tuple with the InUptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckType) GetInUptimeOk() (*bool, bool) {
	if o == nil || IsNil(o.InUptime) {
		return nil, false
	}
	return o.InUptime, true
}

// IsSetInUptime returns a boolean if a field has been set.
func (o *CheckType) IsSetInUptime() bool {
	if o != nil && !IsNil(o.InUptime) {
		return true
	}

	return false
}

// SetInUptime gets a reference to the given bool and assigns it to the InUptime field.
func (o *CheckType) SetInUptime(v bool) {
	o.InUptime = &v
}

// GetCreateIncident returns the CreateIncident field value if set, zero value otherwise.
func (o *CheckType) GetCreateIncident() bool {
	if o == nil || IsNil(o.CreateIncident) {
		var ret bool
		return ret
	}
	return *o.CreateIncident
}

// GetCreateIncidentOk returns a tuple with the CreateIncident field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckType) GetCreateIncidentOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateIncident) {
		return nil, false
	}
	return o.CreateIncident, true
}

// IsSetCreateIncident returns a boolean if a field has been set.
func (o *CheckType) IsSetCreateIncident() bool {
	if o != nil && !IsNil(o.CreateIncident) {
		return true
	}

	return false
}

// SetCreateIncident gets a reference to the given bool and assigns it to the CreateIncident field.
func (o *CheckType) SetCreateIncident(v bool) {
	o.CreateIncident = &v
}

// GetPushOnly returns the PushOnly field value if set, zero value otherwise.
func (o *CheckType) GetPushOnly() bool {
	if o == nil || IsNil(o.PushOnly) {
		var ret bool
		return ret
	}
	return *o.PushOnly
}

// GetPushOnlyOk returns a tuple with the PushOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckType) GetPushOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.PushOnly) {
		return nil, false
	}
	return o.PushOnly, true
}

// IsSetPushOnly returns a boolean if a field has been set.
func (o *CheckType) IsSetPushOnly() bool {
	if o != nil && !IsNil(o.PushOnly) {
		return true
	}

	return false
}

// SetPushOnly gets a reference to the given bool and assigns it to the PushOnly field.
func (o *CheckType) SetPushOnly(v bool) {
	o.PushOnly = &v
}

// GetTunnelSupported returns the TunnelSupported field value if set, zero value otherwise.
func (o *CheckType) GetTunnelSupported() bool {
	if o == nil || IsNil(o.TunnelSupported) {
		var ret bool
		return ret
	}
	return *o.TunnelSupported
}

// GetTunnelSupportedOk returns a tuple with the TunnelSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckType) GetTunnelSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.TunnelSupported) {
		return nil, false
	}
	return o.TunnelSupported, true
}

// IsSetTunnelSupported returns a boolean if a field has been set.
func (o *CheckType) IsSetTunnelSupported() bool {
	if o != nil && !IsNil(o.TunnelSupported) {
		return true
	}

	return false
}

// SetTunnelSupported gets a reference to the given bool and assigns it to the TunnelSupported field.
func (o *CheckType) SetTunnelSupported(v bool) {
	o.TunnelSupported = &v
}

func (o CheckType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DefaultInterval) {
		toSerialize["defaultInterval"] = o.DefaultInterval
	}
	if !IsNil(o.MetricName) {
		toSerialize["metricName"] = o.MetricName
	}
	if !IsNil(o.InUptime) {
		toSerialize["inUptime"] = o.InUptime
	}
	if !IsNil(o.CreateIncident) {
		toSerialize["createIncident"] = o.CreateIncident
	}
	if !IsNil(o.PushOnly) {
		toSerialize["pushOnly"] = o.PushOnly
	}
	if !IsNil(o.TunnelSupported) {
		toSerialize["tunnelSupported"] = o.TunnelSupported
	}
	return toSerialize, nil
}

type NullableCheckType struct {
	value *CheckType
	isSet bool
}

func (v NullableCheckType) Get() *CheckType {
	return v.value
}

func (v *NullableCheckType) Set(val *CheckType) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckType) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckType(val *CheckType) *NullableCheckType {
	return &NullableCheckType{value: val, isSet: true}
}

func (v NullableCheckType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


