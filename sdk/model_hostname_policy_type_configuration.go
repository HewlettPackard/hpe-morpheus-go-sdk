/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the HostnamePolicyTypeConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostnamePolicyTypeConfiguration{}

// HostnamePolicyTypeConfiguration Configuration settings for the following policy types: - Hostname 
type HostnamePolicyTypeConfiguration struct {
	HostNamingType *string `json:"hostNamingType,omitempty"`
	HostNamingPattern *string `json:"hostNamingPattern,omitempty"`
}

// NewHostnamePolicyTypeConfiguration instantiates a new HostnamePolicyTypeConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostnamePolicyTypeConfiguration() *HostnamePolicyTypeConfiguration {
	this := HostnamePolicyTypeConfiguration{}
	return &this
}

// NewHostnamePolicyTypeConfigurationWithDefaults instantiates a new HostnamePolicyTypeConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostnamePolicyTypeConfigurationWithDefaults() *HostnamePolicyTypeConfiguration {
	this := HostnamePolicyTypeConfiguration{}
	return &this
}

// GetHostNamingType returns the HostNamingType field value if set, zero value otherwise.
func (o *HostnamePolicyTypeConfiguration) GetHostNamingType() string {
	if o == nil || IsNil(o.HostNamingType) {
		var ret string
		return ret
	}
	return *o.HostNamingType
}

// GetHostNamingTypeOk returns a tuple with the HostNamingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostnamePolicyTypeConfiguration) GetHostNamingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HostNamingType) {
		return nil, false
	}
	return o.HostNamingType, true
}

// IsSetHostNamingType returns a boolean if a field has been set.
func (o *HostnamePolicyTypeConfiguration) IsSetHostNamingType() bool {
	if o != nil && !IsNil(o.HostNamingType) {
		return true
	}

	return false
}

// SetHostNamingType gets a reference to the given string and assigns it to the HostNamingType field.
func (o *HostnamePolicyTypeConfiguration) SetHostNamingType(v string) {
	o.HostNamingType = &v
}

// GetHostNamingPattern returns the HostNamingPattern field value if set, zero value otherwise.
func (o *HostnamePolicyTypeConfiguration) GetHostNamingPattern() string {
	if o == nil || IsNil(o.HostNamingPattern) {
		var ret string
		return ret
	}
	return *o.HostNamingPattern
}

// GetHostNamingPatternOk returns a tuple with the HostNamingPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostnamePolicyTypeConfiguration) GetHostNamingPatternOk() (*string, bool) {
	if o == nil || IsNil(o.HostNamingPattern) {
		return nil, false
	}
	return o.HostNamingPattern, true
}

// IsSetHostNamingPattern returns a boolean if a field has been set.
func (o *HostnamePolicyTypeConfiguration) IsSetHostNamingPattern() bool {
	if o != nil && !IsNil(o.HostNamingPattern) {
		return true
	}

	return false
}

// SetHostNamingPattern gets a reference to the given string and assigns it to the HostNamingPattern field.
func (o *HostnamePolicyTypeConfiguration) SetHostNamingPattern(v string) {
	o.HostNamingPattern = &v
}

func (o HostnamePolicyTypeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostnamePolicyTypeConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HostNamingType) {
		toSerialize["hostNamingType"] = o.HostNamingType
	}
	if !IsNil(o.HostNamingPattern) {
		toSerialize["hostNamingPattern"] = o.HostNamingPattern
	}
	return toSerialize, nil
}

type NullableHostnamePolicyTypeConfiguration struct {
	value *HostnamePolicyTypeConfiguration
	isSet bool
}

func (v NullableHostnamePolicyTypeConfiguration) Get() *HostnamePolicyTypeConfiguration {
	return v.value
}

func (v *NullableHostnamePolicyTypeConfiguration) Set(val *HostnamePolicyTypeConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableHostnamePolicyTypeConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableHostnamePolicyTypeConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostnamePolicyTypeConfiguration(val *HostnamePolicyTypeConfiguration) *NullableHostnamePolicyTypeConfiguration {
	return &NullableHostnamePolicyTypeConfiguration{value: val, isSet: true}
}

func (v NullableHostnamePolicyTypeConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostnamePolicyTypeConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


