/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateInstance200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateInstance200Response{}

// UpdateInstance200Response struct for UpdateInstance200Response
type UpdateInstance200Response struct {
	Instance UpdateInstance200ResponseAllOfOneOfInstance `json:"instance"`
	// The Cloud ID to provision the instance onto.
	ZoneId int64 `json:"zoneId"`
	Success *bool `json:"success,omitempty"`
	Errors map[string]interface{} `json:"errors,omitempty"`
}

type _UpdateInstance200Response UpdateInstance200Response

// NewUpdateInstance200Response instantiates a new UpdateInstance200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInstance200Response(instance UpdateInstance200ResponseAllOfOneOfInstance, zoneId int64) *UpdateInstance200Response {
	this := UpdateInstance200Response{}
	this.Instance = instance
	this.ZoneId = zoneId
	return &this
}

// NewUpdateInstance200ResponseWithDefaults instantiates a new UpdateInstance200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInstance200ResponseWithDefaults() *UpdateInstance200Response {
	this := UpdateInstance200Response{}
	return &this
}

// GetInstance returns the Instance field value
func (o *UpdateInstance200Response) GetInstance() UpdateInstance200ResponseAllOfOneOfInstance {
	if o == nil {
		var ret UpdateInstance200ResponseAllOfOneOfInstance
		return ret
	}

	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value
// and a boolean to check if the value has been set.
func (o *UpdateInstance200Response) GetInstanceOk() (*UpdateInstance200ResponseAllOfOneOfInstance, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instance, true
}

// SetInstance sets field value
func (o *UpdateInstance200Response) SetInstance(v UpdateInstance200ResponseAllOfOneOfInstance) {
	o.Instance = v
}

// GetZoneId returns the ZoneId field value
func (o *UpdateInstance200Response) GetZoneId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value
// and a boolean to check if the value has been set.
func (o *UpdateInstance200Response) GetZoneIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneId, true
}

// SetZoneId sets field value
func (o *UpdateInstance200Response) SetZoneId(v int64) {
	o.ZoneId = v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *UpdateInstance200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstance200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// IsSetSuccess returns a boolean if a field has been set.
func (o *UpdateInstance200Response) IsSetSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *UpdateInstance200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *UpdateInstance200Response) GetErrors() map[string]interface{} {
	if o == nil || IsNil(o.Errors) {
		var ret map[string]interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateInstance200Response) GetErrorsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Errors) {
		return map[string]interface{}{}, false
	}
	return o.Errors, true
}

// IsSetErrors returns a boolean if a field has been set.
func (o *UpdateInstance200Response) IsSetErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given map[string]interface{} and assigns it to the Errors field.
func (o *UpdateInstance200Response) SetErrors(v map[string]interface{}) {
	o.Errors = v
}

func (o UpdateInstance200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateInstance200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instance"] = o.Instance
	toSerialize["zoneId"] = o.ZoneId
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

func (o *UpdateInstance200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instance",
		"zoneId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateInstance200Response := _UpdateInstance200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateInstance200Response)

	if err != nil {
		return err
	}

	*o = UpdateInstance200Response(varUpdateInstance200Response)

	return err
}

type NullableUpdateInstance200Response struct {
	value *UpdateInstance200Response
	isSet bool
}

func (v NullableUpdateInstance200Response) Get() *UpdateInstance200Response {
	return v.value
}

func (v *NullableUpdateInstance200Response) Set(val *UpdateInstance200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInstance200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInstance200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInstance200Response(val *UpdateInstance200Response) *NullableUpdateInstance200Response {
	return &NullableUpdateInstance200Response{value: val, isSet: true}
}

func (v NullableUpdateInstance200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInstance200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


