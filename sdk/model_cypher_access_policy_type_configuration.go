/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the CypherAccessPolicyTypeConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CypherAccessPolicyTypeConfiguration{}

// CypherAccessPolicyTypeConfiguration Configuration settings for the following policy types: - Cypher Access 
type CypherAccessPolicyTypeConfiguration struct {
	KeyPattern *string `json:"keyPattern,omitempty"`
	Read *bool `json:"read,omitempty"`
	Write *bool `json:"write,omitempty"`
	Update *bool `json:"update,omitempty"`
	Delete *bool `json:"delete,omitempty"`
	List *bool `json:"list,omitempty"`
}

// NewCypherAccessPolicyTypeConfiguration instantiates a new CypherAccessPolicyTypeConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCypherAccessPolicyTypeConfiguration() *CypherAccessPolicyTypeConfiguration {
	this := CypherAccessPolicyTypeConfiguration{}
	return &this
}

// NewCypherAccessPolicyTypeConfigurationWithDefaults instantiates a new CypherAccessPolicyTypeConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCypherAccessPolicyTypeConfigurationWithDefaults() *CypherAccessPolicyTypeConfiguration {
	this := CypherAccessPolicyTypeConfiguration{}
	return &this
}

// GetKeyPattern returns the KeyPattern field value if set, zero value otherwise.
func (o *CypherAccessPolicyTypeConfiguration) GetKeyPattern() string {
	if o == nil || IsNil(o.KeyPattern) {
		var ret string
		return ret
	}
	return *o.KeyPattern
}

// GetKeyPatternOk returns a tuple with the KeyPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CypherAccessPolicyTypeConfiguration) GetKeyPatternOk() (*string, bool) {
	if o == nil || IsNil(o.KeyPattern) {
		return nil, false
	}
	return o.KeyPattern, true
}

// IsSetKeyPattern returns a boolean if a field has been set.
func (o *CypherAccessPolicyTypeConfiguration) IsSetKeyPattern() bool {
	if o != nil && !IsNil(o.KeyPattern) {
		return true
	}

	return false
}

// SetKeyPattern gets a reference to the given string and assigns it to the KeyPattern field.
func (o *CypherAccessPolicyTypeConfiguration) SetKeyPattern(v string) {
	o.KeyPattern = &v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *CypherAccessPolicyTypeConfiguration) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CypherAccessPolicyTypeConfiguration) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// IsSetRead returns a boolean if a field has been set.
func (o *CypherAccessPolicyTypeConfiguration) IsSetRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *CypherAccessPolicyTypeConfiguration) SetRead(v bool) {
	o.Read = &v
}

// GetWrite returns the Write field value if set, zero value otherwise.
func (o *CypherAccessPolicyTypeConfiguration) GetWrite() bool {
	if o == nil || IsNil(o.Write) {
		var ret bool
		return ret
	}
	return *o.Write
}

// GetWriteOk returns a tuple with the Write field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CypherAccessPolicyTypeConfiguration) GetWriteOk() (*bool, bool) {
	if o == nil || IsNil(o.Write) {
		return nil, false
	}
	return o.Write, true
}

// IsSetWrite returns a boolean if a field has been set.
func (o *CypherAccessPolicyTypeConfiguration) IsSetWrite() bool {
	if o != nil && !IsNil(o.Write) {
		return true
	}

	return false
}

// SetWrite gets a reference to the given bool and assigns it to the Write field.
func (o *CypherAccessPolicyTypeConfiguration) SetWrite(v bool) {
	o.Write = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *CypherAccessPolicyTypeConfiguration) GetUpdate() bool {
	if o == nil || IsNil(o.Update) {
		var ret bool
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CypherAccessPolicyTypeConfiguration) GetUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// IsSetUpdate returns a boolean if a field has been set.
func (o *CypherAccessPolicyTypeConfiguration) IsSetUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given bool and assigns it to the Update field.
func (o *CypherAccessPolicyTypeConfiguration) SetUpdate(v bool) {
	o.Update = &v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *CypherAccessPolicyTypeConfiguration) GetDelete() bool {
	if o == nil || IsNil(o.Delete) {
		var ret bool
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CypherAccessPolicyTypeConfiguration) GetDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// IsSetDelete returns a boolean if a field has been set.
func (o *CypherAccessPolicyTypeConfiguration) IsSetDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given bool and assigns it to the Delete field.
func (o *CypherAccessPolicyTypeConfiguration) SetDelete(v bool) {
	o.Delete = &v
}

// GetList returns the List field value if set, zero value otherwise.
func (o *CypherAccessPolicyTypeConfiguration) GetList() bool {
	if o == nil || IsNil(o.List) {
		var ret bool
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CypherAccessPolicyTypeConfiguration) GetListOk() (*bool, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// IsSetList returns a boolean if a field has been set.
func (o *CypherAccessPolicyTypeConfiguration) IsSetList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given bool and assigns it to the List field.
func (o *CypherAccessPolicyTypeConfiguration) SetList(v bool) {
	o.List = &v
}

func (o CypherAccessPolicyTypeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CypherAccessPolicyTypeConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeyPattern) {
		toSerialize["keyPattern"] = o.KeyPattern
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.Write) {
		toSerialize["write"] = o.Write
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	return toSerialize, nil
}

type NullableCypherAccessPolicyTypeConfiguration struct {
	value *CypherAccessPolicyTypeConfiguration
	isSet bool
}

func (v NullableCypherAccessPolicyTypeConfiguration) Get() *CypherAccessPolicyTypeConfiguration {
	return v.value
}

func (v *NullableCypherAccessPolicyTypeConfiguration) Set(val *CypherAccessPolicyTypeConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableCypherAccessPolicyTypeConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableCypherAccessPolicyTypeConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCypherAccessPolicyTypeConfiguration(val *CypherAccessPolicyTypeConfiguration) *NullableCypherAccessPolicyTypeConfiguration {
	return &NullableCypherAccessPolicyTypeConfiguration{value: val, isSet: true}
}

func (v NullableCypherAccessPolicyTypeConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCypherAccessPolicyTypeConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


