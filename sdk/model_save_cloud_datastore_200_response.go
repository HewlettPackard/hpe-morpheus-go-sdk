/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SaveCloudDatastore200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaveCloudDatastore200Response{}

// SaveCloudDatastore200Response struct for SaveCloudDatastore200Response
type SaveCloudDatastore200Response struct {
	Datastore *SaveCloudDatastore200ResponseAllOfDatastore `json:"datastore,omitempty"`
	Success *bool `json:"success,omitempty"`
	ExecutionId *string `json:"executionId,omitempty"`
}

// NewSaveCloudDatastore200Response instantiates a new SaveCloudDatastore200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaveCloudDatastore200Response() *SaveCloudDatastore200Response {
	this := SaveCloudDatastore200Response{}
	return &this
}

// NewSaveCloudDatastore200ResponseWithDefaults instantiates a new SaveCloudDatastore200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaveCloudDatastore200ResponseWithDefaults() *SaveCloudDatastore200Response {
	this := SaveCloudDatastore200Response{}
	return &this
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *SaveCloudDatastore200Response) GetDatastore() SaveCloudDatastore200ResponseAllOfDatastore {
	if o == nil || IsNil(o.Datastore) {
		var ret SaveCloudDatastore200ResponseAllOfDatastore
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveCloudDatastore200Response) GetDatastoreOk() (*SaveCloudDatastore200ResponseAllOfDatastore, bool) {
	if o == nil || IsNil(o.Datastore) {
		return nil, false
	}
	return o.Datastore, true
}

// IsSetDatastore returns a boolean if a field has been set.
func (o *SaveCloudDatastore200Response) IsSetDatastore() bool {
	if o != nil && !IsNil(o.Datastore) {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given SaveCloudDatastore200ResponseAllOfDatastore and assigns it to the Datastore field.
func (o *SaveCloudDatastore200Response) SetDatastore(v SaveCloudDatastore200ResponseAllOfDatastore) {
	o.Datastore = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *SaveCloudDatastore200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveCloudDatastore200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// IsSetSuccess returns a boolean if a field has been set.
func (o *SaveCloudDatastore200Response) IsSetSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *SaveCloudDatastore200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *SaveCloudDatastore200Response) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId) {
		var ret string
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveCloudDatastore200Response) GetExecutionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionId) {
		return nil, false
	}
	return o.ExecutionId, true
}

// IsSetExecutionId returns a boolean if a field has been set.
func (o *SaveCloudDatastore200Response) IsSetExecutionId() bool {
	if o != nil && !IsNil(o.ExecutionId) {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given string and assigns it to the ExecutionId field.
func (o *SaveCloudDatastore200Response) SetExecutionId(v string) {
	o.ExecutionId = &v
}

func (o SaveCloudDatastore200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaveCloudDatastore200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datastore) {
		toSerialize["datastore"] = o.Datastore
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.ExecutionId) {
		toSerialize["executionId"] = o.ExecutionId
	}
	return toSerialize, nil
}

type NullableSaveCloudDatastore200Response struct {
	value *SaveCloudDatastore200Response
	isSet bool
}

func (v NullableSaveCloudDatastore200Response) Get() *SaveCloudDatastore200Response {
	return v.value
}

func (v *NullableSaveCloudDatastore200Response) Set(val *SaveCloudDatastore200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSaveCloudDatastore200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSaveCloudDatastore200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaveCloudDatastore200Response(val *SaveCloudDatastore200Response) *NullableSaveCloudDatastore200Response {
	return &NullableSaveCloudDatastore200Response{value: val, isSet: true}
}

func (v NullableSaveCloudDatastore200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaveCloudDatastore200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


