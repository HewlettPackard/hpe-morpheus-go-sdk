/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SetupRequestAnyOf1 - struct for SetupRequestAnyOf1
type SetupRequestAnyOf1 struct {
	SetupRequestAnyOf1OneOf *SetupRequestAnyOf1OneOf
	SetupRequestAnyOf1OneOf1 *SetupRequestAnyOf1OneOf1
}

// SetupRequestAnyOf1OneOfAsSetupRequestAnyOf1 is a convenience function that returns SetupRequestAnyOf1OneOf wrapped in SetupRequestAnyOf1
func SetupRequestAnyOf1OneOfAsSetupRequestAnyOf1(v *SetupRequestAnyOf1OneOf) SetupRequestAnyOf1 {
	return SetupRequestAnyOf1{
		SetupRequestAnyOf1OneOf: v,
	}
}

// SetupRequestAnyOf1OneOf1AsSetupRequestAnyOf1 is a convenience function that returns SetupRequestAnyOf1OneOf1 wrapped in SetupRequestAnyOf1
func SetupRequestAnyOf1OneOf1AsSetupRequestAnyOf1(v *SetupRequestAnyOf1OneOf1) SetupRequestAnyOf1 {
	return SetupRequestAnyOf1{
		SetupRequestAnyOf1OneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SetupRequestAnyOf1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SetupRequestAnyOf1OneOf
	err = newStrictDecoder(data).Decode(&dst.SetupRequestAnyOf1OneOf)
	if err == nil {
		jsonSetupRequestAnyOf1OneOf, _ := json.Marshal(dst.SetupRequestAnyOf1OneOf)
		if string(jsonSetupRequestAnyOf1OneOf) == "{}" { // empty struct
			dst.SetupRequestAnyOf1OneOf = nil
		} else {
			if err = validator.Validate(dst.SetupRequestAnyOf1OneOf); err != nil {
				dst.SetupRequestAnyOf1OneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.SetupRequestAnyOf1OneOf = nil
	}

	// try to unmarshal data into SetupRequestAnyOf1OneOf1
	err = newStrictDecoder(data).Decode(&dst.SetupRequestAnyOf1OneOf1)
	if err == nil {
		jsonSetupRequestAnyOf1OneOf1, _ := json.Marshal(dst.SetupRequestAnyOf1OneOf1)
		if string(jsonSetupRequestAnyOf1OneOf1) == "{}" { // empty struct
			dst.SetupRequestAnyOf1OneOf1 = nil
		} else {
			if err = validator.Validate(dst.SetupRequestAnyOf1OneOf1); err != nil {
				dst.SetupRequestAnyOf1OneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.SetupRequestAnyOf1OneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SetupRequestAnyOf1OneOf = nil
		dst.SetupRequestAnyOf1OneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SetupRequestAnyOf1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SetupRequestAnyOf1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SetupRequestAnyOf1) MarshalJSON() ([]byte, error) {
	if src.SetupRequestAnyOf1OneOf != nil {
		return json.Marshal(&src.SetupRequestAnyOf1OneOf)
	}

	if src.SetupRequestAnyOf1OneOf1 != nil {
		return json.Marshal(&src.SetupRequestAnyOf1OneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SetupRequestAnyOf1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SetupRequestAnyOf1OneOf != nil {
		return obj.SetupRequestAnyOf1OneOf
	}

	if obj.SetupRequestAnyOf1OneOf1 != nil {
		return obj.SetupRequestAnyOf1OneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SetupRequestAnyOf1) GetActualInstanceValue() (interface{}) {
	if obj.SetupRequestAnyOf1OneOf != nil {
		return *obj.SetupRequestAnyOf1OneOf
	}

	if obj.SetupRequestAnyOf1OneOf1 != nil {
		return *obj.SetupRequestAnyOf1OneOf1
	}

	// all schemas are nil
	return nil
}

type NullableSetupRequestAnyOf1 struct {
	value *SetupRequestAnyOf1
	isSet bool
}

func (v NullableSetupRequestAnyOf1) Get() *SetupRequestAnyOf1 {
	return v.value
}

func (v *NullableSetupRequestAnyOf1) Set(val *SetupRequestAnyOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableSetupRequestAnyOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableSetupRequestAnyOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetupRequestAnyOf1(val *SetupRequestAnyOf1) *NullableSetupRequestAnyOf1 {
	return &NullableSetupRequestAnyOf1{value: val, isSet: true}
}

func (v NullableSetupRequestAnyOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetupRequestAnyOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


