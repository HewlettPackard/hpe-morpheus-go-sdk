/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PhpIPAMNetworkPoolServerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhpIPAMNetworkPoolServerConfig{}

// PhpIPAMNetworkPoolServerConfig struct for PhpIPAMNetworkPoolServerConfig
type PhpIPAMNetworkPoolServerConfig struct {
	// App ID (Your App name in phpIPAM)
	AppId string `json:"appId"`
	// Inventory Existing
	InventoryExisting *string `json:"inventoryExisting,omitempty"`
}

type _PhpIPAMNetworkPoolServerConfig PhpIPAMNetworkPoolServerConfig

// NewPhpIPAMNetworkPoolServerConfig instantiates a new PhpIPAMNetworkPoolServerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhpIPAMNetworkPoolServerConfig(appId string) *PhpIPAMNetworkPoolServerConfig {
	this := PhpIPAMNetworkPoolServerConfig{}
	this.AppId = appId
	var inventoryExisting string = "off"
	this.InventoryExisting = &inventoryExisting
	return &this
}

// NewPhpIPAMNetworkPoolServerConfigWithDefaults instantiates a new PhpIPAMNetworkPoolServerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhpIPAMNetworkPoolServerConfigWithDefaults() *PhpIPAMNetworkPoolServerConfig {
	this := PhpIPAMNetworkPoolServerConfig{}
	var inventoryExisting string = "off"
	this.InventoryExisting = &inventoryExisting
	return &this
}

// GetAppId returns the AppId field value
func (o *PhpIPAMNetworkPoolServerConfig) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *PhpIPAMNetworkPoolServerConfig) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *PhpIPAMNetworkPoolServerConfig) SetAppId(v string) {
	o.AppId = v
}

// GetInventoryExisting returns the InventoryExisting field value if set, zero value otherwise.
func (o *PhpIPAMNetworkPoolServerConfig) GetInventoryExisting() string {
	if o == nil || IsNil(o.InventoryExisting) {
		var ret string
		return ret
	}
	return *o.InventoryExisting
}

// GetInventoryExistingOk returns a tuple with the InventoryExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhpIPAMNetworkPoolServerConfig) GetInventoryExistingOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryExisting) {
		return nil, false
	}
	return o.InventoryExisting, true
}

// IsSetInventoryExisting returns a boolean if a field has been set.
func (o *PhpIPAMNetworkPoolServerConfig) IsSetInventoryExisting() bool {
	if o != nil && !IsNil(o.InventoryExisting) {
		return true
	}

	return false
}

// SetInventoryExisting gets a reference to the given string and assigns it to the InventoryExisting field.
func (o *PhpIPAMNetworkPoolServerConfig) SetInventoryExisting(v string) {
	o.InventoryExisting = &v
}

func (o PhpIPAMNetworkPoolServerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhpIPAMNetworkPoolServerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appId"] = o.AppId
	if !IsNil(o.InventoryExisting) {
		toSerialize["inventoryExisting"] = o.InventoryExisting
	}
	return toSerialize, nil
}

func (o *PhpIPAMNetworkPoolServerConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPhpIPAMNetworkPoolServerConfig := _PhpIPAMNetworkPoolServerConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPhpIPAMNetworkPoolServerConfig)

	if err != nil {
		return err
	}

	*o = PhpIPAMNetworkPoolServerConfig(varPhpIPAMNetworkPoolServerConfig)

	return err
}

type NullablePhpIPAMNetworkPoolServerConfig struct {
	value *PhpIPAMNetworkPoolServerConfig
	isSet bool
}

func (v NullablePhpIPAMNetworkPoolServerConfig) Get() *PhpIPAMNetworkPoolServerConfig {
	return v.value
}

func (v *NullablePhpIPAMNetworkPoolServerConfig) Set(val *PhpIPAMNetworkPoolServerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePhpIPAMNetworkPoolServerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePhpIPAMNetworkPoolServerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhpIPAMNetworkPoolServerConfig(val *PhpIPAMNetworkPoolServerConfig) *NullablePhpIPAMNetworkPoolServerConfig {
	return &NullablePhpIPAMNetworkPoolServerConfig{value: val, isSet: true}
}

func (v NullablePhpIPAMNetworkPoolServerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhpIPAMNetworkPoolServerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


