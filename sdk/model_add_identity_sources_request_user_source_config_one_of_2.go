/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddIdentitySourcesRequestUserSourceConfigOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddIdentitySourcesRequestUserSourceConfigOneOf2{}

// AddIdentitySourcesRequestUserSourceConfigOneOf2 Active Directory Configuration
type AddIdentitySourcesRequestUserSourceConfigOneOf2 struct {
	// AD Server IP/FQDN
	Url *string `json:"url,omitempty"`
	// Domain
	Domain *string `json:"domain,omitempty"`
	// Use SSL (\"on\" or \"off\")
	UseSSL *string `json:"useSSL,omitempty"`
	// Binding Username
	BindingUsername *string `json:"bindingUsername,omitempty"`
	// Binding Password
	BindingPassword *string `json:"bindingPassword,omitempty"`
	// Required Group
	RequiredGroup *string `json:"requiredGroup,omitempty"`
	// Include Member Groups
	SearchMemberGroups *bool `json:"searchMemberGroups,omitempty"`
}

// NewAddIdentitySourcesRequestUserSourceConfigOneOf2 instantiates a new AddIdentitySourcesRequestUserSourceConfigOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddIdentitySourcesRequestUserSourceConfigOneOf2() *AddIdentitySourcesRequestUserSourceConfigOneOf2 {
	this := AddIdentitySourcesRequestUserSourceConfigOneOf2{}
	var searchMemberGroups bool = false
	this.SearchMemberGroups = &searchMemberGroups
	return &this
}

// NewAddIdentitySourcesRequestUserSourceConfigOneOf2WithDefaults instantiates a new AddIdentitySourcesRequestUserSourceConfigOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddIdentitySourcesRequestUserSourceConfigOneOf2WithDefaults() *AddIdentitySourcesRequestUserSourceConfigOneOf2 {
	this := AddIdentitySourcesRequestUserSourceConfigOneOf2{}
	var searchMemberGroups bool = false
	this.SearchMemberGroups = &searchMemberGroups
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// IsSetUrl returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) IsSetUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) SetUrl(v string) {
	o.Url = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// IsSetDomain returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) IsSetDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) SetDomain(v string) {
	o.Domain = &v
}

// GetUseSSL returns the UseSSL field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetUseSSL() string {
	if o == nil || IsNil(o.UseSSL) {
		var ret string
		return ret
	}
	return *o.UseSSL
}

// GetUseSSLOk returns a tuple with the UseSSL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetUseSSLOk() (*string, bool) {
	if o == nil || IsNil(o.UseSSL) {
		return nil, false
	}
	return o.UseSSL, true
}

// IsSetUseSSL returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) IsSetUseSSL() bool {
	if o != nil && !IsNil(o.UseSSL) {
		return true
	}

	return false
}

// SetUseSSL gets a reference to the given string and assigns it to the UseSSL field.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) SetUseSSL(v string) {
	o.UseSSL = &v
}

// GetBindingUsername returns the BindingUsername field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetBindingUsername() string {
	if o == nil || IsNil(o.BindingUsername) {
		var ret string
		return ret
	}
	return *o.BindingUsername
}

// GetBindingUsernameOk returns a tuple with the BindingUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetBindingUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.BindingUsername) {
		return nil, false
	}
	return o.BindingUsername, true
}

// IsSetBindingUsername returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) IsSetBindingUsername() bool {
	if o != nil && !IsNil(o.BindingUsername) {
		return true
	}

	return false
}

// SetBindingUsername gets a reference to the given string and assigns it to the BindingUsername field.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) SetBindingUsername(v string) {
	o.BindingUsername = &v
}

// GetBindingPassword returns the BindingPassword field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetBindingPassword() string {
	if o == nil || IsNil(o.BindingPassword) {
		var ret string
		return ret
	}
	return *o.BindingPassword
}

// GetBindingPasswordOk returns a tuple with the BindingPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetBindingPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.BindingPassword) {
		return nil, false
	}
	return o.BindingPassword, true
}

// IsSetBindingPassword returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) IsSetBindingPassword() bool {
	if o != nil && !IsNil(o.BindingPassword) {
		return true
	}

	return false
}

// SetBindingPassword gets a reference to the given string and assigns it to the BindingPassword field.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) SetBindingPassword(v string) {
	o.BindingPassword = &v
}

// GetRequiredGroup returns the RequiredGroup field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetRequiredGroup() string {
	if o == nil || IsNil(o.RequiredGroup) {
		var ret string
		return ret
	}
	return *o.RequiredGroup
}

// GetRequiredGroupOk returns a tuple with the RequiredGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetRequiredGroupOk() (*string, bool) {
	if o == nil || IsNil(o.RequiredGroup) {
		return nil, false
	}
	return o.RequiredGroup, true
}

// IsSetRequiredGroup returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) IsSetRequiredGroup() bool {
	if o != nil && !IsNil(o.RequiredGroup) {
		return true
	}

	return false
}

// SetRequiredGroup gets a reference to the given string and assigns it to the RequiredGroup field.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) SetRequiredGroup(v string) {
	o.RequiredGroup = &v
}

// GetSearchMemberGroups returns the SearchMemberGroups field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetSearchMemberGroups() bool {
	if o == nil || IsNil(o.SearchMemberGroups) {
		var ret bool
		return ret
	}
	return *o.SearchMemberGroups
}

// GetSearchMemberGroupsOk returns a tuple with the SearchMemberGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) GetSearchMemberGroupsOk() (*bool, bool) {
	if o == nil || IsNil(o.SearchMemberGroups) {
		return nil, false
	}
	return o.SearchMemberGroups, true
}

// IsSetSearchMemberGroups returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) IsSetSearchMemberGroups() bool {
	if o != nil && !IsNil(o.SearchMemberGroups) {
		return true
	}

	return false
}

// SetSearchMemberGroups gets a reference to the given bool and assigns it to the SearchMemberGroups field.
func (o *AddIdentitySourcesRequestUserSourceConfigOneOf2) SetSearchMemberGroups(v bool) {
	o.SearchMemberGroups = &v
}

func (o AddIdentitySourcesRequestUserSourceConfigOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddIdentitySourcesRequestUserSourceConfigOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.UseSSL) {
		toSerialize["useSSL"] = o.UseSSL
	}
	if !IsNil(o.BindingUsername) {
		toSerialize["bindingUsername"] = o.BindingUsername
	}
	if !IsNil(o.BindingPassword) {
		toSerialize["bindingPassword"] = o.BindingPassword
	}
	if !IsNil(o.RequiredGroup) {
		toSerialize["requiredGroup"] = o.RequiredGroup
	}
	if !IsNil(o.SearchMemberGroups) {
		toSerialize["searchMemberGroups"] = o.SearchMemberGroups
	}
	return toSerialize, nil
}

type NullableAddIdentitySourcesRequestUserSourceConfigOneOf2 struct {
	value *AddIdentitySourcesRequestUserSourceConfigOneOf2
	isSet bool
}

func (v NullableAddIdentitySourcesRequestUserSourceConfigOneOf2) Get() *AddIdentitySourcesRequestUserSourceConfigOneOf2 {
	return v.value
}

func (v *NullableAddIdentitySourcesRequestUserSourceConfigOneOf2) Set(val *AddIdentitySourcesRequestUserSourceConfigOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableAddIdentitySourcesRequestUserSourceConfigOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableAddIdentitySourcesRequestUserSourceConfigOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddIdentitySourcesRequestUserSourceConfigOneOf2(val *AddIdentitySourcesRequestUserSourceConfigOneOf2) *NullableAddIdentitySourcesRequestUserSourceConfigOneOf2 {
	return &NullableAddIdentitySourcesRequestUserSourceConfigOneOf2{value: val, isSet: true}
}

func (v NullableAddIdentitySourcesRequestUserSourceConfigOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddIdentitySourcesRequestUserSourceConfigOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


