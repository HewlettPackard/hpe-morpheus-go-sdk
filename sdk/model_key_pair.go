/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
)

// checks if the KeyPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyPair{}

// KeyPair struct for KeyPair
type KeyPair struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	AccountId *int64 `json:"accountId,omitempty"`
	PublicKey *string `json:"publicKey,omitempty"`
	HasPrivateKey *bool `json:"hasPrivateKey,omitempty"`
	PrivateKeyHash *string `json:"privateKeyHash,omitempty"`
	// Only present in response to generate
	PrivateKey *string `json:"privateKey,omitempty"`
	Fingerprint *string `json:"fingerprint,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// NewKeyPair instantiates a new KeyPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyPair() *KeyPair {
	this := KeyPair{}
	return &this
}

// NewKeyPairWithDefaults instantiates a new KeyPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyPairWithDefaults() *KeyPair {
	this := KeyPair{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyPair) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *KeyPair) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *KeyPair) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KeyPair) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *KeyPair) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KeyPair) SetName(v string) {
	o.Name = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *KeyPair) GetAccountId() int64 {
	if o == nil || IsNil(o.AccountId) {
		var ret int64
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetAccountIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// IsSetAccountId returns a boolean if a field has been set.
func (o *KeyPair) IsSetAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int64 and assigns it to the AccountId field.
func (o *KeyPair) SetAccountId(v int64) {
	o.AccountId = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *KeyPair) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// IsSetPublicKey returns a boolean if a field has been set.
func (o *KeyPair) IsSetPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *KeyPair) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetHasPrivateKey returns the HasPrivateKey field value if set, zero value otherwise.
func (o *KeyPair) GetHasPrivateKey() bool {
	if o == nil || IsNil(o.HasPrivateKey) {
		var ret bool
		return ret
	}
	return *o.HasPrivateKey
}

// GetHasPrivateKeyOk returns a tuple with the HasPrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetHasPrivateKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.HasPrivateKey) {
		return nil, false
	}
	return o.HasPrivateKey, true
}

// IsSetHasPrivateKey returns a boolean if a field has been set.
func (o *KeyPair) IsSetHasPrivateKey() bool {
	if o != nil && !IsNil(o.HasPrivateKey) {
		return true
	}

	return false
}

// SetHasPrivateKey gets a reference to the given bool and assigns it to the HasPrivateKey field.
func (o *KeyPair) SetHasPrivateKey(v bool) {
	o.HasPrivateKey = &v
}

// GetPrivateKeyHash returns the PrivateKeyHash field value if set, zero value otherwise.
func (o *KeyPair) GetPrivateKeyHash() string {
	if o == nil || IsNil(o.PrivateKeyHash) {
		var ret string
		return ret
	}
	return *o.PrivateKeyHash
}

// GetPrivateKeyHashOk returns a tuple with the PrivateKeyHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetPrivateKeyHashOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKeyHash) {
		return nil, false
	}
	return o.PrivateKeyHash, true
}

// IsSetPrivateKeyHash returns a boolean if a field has been set.
func (o *KeyPair) IsSetPrivateKeyHash() bool {
	if o != nil && !IsNil(o.PrivateKeyHash) {
		return true
	}

	return false
}

// SetPrivateKeyHash gets a reference to the given string and assigns it to the PrivateKeyHash field.
func (o *KeyPair) SetPrivateKeyHash(v string) {
	o.PrivateKeyHash = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *KeyPair) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// IsSetPrivateKey returns a boolean if a field has been set.
func (o *KeyPair) IsSetPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *KeyPair) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *KeyPair) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// IsSetFingerprint returns a boolean if a field has been set.
func (o *KeyPair) IsSetFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *KeyPair) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *KeyPair) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// IsSetDateCreated returns a boolean if a field has been set.
func (o *KeyPair) IsSetDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *KeyPair) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *KeyPair) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyPair) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// IsSetLastUpdated returns a boolean if a field has been set.
func (o *KeyPair) IsSetLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *KeyPair) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o KeyPair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	if !IsNil(o.HasPrivateKey) {
		toSerialize["hasPrivateKey"] = o.HasPrivateKey
	}
	if !IsNil(o.PrivateKeyHash) {
		toSerialize["privateKeyHash"] = o.PrivateKeyHash
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["privateKey"] = o.PrivateKey
	}
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return toSerialize, nil
}

type NullableKeyPair struct {
	value *KeyPair
	isSet bool
}

func (v NullableKeyPair) Get() *KeyPair {
	return v.value
}

func (v *NullableKeyPair) Set(val *KeyPair) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyPair) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyPair(val *KeyPair) *NullableKeyPair {
	return &NullableKeyPair{value: val, isSet: true}
}

func (v NullableKeyPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


