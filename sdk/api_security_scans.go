/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SecurityScansAPIService SecurityScansAPI service
type SecurityScansAPIService service

type ApiGetSecurityScansRequest struct {
	ctx context.Context
	ApiService *SecurityScansAPIService
	id int64
	results *bool
}

// Include the &#x60;results&#x60; object in the response under the security scan. This is a potentially very large object containing the raw results of the scan.
func (r ApiGetSecurityScansRequest) Results(results bool) ApiGetSecurityScansRequest {
	r.results = &results
	return r
}

func (r ApiGetSecurityScansRequest) Execute() (*GetSecurityScans200Response, *http.Response, error) {
	return r.ApiService.GetSecurityScansExecute(r)
}

/*
GetSecurityScans Retrieves a Specific Security Scan

Retrieves a specific security scan.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Morpheus ID of the Object being referenced
 @return ApiGetSecurityScansRequest
*/
func (a *SecurityScansAPIService) GetSecurityScans(ctx context.Context, id int64) ApiGetSecurityScansRequest {
	return ApiGetSecurityScansRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GetSecurityScans200Response
func (a *SecurityScansAPIService) GetSecurityScansExecute(r ApiGetSecurityScansRequest) (*GetSecurityScans200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetSecurityScans200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityScansAPIService.GetSecurityScans")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/security-scans/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.results != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "results", r.results, "form", "")
	} else {
		var defaultValue bool = false
		r.results = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ListActivity4XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v ListActivity5XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSecurityScansRequest struct {
	ctx context.Context
	ApiService *SecurityScansAPIService
	max *int64
	offset *int64
	sort *string
	direction *string
	phrase *string
	securityPackageId *int64
	serverId *int64
	results *bool
}

// Maximum number of records to return
func (r ApiListSecurityScansRequest) Max(max int64) ApiListSecurityScansRequest {
	r.max = &max
	return r
}

// Offset records, the number of records to skip, for paginating requests
func (r ApiListSecurityScansRequest) Offset(offset int64) ApiListSecurityScansRequest {
	r.offset = &offset
	return r
}

// Sort order, the name of the property to sort by
func (r ApiListSecurityScansRequest) Sort(sort string) ApiListSecurityScansRequest {
	r.sort = &sort
	return r
}

// Sort direction, use &#39;desc&#39; to reverse sort
func (r ApiListSecurityScansRequest) Direction(direction string) ApiListSecurityScansRequest {
	r.direction = &direction
	return r
}

// Search phrase for partial matches on name or description of security package
func (r ApiListSecurityScansRequest) Phrase(phrase string) ApiListSecurityScansRequest {
	r.phrase = &phrase
	return r
}

// Filter results by security package id(s). This parameter can be passed multiple times to match more than one id.
func (r ApiListSecurityScansRequest) SecurityPackageId(securityPackageId int64) ApiListSecurityScansRequest {
	r.securityPackageId = &securityPackageId
	return r
}

// The Server ID for Filtering
func (r ApiListSecurityScansRequest) ServerId(serverId int64) ApiListSecurityScansRequest {
	r.serverId = &serverId
	return r
}

// Include the &#x60;results&#x60; object in the response under each security scan. This is a potentially very large object containing the raw results of the scan.
func (r ApiListSecurityScansRequest) Results(results bool) ApiListSecurityScansRequest {
	r.results = &results
	return r
}

func (r ApiListSecurityScansRequest) Execute() (*ListSecurityScans200Response, *http.Response, error) {
	return r.ApiService.ListSecurityScansExecute(r)
}

/*
ListSecurityScans Retrieves all Security Scans

Retrieves all security scans.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSecurityScansRequest
*/
func (a *SecurityScansAPIService) ListSecurityScans(ctx context.Context) ApiListSecurityScansRequest {
	return ApiListSecurityScansRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListSecurityScans200Response
func (a *SecurityScansAPIService) ListSecurityScansExecute(r ApiListSecurityScansRequest) (*ListSecurityScans200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListSecurityScans200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityScansAPIService.ListSecurityScans")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/security-scans"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "form", "")
	} else {
		var defaultValue int64 = 25
		r.max = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int64 = 0
		r.offset = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	} else {
		var defaultValue string = "scanDate"
		r.sort = &defaultValue
	}
	if r.direction != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "direction", r.direction, "form", "")
	} else {
		var defaultValue string = "desc"
		r.direction = &defaultValue
	}
	if r.phrase != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "phrase", r.phrase, "form", "")
	}
	if r.securityPackageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "securityPackageId", r.securityPackageId, "form", "")
	}
	if r.serverId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "serverId", r.serverId, "form", "")
	}
	if r.results != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "results", r.results, "form", "")
	} else {
		var defaultValue bool = false
		r.results = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ListActivity4XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v ListActivity5XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
