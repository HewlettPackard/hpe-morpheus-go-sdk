/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterPackageCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterPackageCreate{}

// ClusterPackageCreate struct for ClusterPackageCreate
type ClusterPackageCreate struct {
	// Cluster Package name
	Name string `json:"name"`
	// Cluster Package description
	Description *string `json:"description,omitempty"`
	// Cluster Package code
	Code string `json:"code"`
	// Version of the cluster package
	PackageVersion string `json:"packageVersion"`
	// Package Type
	PackageType string `json:"packageType"`
	// type
	Type string `json:"type"`
	// Can be used to enable / disable the cluster package.
	Enabled bool `json:"enabled"`
	// Icon Path, relative location of an icon image, eg. /assets/containers-png/nginx.png.
	IconPath *string `json:"iconPath,omitempty"`
	// Array of resource spec templates
	SpecTemplates []int64 `json:"specTemplates"`
}

type _ClusterPackageCreate ClusterPackageCreate

// NewClusterPackageCreate instantiates a new ClusterPackageCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterPackageCreate(name string, code string, packageVersion string, packageType string, type_ string, enabled bool, specTemplates []int64) *ClusterPackageCreate {
	this := ClusterPackageCreate{}
	this.Name = name
	this.Code = code
	this.PackageVersion = packageVersion
	this.PackageType = packageType
	this.Type = type_
	this.Enabled = enabled
	this.SpecTemplates = specTemplates
	return &this
}

// NewClusterPackageCreateWithDefaults instantiates a new ClusterPackageCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterPackageCreateWithDefaults() *ClusterPackageCreate {
	this := ClusterPackageCreate{}
	var enabled bool = true
	this.Enabled = enabled
	return &this
}

// GetName returns the Name field value
func (o *ClusterPackageCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ClusterPackageCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ClusterPackageCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ClusterPackageCreate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *ClusterPackageCreate) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ClusterPackageCreate) SetDescription(v string) {
	o.Description = &v
}

// GetCode returns the Code field value
func (o *ClusterPackageCreate) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ClusterPackageCreate) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ClusterPackageCreate) SetCode(v string) {
	o.Code = v
}

// GetPackageVersion returns the PackageVersion field value
func (o *ClusterPackageCreate) GetPackageVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageVersion
}

// GetPackageVersionOk returns a tuple with the PackageVersion field value
// and a boolean to check if the value has been set.
func (o *ClusterPackageCreate) GetPackageVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageVersion, true
}

// SetPackageVersion sets field value
func (o *ClusterPackageCreate) SetPackageVersion(v string) {
	o.PackageVersion = v
}

// GetPackageType returns the PackageType field value
func (o *ClusterPackageCreate) GetPackageType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value
// and a boolean to check if the value has been set.
func (o *ClusterPackageCreate) GetPackageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageType, true
}

// SetPackageType sets field value
func (o *ClusterPackageCreate) SetPackageType(v string) {
	o.PackageType = v
}

// GetType returns the Type field value
func (o *ClusterPackageCreate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ClusterPackageCreate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ClusterPackageCreate) SetType(v string) {
	o.Type = v
}

// GetEnabled returns the Enabled field value
func (o *ClusterPackageCreate) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ClusterPackageCreate) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ClusterPackageCreate) SetEnabled(v bool) {
	o.Enabled = v
}

// GetIconPath returns the IconPath field value if set, zero value otherwise.
func (o *ClusterPackageCreate) GetIconPath() string {
	if o == nil || IsNil(o.IconPath) {
		var ret string
		return ret
	}
	return *o.IconPath
}

// GetIconPathOk returns a tuple with the IconPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageCreate) GetIconPathOk() (*string, bool) {
	if o == nil || IsNil(o.IconPath) {
		return nil, false
	}
	return o.IconPath, true
}

// IsSetIconPath returns a boolean if a field has been set.
func (o *ClusterPackageCreate) IsSetIconPath() bool {
	if o != nil && !IsNil(o.IconPath) {
		return true
	}

	return false
}

// SetIconPath gets a reference to the given string and assigns it to the IconPath field.
func (o *ClusterPackageCreate) SetIconPath(v string) {
	o.IconPath = &v
}

// GetSpecTemplates returns the SpecTemplates field value
func (o *ClusterPackageCreate) GetSpecTemplates() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}

	return o.SpecTemplates
}

// GetSpecTemplatesOk returns a tuple with the SpecTemplates field value
// and a boolean to check if the value has been set.
func (o *ClusterPackageCreate) GetSpecTemplatesOk() ([]int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpecTemplates, true
}

// SetSpecTemplates sets field value
func (o *ClusterPackageCreate) SetSpecTemplates(v []int64) {
	o.SpecTemplates = v
}

func (o ClusterPackageCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterPackageCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["code"] = o.Code
	toSerialize["packageVersion"] = o.PackageVersion
	toSerialize["packageType"] = o.PackageType
	toSerialize["type"] = o.Type
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.IconPath) {
		toSerialize["iconPath"] = o.IconPath
	}
	toSerialize["specTemplates"] = o.SpecTemplates
	return toSerialize, nil
}

func (o *ClusterPackageCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"code",
		"packageVersion",
		"packageType",
		"type",
		"enabled",
		"specTemplates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterPackageCreate := _ClusterPackageCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterPackageCreate)

	if err != nil {
		return err
	}

	*o = ClusterPackageCreate(varClusterPackageCreate)

	return err
}

type NullableClusterPackageCreate struct {
	value *ClusterPackageCreate
	isSet bool
}

func (v NullableClusterPackageCreate) Get() *ClusterPackageCreate {
	return v.value
}

func (v *NullableClusterPackageCreate) Set(val *ClusterPackageCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterPackageCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterPackageCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterPackageCreate(val *ClusterPackageCreate) *NullableClusterPackageCreate {
	return &NullableClusterPackageCreate{value: val, isSet: true}
}

func (v NullableClusterPackageCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterPackageCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


