/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddTenantRequestAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddTenantRequestAccount{}

// AddTenantRequestAccount Payload for creating a new tenant
type AddTenantRequestAccount struct {
	// Name
	Name string `json:"name"`
	// Description
	Description *string `json:"description,omitempty"`
	Role *AddTenantRequestAccountRole `json:"role,omitempty"`
	// The subdomain. This will be part of the login URL and username for sub tenant users.
	Subdomain *string `json:"subdomain,omitempty"`
	// Currency Code (ISO 4217)
	Currency *string `json:"currency,omitempty"`
}

type _AddTenantRequestAccount AddTenantRequestAccount

// NewAddTenantRequestAccount instantiates a new AddTenantRequestAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddTenantRequestAccount(name string) *AddTenantRequestAccount {
	this := AddTenantRequestAccount{}
	this.Name = name
	var currency string = "USD"
	this.Currency = &currency
	return &this
}

// NewAddTenantRequestAccountWithDefaults instantiates a new AddTenantRequestAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddTenantRequestAccountWithDefaults() *AddTenantRequestAccount {
	this := AddTenantRequestAccount{}
	var currency string = "USD"
	this.Currency = &currency
	return &this
}

// GetName returns the Name field value
func (o *AddTenantRequestAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddTenantRequestAccount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddTenantRequestAccount) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddTenantRequestAccount) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTenantRequestAccount) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *AddTenantRequestAccount) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddTenantRequestAccount) SetDescription(v string) {
	o.Description = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *AddTenantRequestAccount) GetRole() AddTenantRequestAccountRole {
	if o == nil || IsNil(o.Role) {
		var ret AddTenantRequestAccountRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTenantRequestAccount) GetRoleOk() (*AddTenantRequestAccountRole, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// IsSetRole returns a boolean if a field has been set.
func (o *AddTenantRequestAccount) IsSetRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given AddTenantRequestAccountRole and assigns it to the Role field.
func (o *AddTenantRequestAccount) SetRole(v AddTenantRequestAccountRole) {
	o.Role = &v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *AddTenantRequestAccount) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTenantRequestAccount) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// IsSetSubdomain returns a boolean if a field has been set.
func (o *AddTenantRequestAccount) IsSetSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *AddTenantRequestAccount) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *AddTenantRequestAccount) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTenantRequestAccount) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// IsSetCurrency returns a boolean if a field has been set.
func (o *AddTenantRequestAccount) IsSetCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *AddTenantRequestAccount) SetCurrency(v string) {
	o.Currency = &v
}

func (o AddTenantRequestAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddTenantRequestAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	return toSerialize, nil
}

func (o *AddTenantRequestAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddTenantRequestAccount := _AddTenantRequestAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddTenantRequestAccount)

	if err != nil {
		return err
	}

	*o = AddTenantRequestAccount(varAddTenantRequestAccount)

	return err
}

type NullableAddTenantRequestAccount struct {
	value *AddTenantRequestAccount
	isSet bool
}

func (v NullableAddTenantRequestAccount) Get() *AddTenantRequestAccount {
	return v.value
}

func (v *NullableAddTenantRequestAccount) Set(val *AddTenantRequestAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableAddTenantRequestAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAddTenantRequestAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddTenantRequestAccount(val *AddTenantRequestAccount) *NullableAddTenantRequestAccount {
	return &NullableAddTenantRequestAccount{value: val, isSet: true}
}

func (v NullableAddTenantRequestAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddTenantRequestAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


