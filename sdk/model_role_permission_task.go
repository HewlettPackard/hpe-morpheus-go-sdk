/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RolePermissionTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RolePermissionTask{}

// RolePermissionTask struct for RolePermissionTask
type RolePermissionTask struct {
	// `id` of the task
	TaskId int32 `json:"taskId"`
	// The new access level.
	Access string `json:"access"`
}

type _RolePermissionTask RolePermissionTask

// NewRolePermissionTask instantiates a new RolePermissionTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolePermissionTask(taskId int32, access string) *RolePermissionTask {
	this := RolePermissionTask{}
	this.TaskId = taskId
	this.Access = access
	return &this
}

// NewRolePermissionTaskWithDefaults instantiates a new RolePermissionTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolePermissionTaskWithDefaults() *RolePermissionTask {
	this := RolePermissionTask{}
	return &this
}

// GetTaskId returns the TaskId field value
func (o *RolePermissionTask) GetTaskId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value
// and a boolean to check if the value has been set.
func (o *RolePermissionTask) GetTaskIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskId, true
}

// SetTaskId sets field value
func (o *RolePermissionTask) SetTaskId(v int32) {
	o.TaskId = v
}

// GetAccess returns the Access field value
func (o *RolePermissionTask) GetAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Access
}

// GetAccessOk returns a tuple with the Access field value
// and a boolean to check if the value has been set.
func (o *RolePermissionTask) GetAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Access, true
}

// SetAccess sets field value
func (o *RolePermissionTask) SetAccess(v string) {
	o.Access = v
}

func (o RolePermissionTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RolePermissionTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["taskId"] = o.TaskId
	toSerialize["access"] = o.Access
	return toSerialize, nil
}

func (o *RolePermissionTask) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"taskId",
		"access",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRolePermissionTask := _RolePermissionTask{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRolePermissionTask)

	if err != nil {
		return err
	}

	*o = RolePermissionTask(varRolePermissionTask)

	return err
}

type NullableRolePermissionTask struct {
	value *RolePermissionTask
	isSet bool
}

func (v NullableRolePermissionTask) Get() *RolePermissionTask {
	return v.value
}

func (v *NullableRolePermissionTask) Set(val *RolePermissionTask) {
	v.value = val
	v.isSet = true
}

func (v NullableRolePermissionTask) IsSet() bool {
	return v.isSet
}

func (v *NullableRolePermissionTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolePermissionTask(val *RolePermissionTask) *NullableRolePermissionTask {
	return &NullableRolePermissionTask{value: val, isSet: true}
}

func (v NullableRolePermissionTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolePermissionTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


