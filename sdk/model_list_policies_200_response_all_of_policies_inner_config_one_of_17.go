/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17{}

// ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 - Max Virtual Servers 
type ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 struct {
	MaxVirtualServers string `json:"maxVirtualServers"`
	AdditionalProperties map[string]interface{}
}

type _ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17

// NewListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 instantiates a new ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17(maxVirtualServers string) *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 {
	this := ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17{}
	this.MaxVirtualServers = maxVirtualServers
	return &this
}

// NewListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17WithDefaults instantiates a new ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17WithDefaults() *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 {
	this := ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17{}
	return &this
}

// GetMaxVirtualServers returns the MaxVirtualServers field value
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) GetMaxVirtualServers() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MaxVirtualServers
}

// GetMaxVirtualServersOk returns a tuple with the MaxVirtualServers field value
// and a boolean to check if the value has been set.
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) GetMaxVirtualServersOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxVirtualServers, true
}

// SetMaxVirtualServers sets field value
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) SetMaxVirtualServers(v string) {
	o.MaxVirtualServers = v
}

func (o ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["maxVirtualServers"] = o.MaxVirtualServers

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"maxVirtualServers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 := _ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17{}

	err = json.Unmarshal(data, &varListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17)

	if err != nil {
		return err
	}

	*o = ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17(varListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "maxVirtualServers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 struct {
	value *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17
	isSet bool
}

func (v NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) Get() *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 {
	return v.value
}

func (v *NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) Set(val *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) {
	v.value = val
	v.isSet = true
}

func (v NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) IsSet() bool {
	return v.isSet
}

func (v *NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17(val *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) *NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17 {
	return &NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17{value: val, isSet: true}
}

func (v NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf17) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


