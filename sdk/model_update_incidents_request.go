/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateIncidentsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateIncidentsRequest{}

// UpdateIncidentsRequest struct for UpdateIncidentsRequest
type UpdateIncidentsRequest struct {
	Incident UpdateIncidentsRequestIncident `json:"incident"`
}

type _UpdateIncidentsRequest UpdateIncidentsRequest

// NewUpdateIncidentsRequest instantiates a new UpdateIncidentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIncidentsRequest(incident UpdateIncidentsRequestIncident) *UpdateIncidentsRequest {
	this := UpdateIncidentsRequest{}
	this.Incident = incident
	return &this
}

// NewUpdateIncidentsRequestWithDefaults instantiates a new UpdateIncidentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIncidentsRequestWithDefaults() *UpdateIncidentsRequest {
	this := UpdateIncidentsRequest{}
	return &this
}

// GetIncident returns the Incident field value
func (o *UpdateIncidentsRequest) GetIncident() UpdateIncidentsRequestIncident {
	if o == nil {
		var ret UpdateIncidentsRequestIncident
		return ret
	}

	return o.Incident
}

// GetIncidentOk returns a tuple with the Incident field value
// and a boolean to check if the value has been set.
func (o *UpdateIncidentsRequest) GetIncidentOk() (*UpdateIncidentsRequestIncident, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Incident, true
}

// SetIncident sets field value
func (o *UpdateIncidentsRequest) SetIncident(v UpdateIncidentsRequestIncident) {
	o.Incident = v
}

func (o UpdateIncidentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateIncidentsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["incident"] = o.Incident
	return toSerialize, nil
}

func (o *UpdateIncidentsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"incident",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateIncidentsRequest := _UpdateIncidentsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateIncidentsRequest)

	if err != nil {
		return err
	}

	*o = UpdateIncidentsRequest(varUpdateIncidentsRequest)

	return err
}

type NullableUpdateIncidentsRequest struct {
	value *UpdateIncidentsRequest
	isSet bool
}

func (v NullableUpdateIncidentsRequest) Get() *UpdateIncidentsRequest {
	return v.value
}

func (v *NullableUpdateIncidentsRequest) Set(val *UpdateIncidentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIncidentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIncidentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIncidentsRequest(val *UpdateIncidentsRequest) *NullableUpdateIncidentsRequest {
	return &NullableUpdateIncidentsRequest{value: val, isSet: true}
}

func (v NullableUpdateIncidentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIncidentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


