/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the TenantsAvailableRoles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantsAvailableRoles{}

// TenantsAvailableRoles struct for TenantsAvailableRoles
type TenantsAvailableRoles struct {
	Roles []ListTenantsAvailableRoles200ResponseRolesInner `json:"roles,omitempty"`
}

// NewTenantsAvailableRoles instantiates a new TenantsAvailableRoles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantsAvailableRoles() *TenantsAvailableRoles {
	this := TenantsAvailableRoles{}
	return &this
}

// NewTenantsAvailableRolesWithDefaults instantiates a new TenantsAvailableRoles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantsAvailableRolesWithDefaults() *TenantsAvailableRoles {
	this := TenantsAvailableRoles{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *TenantsAvailableRoles) GetRoles() []ListTenantsAvailableRoles200ResponseRolesInner {
	if o == nil || IsNil(o.Roles) {
		var ret []ListTenantsAvailableRoles200ResponseRolesInner
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsAvailableRoles) GetRolesOk() ([]ListTenantsAvailableRoles200ResponseRolesInner, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// IsSetRoles returns a boolean if a field has been set.
func (o *TenantsAvailableRoles) IsSetRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []ListTenantsAvailableRoles200ResponseRolesInner and assigns it to the Roles field.
func (o *TenantsAvailableRoles) SetRoles(v []ListTenantsAvailableRoles200ResponseRolesInner) {
	o.Roles = v
}

func (o TenantsAvailableRoles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantsAvailableRoles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableTenantsAvailableRoles struct {
	value *TenantsAvailableRoles
	isSet bool
}

func (v NullableTenantsAvailableRoles) Get() *TenantsAvailableRoles {
	return v.value
}

func (v *NullableTenantsAvailableRoles) Set(val *TenantsAvailableRoles) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantsAvailableRoles) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantsAvailableRoles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantsAvailableRoles(val *TenantsAvailableRoles) *NullableTenantsAvailableRoles {
	return &NullableTenantsAvailableRoles{value: val, isSet: true}
}

func (v NullableTenantsAvailableRoles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantsAvailableRoles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


