/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AddJobsRequestJob - struct for AddJobsRequestJob
type AddJobsRequestJob struct {
	SecurityScanJob *SecurityScanJob
	TaskJobPayload *TaskJobPayload
	WorkflowJobPayload *WorkflowJobPayload
}

// SecurityScanJobAsAddJobsRequestJob is a convenience function that returns SecurityScanJob wrapped in AddJobsRequestJob
func SecurityScanJobAsAddJobsRequestJob(v *SecurityScanJob) AddJobsRequestJob {
	return AddJobsRequestJob{
		SecurityScanJob: v,
	}
}

// TaskJobPayloadAsAddJobsRequestJob is a convenience function that returns TaskJobPayload wrapped in AddJobsRequestJob
func TaskJobPayloadAsAddJobsRequestJob(v *TaskJobPayload) AddJobsRequestJob {
	return AddJobsRequestJob{
		TaskJobPayload: v,
	}
}

// WorkflowJobPayloadAsAddJobsRequestJob is a convenience function that returns WorkflowJobPayload wrapped in AddJobsRequestJob
func WorkflowJobPayloadAsAddJobsRequestJob(v *WorkflowJobPayload) AddJobsRequestJob {
	return AddJobsRequestJob{
		WorkflowJobPayload: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddJobsRequestJob) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SecurityScanJob
	err = newStrictDecoder(data).Decode(&dst.SecurityScanJob)
	if err == nil {
		jsonSecurityScanJob, _ := json.Marshal(dst.SecurityScanJob)
		if string(jsonSecurityScanJob) == "{}" { // empty struct
			dst.SecurityScanJob = nil
		} else {
			if err = validator.Validate(dst.SecurityScanJob); err != nil {
				dst.SecurityScanJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.SecurityScanJob = nil
	}

	// try to unmarshal data into TaskJobPayload
	err = newStrictDecoder(data).Decode(&dst.TaskJobPayload)
	if err == nil {
		jsonTaskJobPayload, _ := json.Marshal(dst.TaskJobPayload)
		if string(jsonTaskJobPayload) == "{}" { // empty struct
			dst.TaskJobPayload = nil
		} else {
			if err = validator.Validate(dst.TaskJobPayload); err != nil {
				dst.TaskJobPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.TaskJobPayload = nil
	}

	// try to unmarshal data into WorkflowJobPayload
	err = newStrictDecoder(data).Decode(&dst.WorkflowJobPayload)
	if err == nil {
		jsonWorkflowJobPayload, _ := json.Marshal(dst.WorkflowJobPayload)
		if string(jsonWorkflowJobPayload) == "{}" { // empty struct
			dst.WorkflowJobPayload = nil
		} else {
			if err = validator.Validate(dst.WorkflowJobPayload); err != nil {
				dst.WorkflowJobPayload = nil
			} else {
				match++
			}
		}
	} else {
		dst.WorkflowJobPayload = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SecurityScanJob = nil
		dst.TaskJobPayload = nil
		dst.WorkflowJobPayload = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddJobsRequestJob)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddJobsRequestJob)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddJobsRequestJob) MarshalJSON() ([]byte, error) {
	if src.SecurityScanJob != nil {
		return json.Marshal(&src.SecurityScanJob)
	}

	if src.TaskJobPayload != nil {
		return json.Marshal(&src.TaskJobPayload)
	}

	if src.WorkflowJobPayload != nil {
		return json.Marshal(&src.WorkflowJobPayload)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddJobsRequestJob) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SecurityScanJob != nil {
		return obj.SecurityScanJob
	}

	if obj.TaskJobPayload != nil {
		return obj.TaskJobPayload
	}

	if obj.WorkflowJobPayload != nil {
		return obj.WorkflowJobPayload
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AddJobsRequestJob) GetActualInstanceValue() (interface{}) {
	if obj.SecurityScanJob != nil {
		return *obj.SecurityScanJob
	}

	if obj.TaskJobPayload != nil {
		return *obj.TaskJobPayload
	}

	if obj.WorkflowJobPayload != nil {
		return *obj.WorkflowJobPayload
	}

	// all schemas are nil
	return nil
}

type NullableAddJobsRequestJob struct {
	value *AddJobsRequestJob
	isSet bool
}

func (v NullableAddJobsRequestJob) Get() *AddJobsRequestJob {
	return v.value
}

func (v *NullableAddJobsRequestJob) Set(val *AddJobsRequestJob) {
	v.value = val
	v.isSet = true
}

func (v NullableAddJobsRequestJob) IsSet() bool {
	return v.isSet
}

func (v *NullableAddJobsRequestJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddJobsRequestJob(val *AddJobsRequestJob) *NullableAddJobsRequestJob {
	return &NullableAddJobsRequestJob{value: val, isSet: true}
}

func (v NullableAddJobsRequestJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddJobsRequestJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


