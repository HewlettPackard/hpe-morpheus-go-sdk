/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ManageHostPlacementRequestServerPreferredParentServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManageHostPlacementRequestServerPreferredParentServer{}

// ManageHostPlacementRequestServerPreferredParentServer Object containing id of preferred target host to place VM on
type ManageHostPlacementRequestServerPreferredParentServer struct {
	// Server ID
	Id *int64 `json:"id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManageHostPlacementRequestServerPreferredParentServer ManageHostPlacementRequestServerPreferredParentServer

// NewManageHostPlacementRequestServerPreferredParentServer instantiates a new ManageHostPlacementRequestServerPreferredParentServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManageHostPlacementRequestServerPreferredParentServer() *ManageHostPlacementRequestServerPreferredParentServer {
	this := ManageHostPlacementRequestServerPreferredParentServer{}
	return &this
}

// NewManageHostPlacementRequestServerPreferredParentServerWithDefaults instantiates a new ManageHostPlacementRequestServerPreferredParentServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManageHostPlacementRequestServerPreferredParentServerWithDefaults() *ManageHostPlacementRequestServerPreferredParentServer {
	this := ManageHostPlacementRequestServerPreferredParentServer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManageHostPlacementRequestServerPreferredParentServer) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageHostPlacementRequestServerPreferredParentServer) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *ManageHostPlacementRequestServerPreferredParentServer) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ManageHostPlacementRequestServerPreferredParentServer) SetId(v int64) {
	o.Id = &v
}

func (o ManageHostPlacementRequestServerPreferredParentServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManageHostPlacementRequestServerPreferredParentServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ManageHostPlacementRequestServerPreferredParentServer) UnmarshalJSON(data []byte) (err error) {
	varManageHostPlacementRequestServerPreferredParentServer := _ManageHostPlacementRequestServerPreferredParentServer{}

	err = json.Unmarshal(data, &varManageHostPlacementRequestServerPreferredParentServer)

	if err != nil {
		return err
	}

	*o = ManageHostPlacementRequestServerPreferredParentServer(varManageHostPlacementRequestServerPreferredParentServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManageHostPlacementRequestServerPreferredParentServer struct {
	value *ManageHostPlacementRequestServerPreferredParentServer
	isSet bool
}

func (v NullableManageHostPlacementRequestServerPreferredParentServer) Get() *ManageHostPlacementRequestServerPreferredParentServer {
	return v.value
}

func (v *NullableManageHostPlacementRequestServerPreferredParentServer) Set(val *ManageHostPlacementRequestServerPreferredParentServer) {
	v.value = val
	v.isSet = true
}

func (v NullableManageHostPlacementRequestServerPreferredParentServer) IsSet() bool {
	return v.isSet
}

func (v *NullableManageHostPlacementRequestServerPreferredParentServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManageHostPlacementRequestServerPreferredParentServer(val *ManageHostPlacementRequestServerPreferredParentServer) *NullableManageHostPlacementRequestServerPreferredParentServer {
	return &NullableManageHostPlacementRequestServerPreferredParentServer{value: val, isSet: true}
}

func (v NullableManageHostPlacementRequestServerPreferredParentServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManageHostPlacementRequestServerPreferredParentServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


