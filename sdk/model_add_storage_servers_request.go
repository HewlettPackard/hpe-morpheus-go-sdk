/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the AddStorageServersRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddStorageServersRequest{}

// AddStorageServersRequest struct for AddStorageServersRequest
type AddStorageServersRequest struct {
	StorageServer AddStorageServersRequestStorageServer `json:"storageServer"`
	AdditionalProperties map[string]interface{}
}

type _AddStorageServersRequest AddStorageServersRequest

// NewAddStorageServersRequest instantiates a new AddStorageServersRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddStorageServersRequest(storageServer AddStorageServersRequestStorageServer) *AddStorageServersRequest {
	this := AddStorageServersRequest{}
	this.StorageServer = storageServer
	return &this
}

// NewAddStorageServersRequestWithDefaults instantiates a new AddStorageServersRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddStorageServersRequestWithDefaults() *AddStorageServersRequest {
	this := AddStorageServersRequest{}
	return &this
}

// GetStorageServer returns the StorageServer field value
func (o *AddStorageServersRequest) GetStorageServer() AddStorageServersRequestStorageServer {
	if o == nil {
		var ret AddStorageServersRequestStorageServer
		return ret
	}

	return o.StorageServer
}

// GetStorageServerOk returns a tuple with the StorageServer field value
// and a boolean to check if the value has been set.
func (o *AddStorageServersRequest) GetStorageServerOk() (*AddStorageServersRequestStorageServer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageServer, true
}

// SetStorageServer sets field value
func (o *AddStorageServersRequest) SetStorageServer(v AddStorageServersRequestStorageServer) {
	o.StorageServer = v
}

func (o AddStorageServersRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddStorageServersRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["storageServer"] = o.StorageServer

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AddStorageServersRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"storageServer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddStorageServersRequest := _AddStorageServersRequest{}

	err = json.Unmarshal(data, &varAddStorageServersRequest)

	if err != nil {
		return err
	}

	*o = AddStorageServersRequest(varAddStorageServersRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "storageServer")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAddStorageServersRequest struct {
	value *AddStorageServersRequest
	isSet bool
}

func (v NullableAddStorageServersRequest) Get() *AddStorageServersRequest {
	return v.value
}

func (v *NullableAddStorageServersRequest) Set(val *AddStorageServersRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddStorageServersRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddStorageServersRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddStorageServersRequest(val *AddStorageServersRequest) *NullableAddStorageServersRequest {
	return &NullableAddStorageServersRequest{value: val, isSet: true}
}

func (v NullableAddStorageServersRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddStorageServersRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


