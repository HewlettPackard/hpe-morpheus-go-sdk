/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddWikiRequestPage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddWikiRequestPage{}

// AddWikiRequestPage struct for AddWikiRequestPage
type AddWikiRequestPage struct {
	Name string `json:"name"`
	Category string `json:"category"`
	Content string `json:"content"`
}

type _AddWikiRequestPage AddWikiRequestPage

// NewAddWikiRequestPage instantiates a new AddWikiRequestPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddWikiRequestPage(name string, category string, content string) *AddWikiRequestPage {
	this := AddWikiRequestPage{}
	this.Name = name
	this.Category = category
	this.Content = content
	return &this
}

// NewAddWikiRequestPageWithDefaults instantiates a new AddWikiRequestPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddWikiRequestPageWithDefaults() *AddWikiRequestPage {
	this := AddWikiRequestPage{}
	return &this
}

// GetName returns the Name field value
func (o *AddWikiRequestPage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddWikiRequestPage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddWikiRequestPage) SetName(v string) {
	o.Name = v
}

// GetCategory returns the Category field value
func (o *AddWikiRequestPage) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *AddWikiRequestPage) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *AddWikiRequestPage) SetCategory(v string) {
	o.Category = v
}

// GetContent returns the Content field value
func (o *AddWikiRequestPage) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *AddWikiRequestPage) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *AddWikiRequestPage) SetContent(v string) {
	o.Content = v
}

func (o AddWikiRequestPage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddWikiRequestPage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["category"] = o.Category
	toSerialize["content"] = o.Content
	return toSerialize, nil
}

func (o *AddWikiRequestPage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"category",
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddWikiRequestPage := _AddWikiRequestPage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddWikiRequestPage)

	if err != nil {
		return err
	}

	*o = AddWikiRequestPage(varAddWikiRequestPage)

	return err
}

type NullableAddWikiRequestPage struct {
	value *AddWikiRequestPage
	isSet bool
}

func (v NullableAddWikiRequestPage) Get() *AddWikiRequestPage {
	return v.value
}

func (v *NullableAddWikiRequestPage) Set(val *AddWikiRequestPage) {
	v.value = val
	v.isSet = true
}

func (v NullableAddWikiRequestPage) IsSet() bool {
	return v.isSet
}

func (v *NullableAddWikiRequestPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddWikiRequestPage(val *AddWikiRequestPage) *NullableAddWikiRequestPage {
	return &NullableAddWikiRequestPage{value: val, isSet: true}
}

func (v NullableAddWikiRequestPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddWikiRequestPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


