/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateCloudDatastoresRequestDatastore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCloudDatastoresRequestDatastore{}

// UpdateCloudDatastoresRequestDatastore struct for UpdateCloudDatastoresRequestDatastore
type UpdateCloudDatastoresRequestDatastore struct {
	// Activate `true` or disable `false` the datastore
	Active *bool `json:"active,omitempty"`
	// Setting `private` or `public`
	Visibility *string `json:"visibility,omitempty"`
	TenantPermissions *UpdateCloudDatastoresRequestDatastoreTenantPermissions `json:"tenantPermissions,omitempty"`
	ResourcePermissions *UpdateCloudDatastoresRequestDatastoreResourcePermissions `json:"resourcePermissions,omitempty"`
}

// NewUpdateCloudDatastoresRequestDatastore instantiates a new UpdateCloudDatastoresRequestDatastore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCloudDatastoresRequestDatastore() *UpdateCloudDatastoresRequestDatastore {
	this := UpdateCloudDatastoresRequestDatastore{}
	var visibility string = "private"
	this.Visibility = &visibility
	return &this
}

// NewUpdateCloudDatastoresRequestDatastoreWithDefaults instantiates a new UpdateCloudDatastoresRequestDatastore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCloudDatastoresRequestDatastoreWithDefaults() *UpdateCloudDatastoresRequestDatastore {
	this := UpdateCloudDatastoresRequestDatastore{}
	var visibility string = "private"
	this.Visibility = &visibility
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *UpdateCloudDatastoresRequestDatastore) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCloudDatastoresRequestDatastore) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// IsSetActive returns a boolean if a field has been set.
func (o *UpdateCloudDatastoresRequestDatastore) IsSetActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *UpdateCloudDatastoresRequestDatastore) SetActive(v bool) {
	o.Active = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *UpdateCloudDatastoresRequestDatastore) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCloudDatastoresRequestDatastore) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// IsSetVisibility returns a boolean if a field has been set.
func (o *UpdateCloudDatastoresRequestDatastore) IsSetVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *UpdateCloudDatastoresRequestDatastore) SetVisibility(v string) {
	o.Visibility = &v
}

// GetTenantPermissions returns the TenantPermissions field value if set, zero value otherwise.
func (o *UpdateCloudDatastoresRequestDatastore) GetTenantPermissions() UpdateCloudDatastoresRequestDatastoreTenantPermissions {
	if o == nil || IsNil(o.TenantPermissions) {
		var ret UpdateCloudDatastoresRequestDatastoreTenantPermissions
		return ret
	}
	return *o.TenantPermissions
}

// GetTenantPermissionsOk returns a tuple with the TenantPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCloudDatastoresRequestDatastore) GetTenantPermissionsOk() (*UpdateCloudDatastoresRequestDatastoreTenantPermissions, bool) {
	if o == nil || IsNil(o.TenantPermissions) {
		return nil, false
	}
	return o.TenantPermissions, true
}

// IsSetTenantPermissions returns a boolean if a field has been set.
func (o *UpdateCloudDatastoresRequestDatastore) IsSetTenantPermissions() bool {
	if o != nil && !IsNil(o.TenantPermissions) {
		return true
	}

	return false
}

// SetTenantPermissions gets a reference to the given UpdateCloudDatastoresRequestDatastoreTenantPermissions and assigns it to the TenantPermissions field.
func (o *UpdateCloudDatastoresRequestDatastore) SetTenantPermissions(v UpdateCloudDatastoresRequestDatastoreTenantPermissions) {
	o.TenantPermissions = &v
}

// GetResourcePermissions returns the ResourcePermissions field value if set, zero value otherwise.
func (o *UpdateCloudDatastoresRequestDatastore) GetResourcePermissions() UpdateCloudDatastoresRequestDatastoreResourcePermissions {
	if o == nil || IsNil(o.ResourcePermissions) {
		var ret UpdateCloudDatastoresRequestDatastoreResourcePermissions
		return ret
	}
	return *o.ResourcePermissions
}

// GetResourcePermissionsOk returns a tuple with the ResourcePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCloudDatastoresRequestDatastore) GetResourcePermissionsOk() (*UpdateCloudDatastoresRequestDatastoreResourcePermissions, bool) {
	if o == nil || IsNil(o.ResourcePermissions) {
		return nil, false
	}
	return o.ResourcePermissions, true
}

// IsSetResourcePermissions returns a boolean if a field has been set.
func (o *UpdateCloudDatastoresRequestDatastore) IsSetResourcePermissions() bool {
	if o != nil && !IsNil(o.ResourcePermissions) {
		return true
	}

	return false
}

// SetResourcePermissions gets a reference to the given UpdateCloudDatastoresRequestDatastoreResourcePermissions and assigns it to the ResourcePermissions field.
func (o *UpdateCloudDatastoresRequestDatastore) SetResourcePermissions(v UpdateCloudDatastoresRequestDatastoreResourcePermissions) {
	o.ResourcePermissions = &v
}

func (o UpdateCloudDatastoresRequestDatastore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCloudDatastoresRequestDatastore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.TenantPermissions) {
		toSerialize["tenantPermissions"] = o.TenantPermissions
	}
	if !IsNil(o.ResourcePermissions) {
		toSerialize["resourcePermissions"] = o.ResourcePermissions
	}
	return toSerialize, nil
}

type NullableUpdateCloudDatastoresRequestDatastore struct {
	value *UpdateCloudDatastoresRequestDatastore
	isSet bool
}

func (v NullableUpdateCloudDatastoresRequestDatastore) Get() *UpdateCloudDatastoresRequestDatastore {
	return v.value
}

func (v *NullableUpdateCloudDatastoresRequestDatastore) Set(val *UpdateCloudDatastoresRequestDatastore) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCloudDatastoresRequestDatastore) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCloudDatastoresRequestDatastore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCloudDatastoresRequestDatastore(val *UpdateCloudDatastoresRequestDatastore) *NullableUpdateCloudDatastoresRequestDatastore {
	return &NullableUpdateCloudDatastoresRequestDatastore{value: val, isSet: true}
}

func (v NullableUpdateCloudDatastoresRequestDatastore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCloudDatastoresRequestDatastore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


