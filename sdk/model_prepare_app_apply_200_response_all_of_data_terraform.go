/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the PrepareAppApply200ResponseAllOfDataTerraform type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrepareAppApply200ResponseAllOfDataTerraform{}

// PrepareAppApply200ResponseAllOfDataTerraform struct for PrepareAppApply200ResponseAllOfDataTerraform
type PrepareAppApply200ResponseAllOfDataTerraform struct {
	RefreshMode *string `json:"refreshMode,omitempty"`
	BackendType *string `json:"backendType,omitempty"`
	TimeoutMode *string `json:"timeoutMode,omitempty"`
	ConfigType *string `json:"configType,omitempty"`
}

// NewPrepareAppApply200ResponseAllOfDataTerraform instantiates a new PrepareAppApply200ResponseAllOfDataTerraform object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrepareAppApply200ResponseAllOfDataTerraform() *PrepareAppApply200ResponseAllOfDataTerraform {
	this := PrepareAppApply200ResponseAllOfDataTerraform{}
	return &this
}

// NewPrepareAppApply200ResponseAllOfDataTerraformWithDefaults instantiates a new PrepareAppApply200ResponseAllOfDataTerraform object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrepareAppApply200ResponseAllOfDataTerraformWithDefaults() *PrepareAppApply200ResponseAllOfDataTerraform {
	this := PrepareAppApply200ResponseAllOfDataTerraform{}
	return &this
}

// GetRefreshMode returns the RefreshMode field value if set, zero value otherwise.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) GetRefreshMode() string {
	if o == nil || IsNil(o.RefreshMode) {
		var ret string
		return ret
	}
	return *o.RefreshMode
}

// GetRefreshModeOk returns a tuple with the RefreshMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) GetRefreshModeOk() (*string, bool) {
	if o == nil || IsNil(o.RefreshMode) {
		return nil, false
	}
	return o.RefreshMode, true
}

// IsSetRefreshMode returns a boolean if a field has been set.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) IsSetRefreshMode() bool {
	if o != nil && !IsNil(o.RefreshMode) {
		return true
	}

	return false
}

// SetRefreshMode gets a reference to the given string and assigns it to the RefreshMode field.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) SetRefreshMode(v string) {
	o.RefreshMode = &v
}

// GetBackendType returns the BackendType field value if set, zero value otherwise.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) GetBackendType() string {
	if o == nil || IsNil(o.BackendType) {
		var ret string
		return ret
	}
	return *o.BackendType
}

// GetBackendTypeOk returns a tuple with the BackendType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) GetBackendTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BackendType) {
		return nil, false
	}
	return o.BackendType, true
}

// IsSetBackendType returns a boolean if a field has been set.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) IsSetBackendType() bool {
	if o != nil && !IsNil(o.BackendType) {
		return true
	}

	return false
}

// SetBackendType gets a reference to the given string and assigns it to the BackendType field.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) SetBackendType(v string) {
	o.BackendType = &v
}

// GetTimeoutMode returns the TimeoutMode field value if set, zero value otherwise.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) GetTimeoutMode() string {
	if o == nil || IsNil(o.TimeoutMode) {
		var ret string
		return ret
	}
	return *o.TimeoutMode
}

// GetTimeoutModeOk returns a tuple with the TimeoutMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) GetTimeoutModeOk() (*string, bool) {
	if o == nil || IsNil(o.TimeoutMode) {
		return nil, false
	}
	return o.TimeoutMode, true
}

// IsSetTimeoutMode returns a boolean if a field has been set.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) IsSetTimeoutMode() bool {
	if o != nil && !IsNil(o.TimeoutMode) {
		return true
	}

	return false
}

// SetTimeoutMode gets a reference to the given string and assigns it to the TimeoutMode field.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) SetTimeoutMode(v string) {
	o.TimeoutMode = &v
}

// GetConfigType returns the ConfigType field value if set, zero value otherwise.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) GetConfigType() string {
	if o == nil || IsNil(o.ConfigType) {
		var ret string
		return ret
	}
	return *o.ConfigType
}

// GetConfigTypeOk returns a tuple with the ConfigType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) GetConfigTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigType) {
		return nil, false
	}
	return o.ConfigType, true
}

// IsSetConfigType returns a boolean if a field has been set.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) IsSetConfigType() bool {
	if o != nil && !IsNil(o.ConfigType) {
		return true
	}

	return false
}

// SetConfigType gets a reference to the given string and assigns it to the ConfigType field.
func (o *PrepareAppApply200ResponseAllOfDataTerraform) SetConfigType(v string) {
	o.ConfigType = &v
}

func (o PrepareAppApply200ResponseAllOfDataTerraform) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrepareAppApply200ResponseAllOfDataTerraform) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RefreshMode) {
		toSerialize["refreshMode"] = o.RefreshMode
	}
	if !IsNil(o.BackendType) {
		toSerialize["backendType"] = o.BackendType
	}
	if !IsNil(o.TimeoutMode) {
		toSerialize["timeoutMode"] = o.TimeoutMode
	}
	if !IsNil(o.ConfigType) {
		toSerialize["configType"] = o.ConfigType
	}
	return toSerialize, nil
}

type NullablePrepareAppApply200ResponseAllOfDataTerraform struct {
	value *PrepareAppApply200ResponseAllOfDataTerraform
	isSet bool
}

func (v NullablePrepareAppApply200ResponseAllOfDataTerraform) Get() *PrepareAppApply200ResponseAllOfDataTerraform {
	return v.value
}

func (v *NullablePrepareAppApply200ResponseAllOfDataTerraform) Set(val *PrepareAppApply200ResponseAllOfDataTerraform) {
	v.value = val
	v.isSet = true
}

func (v NullablePrepareAppApply200ResponseAllOfDataTerraform) IsSet() bool {
	return v.isSet
}

func (v *NullablePrepareAppApply200ResponseAllOfDataTerraform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrepareAppApply200ResponseAllOfDataTerraform(val *PrepareAppApply200ResponseAllOfDataTerraform) *NullablePrepareAppApply200ResponseAllOfDataTerraform {
	return &NullablePrepareAppApply200ResponseAllOfDataTerraform{value: val, isSet: true}
}

func (v NullablePrepareAppApply200ResponseAllOfDataTerraform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrepareAppApply200ResponseAllOfDataTerraform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


