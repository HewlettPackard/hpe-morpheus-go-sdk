/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateHostInstallAgent200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateHostInstallAgent200Response{}

// UpdateHostInstallAgent200Response struct for UpdateHostInstallAgent200Response
type UpdateHostInstallAgent200Response struct {
	// Public key to be put into `authorized_keys` on target VM
	PublicKey            *string                `json:"publicKey,omitempty"`
	Success              *bool                  `json:"success,omitempty"`
	AdditionalProperties map[string]interface{} `json:",remain"`
}

type _UpdateHostInstallAgent200Response UpdateHostInstallAgent200Response

// NewUpdateHostInstallAgent200Response instantiates a new UpdateHostInstallAgent200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateHostInstallAgent200Response() *UpdateHostInstallAgent200Response {
	this := UpdateHostInstallAgent200Response{}
	return &this
}

// NewUpdateHostInstallAgent200ResponseWithDefaults instantiates a new UpdateHostInstallAgent200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateHostInstallAgent200ResponseWithDefaults() *UpdateHostInstallAgent200Response {
	this := UpdateHostInstallAgent200Response{}
	return &this
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *UpdateHostInstallAgent200Response) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateHostInstallAgent200Response) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// IsSetPublicKey returns a boolean if a field has been set.
func (o *UpdateHostInstallAgent200Response) IsSetPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *UpdateHostInstallAgent200Response) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *UpdateHostInstallAgent200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateHostInstallAgent200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// IsSetSuccess returns a boolean if a field has been set.
func (o *UpdateHostInstallAgent200Response) IsSetSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *UpdateHostInstallAgent200Response) SetSuccess(v bool) {
	o.Success = &v
}

func (o UpdateHostInstallAgent200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateHostInstallAgent200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PublicKey) {
		toSerialize["publicKey"] = o.PublicKey
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *UpdateHostInstallAgent200Response) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
