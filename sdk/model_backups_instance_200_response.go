/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the BackupsInstance200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupsInstance200Response{}

// BackupsInstance200Response struct for BackupsInstance200Response
type BackupsInstance200Response struct {
	Instance *BackupsInstance200ResponseInstance `json:"instance,omitempty"`
	// List of backup objects
	Backups              []map[string]interface{} `json:"backups,omitempty"`
	AdditionalProperties map[string]interface{}   `json:",remain"`
}

type _BackupsInstance200Response BackupsInstance200Response

// NewBackupsInstance200Response instantiates a new BackupsInstance200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupsInstance200Response() *BackupsInstance200Response {
	this := BackupsInstance200Response{}
	return &this
}

// NewBackupsInstance200ResponseWithDefaults instantiates a new BackupsInstance200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupsInstance200ResponseWithDefaults() *BackupsInstance200Response {
	this := BackupsInstance200Response{}
	return &this
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *BackupsInstance200Response) GetInstance() BackupsInstance200ResponseInstance {
	if o == nil || IsNil(o.Instance) {
		var ret BackupsInstance200ResponseInstance
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsInstance200Response) GetInstanceOk() (*BackupsInstance200ResponseInstance, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// IsSetInstance returns a boolean if a field has been set.
func (o *BackupsInstance200Response) IsSetInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given BackupsInstance200ResponseInstance and assigns it to the Instance field.
func (o *BackupsInstance200Response) SetInstance(v BackupsInstance200ResponseInstance) {
	o.Instance = &v
}

// GetBackups returns the Backups field value if set, zero value otherwise.
func (o *BackupsInstance200Response) GetBackups() []map[string]interface{} {
	if o == nil || IsNil(o.Backups) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Backups
}

// GetBackupsOk returns a tuple with the Backups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsInstance200Response) GetBackupsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Backups) {
		return nil, false
	}
	return o.Backups, true
}

// IsSetBackups returns a boolean if a field has been set.
func (o *BackupsInstance200Response) IsSetBackups() bool {
	if o != nil && !IsNil(o.Backups) {
		return true
	}

	return false
}

// SetBackups gets a reference to the given []map[string]interface{} and assigns it to the Backups field.
func (o *BackupsInstance200Response) SetBackups(v []map[string]interface{}) {
	o.Backups = v
}

func (o BackupsInstance200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupsInstance200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	if !IsNil(o.Backups) {
		toSerialize["backups"] = o.Backups
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *BackupsInstance200Response) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
