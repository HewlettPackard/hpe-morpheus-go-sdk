/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the CloneInstanceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloneInstanceRequest{}

// CloneInstanceRequest struct for CloneInstanceRequest
type CloneInstanceRequest struct {
	// A name for the new cloned instance. If none is specified the existing name will be duplicated with the 'clone' suffix added.
	Name *string `json:"name,omitempty"`
	Group *CloneInstanceRequestGroup `json:"group,omitempty"`
}

// NewCloneInstanceRequest instantiates a new CloneInstanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloneInstanceRequest() *CloneInstanceRequest {
	this := CloneInstanceRequest{}
	return &this
}

// NewCloneInstanceRequestWithDefaults instantiates a new CloneInstanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloneInstanceRequestWithDefaults() *CloneInstanceRequest {
	this := CloneInstanceRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CloneInstanceRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneInstanceRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *CloneInstanceRequest) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CloneInstanceRequest) SetName(v string) {
	o.Name = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *CloneInstanceRequest) GetGroup() CloneInstanceRequestGroup {
	if o == nil || IsNil(o.Group) {
		var ret CloneInstanceRequestGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneInstanceRequest) GetGroupOk() (*CloneInstanceRequestGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// IsSetGroup returns a boolean if a field has been set.
func (o *CloneInstanceRequest) IsSetGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given CloneInstanceRequestGroup and assigns it to the Group field.
func (o *CloneInstanceRequest) SetGroup(v CloneInstanceRequestGroup) {
	o.Group = &v
}

func (o CloneInstanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloneInstanceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	return toSerialize, nil
}

type NullableCloneInstanceRequest struct {
	value *CloneInstanceRequest
	isSet bool
}

func (v NullableCloneInstanceRequest) Get() *CloneInstanceRequest {
	return v.value
}

func (v *NullableCloneInstanceRequest) Set(val *CloneInstanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCloneInstanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCloneInstanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloneInstanceRequest(val *CloneInstanceRequest) *NullableCloneInstanceRequest {
	return &NullableCloneInstanceRequest{value: val, isSet: true}
}

func (v NullableCloneInstanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloneInstanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


