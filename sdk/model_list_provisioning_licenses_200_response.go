/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ListProvisioningLicenses200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListProvisioningLicenses200Response{}

// ListProvisioningLicenses200Response struct for ListProvisioningLicenses200Response
type ListProvisioningLicenses200Response struct {
	Licenses []ListProvisioningLicenses200ResponseAllOfLicensesInner `json:"licenses,omitempty"`
	Meta *ListActivity200ResponseAllOfMeta `json:"meta,omitempty"`
}

// NewListProvisioningLicenses200Response instantiates a new ListProvisioningLicenses200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListProvisioningLicenses200Response() *ListProvisioningLicenses200Response {
	this := ListProvisioningLicenses200Response{}
	return &this
}

// NewListProvisioningLicenses200ResponseWithDefaults instantiates a new ListProvisioningLicenses200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListProvisioningLicenses200ResponseWithDefaults() *ListProvisioningLicenses200Response {
	this := ListProvisioningLicenses200Response{}
	return &this
}

// GetLicenses returns the Licenses field value if set, zero value otherwise.
func (o *ListProvisioningLicenses200Response) GetLicenses() []ListProvisioningLicenses200ResponseAllOfLicensesInner {
	if o == nil || IsNil(o.Licenses) {
		var ret []ListProvisioningLicenses200ResponseAllOfLicensesInner
		return ret
	}
	return o.Licenses
}

// GetLicensesOk returns a tuple with the Licenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProvisioningLicenses200Response) GetLicensesOk() ([]ListProvisioningLicenses200ResponseAllOfLicensesInner, bool) {
	if o == nil || IsNil(o.Licenses) {
		return nil, false
	}
	return o.Licenses, true
}

// IsSetLicenses returns a boolean if a field has been set.
func (o *ListProvisioningLicenses200Response) IsSetLicenses() bool {
	if o != nil && !IsNil(o.Licenses) {
		return true
	}

	return false
}

// SetLicenses gets a reference to the given []ListProvisioningLicenses200ResponseAllOfLicensesInner and assigns it to the Licenses field.
func (o *ListProvisioningLicenses200Response) SetLicenses(v []ListProvisioningLicenses200ResponseAllOfLicensesInner) {
	o.Licenses = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ListProvisioningLicenses200Response) GetMeta() ListActivity200ResponseAllOfMeta {
	if o == nil || IsNil(o.Meta) {
		var ret ListActivity200ResponseAllOfMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListProvisioningLicenses200Response) GetMetaOk() (*ListActivity200ResponseAllOfMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// IsSetMeta returns a boolean if a field has been set.
func (o *ListProvisioningLicenses200Response) IsSetMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ListActivity200ResponseAllOfMeta and assigns it to the Meta field.
func (o *ListProvisioningLicenses200Response) SetMeta(v ListActivity200ResponseAllOfMeta) {
	o.Meta = &v
}

func (o ListProvisioningLicenses200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListProvisioningLicenses200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Licenses) {
		toSerialize["licenses"] = o.Licenses
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableListProvisioningLicenses200Response struct {
	value *ListProvisioningLicenses200Response
	isSet bool
}

func (v NullableListProvisioningLicenses200Response) Get() *ListProvisioningLicenses200Response {
	return v.value
}

func (v *NullableListProvisioningLicenses200Response) Set(val *ListProvisioningLicenses200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListProvisioningLicenses200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListProvisioningLicenses200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListProvisioningLicenses200Response(val *ListProvisioningLicenses200Response) *NullableListProvisioningLicenses200Response {
	return &NullableListProvisioningLicenses200Response{value: val, isSet: true}
}

func (v NullableListProvisioningLicenses200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListProvisioningLicenses200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


