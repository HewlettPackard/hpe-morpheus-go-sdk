/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the Search200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Search200Response{}

// Search200Response struct for Search200Response
type Search200Response struct {
	Hits []Search200ResponseHitsInner `json:"hits,omitempty"`
	Query *string `json:"query,omitempty"`
	Took *int64 `json:"took,omitempty"`
	Meta *Search200ResponseMeta `json:"meta,omitempty"`
}

// NewSearch200Response instantiates a new Search200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearch200Response() *Search200Response {
	this := Search200Response{}
	return &this
}

// NewSearch200ResponseWithDefaults instantiates a new Search200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearch200ResponseWithDefaults() *Search200Response {
	this := Search200Response{}
	return &this
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *Search200Response) GetHits() []Search200ResponseHitsInner {
	if o == nil || IsNil(o.Hits) {
		var ret []Search200ResponseHitsInner
		return ret
	}
	return o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search200Response) GetHitsOk() ([]Search200ResponseHitsInner, bool) {
	if o == nil || IsNil(o.Hits) {
		return nil, false
	}
	return o.Hits, true
}

// IsSetHits returns a boolean if a field has been set.
func (o *Search200Response) IsSetHits() bool {
	if o != nil && !IsNil(o.Hits) {
		return true
	}

	return false
}

// SetHits gets a reference to the given []Search200ResponseHitsInner and assigns it to the Hits field.
func (o *Search200Response) SetHits(v []Search200ResponseHitsInner) {
	o.Hits = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Search200Response) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search200Response) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// IsSetQuery returns a boolean if a field has been set.
func (o *Search200Response) IsSetQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *Search200Response) SetQuery(v string) {
	o.Query = &v
}

// GetTook returns the Took field value if set, zero value otherwise.
func (o *Search200Response) GetTook() int64 {
	if o == nil || IsNil(o.Took) {
		var ret int64
		return ret
	}
	return *o.Took
}

// GetTookOk returns a tuple with the Took field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search200Response) GetTookOk() (*int64, bool) {
	if o == nil || IsNil(o.Took) {
		return nil, false
	}
	return o.Took, true
}

// IsSetTook returns a boolean if a field has been set.
func (o *Search200Response) IsSetTook() bool {
	if o != nil && !IsNil(o.Took) {
		return true
	}

	return false
}

// SetTook gets a reference to the given int64 and assigns it to the Took field.
func (o *Search200Response) SetTook(v int64) {
	o.Took = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Search200Response) GetMeta() Search200ResponseMeta {
	if o == nil || IsNil(o.Meta) {
		var ret Search200ResponseMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Search200Response) GetMetaOk() (*Search200ResponseMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// IsSetMeta returns a boolean if a field has been set.
func (o *Search200Response) IsSetMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Search200ResponseMeta and assigns it to the Meta field.
func (o *Search200Response) SetMeta(v Search200ResponseMeta) {
	o.Meta = &v
}

func (o Search200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Search200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hits) {
		toSerialize["hits"] = o.Hits
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Took) {
		toSerialize["took"] = o.Took
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableSearch200Response struct {
	value *Search200Response
	isSet bool
}

func (v NullableSearch200Response) Get() *Search200Response {
	return v.value
}

func (v *NullableSearch200Response) Set(val *Search200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSearch200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSearch200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearch200Response(val *Search200Response) *NullableSearch200Response {
	return &NullableSearch200Response{value: val, isSet: true}
}

func (v NullableSearch200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearch200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


