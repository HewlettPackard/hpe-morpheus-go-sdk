/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ImportContainerActionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportContainerActionRequest{}

// ImportContainerActionRequest struct for ImportContainerActionRequest
type ImportContainerActionRequest struct {
	// Optional storage provider to use.
	StorageProviderId *int64 `json:"storageProviderId,omitempty"`
}

// NewImportContainerActionRequest instantiates a new ImportContainerActionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportContainerActionRequest() *ImportContainerActionRequest {
	this := ImportContainerActionRequest{}
	return &this
}

// NewImportContainerActionRequestWithDefaults instantiates a new ImportContainerActionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportContainerActionRequestWithDefaults() *ImportContainerActionRequest {
	this := ImportContainerActionRequest{}
	return &this
}

// GetStorageProviderId returns the StorageProviderId field value if set, zero value otherwise.
func (o *ImportContainerActionRequest) GetStorageProviderId() int64 {
	if o == nil || IsNil(o.StorageProviderId) {
		var ret int64
		return ret
	}
	return *o.StorageProviderId
}

// GetStorageProviderIdOk returns a tuple with the StorageProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportContainerActionRequest) GetStorageProviderIdOk() (*int64, bool) {
	if o == nil || IsNil(o.StorageProviderId) {
		return nil, false
	}
	return o.StorageProviderId, true
}

// IsSetStorageProviderId returns a boolean if a field has been set.
func (o *ImportContainerActionRequest) IsSetStorageProviderId() bool {
	if o != nil && !IsNil(o.StorageProviderId) {
		return true
	}

	return false
}

// SetStorageProviderId gets a reference to the given int64 and assigns it to the StorageProviderId field.
func (o *ImportContainerActionRequest) SetStorageProviderId(v int64) {
	o.StorageProviderId = &v
}

func (o ImportContainerActionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportContainerActionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StorageProviderId) {
		toSerialize["storageProviderId"] = o.StorageProviderId
	}
	return toSerialize, nil
}

type NullableImportContainerActionRequest struct {
	value *ImportContainerActionRequest
	isSet bool
}

func (v NullableImportContainerActionRequest) Get() *ImportContainerActionRequest {
	return v.value
}

func (v *NullableImportContainerActionRequest) Set(val *ImportContainerActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportContainerActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportContainerActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportContainerActionRequest(val *ImportContainerActionRequest) *NullableImportContainerActionRequest {
	return &NullableImportContainerActionRequest{value: val, isSet: true}
}

func (v NullableImportContainerActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportContainerActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


