/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the GetEnvironments200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEnvironments200Response{}

// GetEnvironments200Response struct for GetEnvironments200Response
type GetEnvironments200Response struct {
	Environment *ListEnvironments200ResponseAllOfEnvironmentsInner `json:"environment,omitempty"`
}

// NewGetEnvironments200Response instantiates a new GetEnvironments200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEnvironments200Response() *GetEnvironments200Response {
	this := GetEnvironments200Response{}
	return &this
}

// NewGetEnvironments200ResponseWithDefaults instantiates a new GetEnvironments200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEnvironments200ResponseWithDefaults() *GetEnvironments200Response {
	this := GetEnvironments200Response{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *GetEnvironments200Response) GetEnvironment() ListEnvironments200ResponseAllOfEnvironmentsInner {
	if o == nil || IsNil(o.Environment) {
		var ret ListEnvironments200ResponseAllOfEnvironmentsInner
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEnvironments200Response) GetEnvironmentOk() (*ListEnvironments200ResponseAllOfEnvironmentsInner, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// IsSetEnvironment returns a boolean if a field has been set.
func (o *GetEnvironments200Response) IsSetEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ListEnvironments200ResponseAllOfEnvironmentsInner and assigns it to the Environment field.
func (o *GetEnvironments200Response) SetEnvironment(v ListEnvironments200ResponseAllOfEnvironmentsInner) {
	o.Environment = &v
}

func (o GetEnvironments200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEnvironments200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	return toSerialize, nil
}

type NullableGetEnvironments200Response struct {
	value *GetEnvironments200Response
	isSet bool
}

func (v NullableGetEnvironments200Response) Get() *GetEnvironments200Response {
	return v.value
}

func (v *NullableGetEnvironments200Response) Set(val *GetEnvironments200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEnvironments200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEnvironments200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEnvironments200Response(val *GetEnvironments200Response) *NullableGetEnvironments200Response {
	return &NullableGetEnvironments200Response{value: val, isSet: true}
}

func (v NullableGetEnvironments200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEnvironments200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


