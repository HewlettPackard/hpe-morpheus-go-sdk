/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the GetNetworkFloatingIp200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetNetworkFloatingIp200Response{}

// GetNetworkFloatingIp200Response struct for GetNetworkFloatingIp200Response
type GetNetworkFloatingIp200Response struct {
	NetworkFloatingIp *AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIp `json:"networkFloatingIp,omitempty"`
}

// NewGetNetworkFloatingIp200Response instantiates a new GetNetworkFloatingIp200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNetworkFloatingIp200Response() *GetNetworkFloatingIp200Response {
	this := GetNetworkFloatingIp200Response{}
	return &this
}

// NewGetNetworkFloatingIp200ResponseWithDefaults instantiates a new GetNetworkFloatingIp200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNetworkFloatingIp200ResponseWithDefaults() *GetNetworkFloatingIp200Response {
	this := GetNetworkFloatingIp200Response{}
	return &this
}

// GetNetworkFloatingIp returns the NetworkFloatingIp field value if set, zero value otherwise.
func (o *GetNetworkFloatingIp200Response) GetNetworkFloatingIp() AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIp {
	if o == nil || IsNil(o.NetworkFloatingIp) {
		var ret AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIp
		return ret
	}
	return *o.NetworkFloatingIp
}

// GetNetworkFloatingIpOk returns a tuple with the NetworkFloatingIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetNetworkFloatingIp200Response) GetNetworkFloatingIpOk() (*AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIp, bool) {
	if o == nil || IsNil(o.NetworkFloatingIp) {
		return nil, false
	}
	return o.NetworkFloatingIp, true
}

// IsSetNetworkFloatingIp returns a boolean if a field has been set.
func (o *GetNetworkFloatingIp200Response) IsSetNetworkFloatingIp() bool {
	if o != nil && !IsNil(o.NetworkFloatingIp) {
		return true
	}

	return false
}

// SetNetworkFloatingIp gets a reference to the given AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIp and assigns it to the NetworkFloatingIp field.
func (o *GetNetworkFloatingIp200Response) SetNetworkFloatingIp(v AllocateNetworkFloatingIp200ResponseAllOfNetworkFloatingIp) {
	o.NetworkFloatingIp = &v
}

func (o GetNetworkFloatingIp200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetNetworkFloatingIp200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkFloatingIp) {
		toSerialize["networkFloatingIp"] = o.NetworkFloatingIp
	}
	return toSerialize, nil
}

type NullableGetNetworkFloatingIp200Response struct {
	value *GetNetworkFloatingIp200Response
	isSet bool
}

func (v NullableGetNetworkFloatingIp200Response) Get() *GetNetworkFloatingIp200Response {
	return v.value
}

func (v *NullableGetNetworkFloatingIp200Response) Set(val *GetNetworkFloatingIp200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNetworkFloatingIp200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNetworkFloatingIp200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNetworkFloatingIp200Response(val *GetNetworkFloatingIp200Response) *NullableGetNetworkFloatingIp200Response {
	return &NullableGetNetworkFloatingIp200Response{value: val, isSet: true}
}

func (v NullableGetNetworkFloatingIp200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNetworkFloatingIp200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


