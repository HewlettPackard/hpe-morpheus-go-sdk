/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AppState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppState{}

// AppState struct for AppState
type AppState struct {
	Workloads []GetAppState200ResponseAllOfWorkloadsInner `json:"workloads,omitempty"`
	IacDrift *bool `json:"iacDrift,omitempty"`
	PlanResources []map[string]interface{} `json:"planResources,omitempty"`
	Specs []GetAppState200ResponseAllOfSpecsInner `json:"specs,omitempty"`
	StateData *string `json:"stateData,omitempty"`
	PlanData *string `json:"planData,omitempty"`
	Input *GetAppState200ResponseAllOfInput `json:"input,omitempty"`
	Output *GetAppState200ResponseAllOfOutput `json:"output,omitempty"`
}

// NewAppState instantiates a new AppState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppState() *AppState {
	this := AppState{}
	return &this
}

// NewAppStateWithDefaults instantiates a new AppState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppStateWithDefaults() *AppState {
	this := AppState{}
	return &this
}

// GetWorkloads returns the Workloads field value if set, zero value otherwise.
func (o *AppState) GetWorkloads() []GetAppState200ResponseAllOfWorkloadsInner {
	if o == nil || IsNil(o.Workloads) {
		var ret []GetAppState200ResponseAllOfWorkloadsInner
		return ret
	}
	return o.Workloads
}

// GetWorkloadsOk returns a tuple with the Workloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppState) GetWorkloadsOk() ([]GetAppState200ResponseAllOfWorkloadsInner, bool) {
	if o == nil || IsNil(o.Workloads) {
		return nil, false
	}
	return o.Workloads, true
}

// IsSetWorkloads returns a boolean if a field has been set.
func (o *AppState) IsSetWorkloads() bool {
	if o != nil && !IsNil(o.Workloads) {
		return true
	}

	return false
}

// SetWorkloads gets a reference to the given []GetAppState200ResponseAllOfWorkloadsInner and assigns it to the Workloads field.
func (o *AppState) SetWorkloads(v []GetAppState200ResponseAllOfWorkloadsInner) {
	o.Workloads = v
}

// GetIacDrift returns the IacDrift field value if set, zero value otherwise.
func (o *AppState) GetIacDrift() bool {
	if o == nil || IsNil(o.IacDrift) {
		var ret bool
		return ret
	}
	return *o.IacDrift
}

// GetIacDriftOk returns a tuple with the IacDrift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppState) GetIacDriftOk() (*bool, bool) {
	if o == nil || IsNil(o.IacDrift) {
		return nil, false
	}
	return o.IacDrift, true
}

// IsSetIacDrift returns a boolean if a field has been set.
func (o *AppState) IsSetIacDrift() bool {
	if o != nil && !IsNil(o.IacDrift) {
		return true
	}

	return false
}

// SetIacDrift gets a reference to the given bool and assigns it to the IacDrift field.
func (o *AppState) SetIacDrift(v bool) {
	o.IacDrift = &v
}

// GetPlanResources returns the PlanResources field value if set, zero value otherwise.
func (o *AppState) GetPlanResources() []map[string]interface{} {
	if o == nil || IsNil(o.PlanResources) {
		var ret []map[string]interface{}
		return ret
	}
	return o.PlanResources
}

// GetPlanResourcesOk returns a tuple with the PlanResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppState) GetPlanResourcesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.PlanResources) {
		return nil, false
	}
	return o.PlanResources, true
}

// IsSetPlanResources returns a boolean if a field has been set.
func (o *AppState) IsSetPlanResources() bool {
	if o != nil && !IsNil(o.PlanResources) {
		return true
	}

	return false
}

// SetPlanResources gets a reference to the given []map[string]interface{} and assigns it to the PlanResources field.
func (o *AppState) SetPlanResources(v []map[string]interface{}) {
	o.PlanResources = v
}

// GetSpecs returns the Specs field value if set, zero value otherwise.
func (o *AppState) GetSpecs() []GetAppState200ResponseAllOfSpecsInner {
	if o == nil || IsNil(o.Specs) {
		var ret []GetAppState200ResponseAllOfSpecsInner
		return ret
	}
	return o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppState) GetSpecsOk() ([]GetAppState200ResponseAllOfSpecsInner, bool) {
	if o == nil || IsNil(o.Specs) {
		return nil, false
	}
	return o.Specs, true
}

// IsSetSpecs returns a boolean if a field has been set.
func (o *AppState) IsSetSpecs() bool {
	if o != nil && !IsNil(o.Specs) {
		return true
	}

	return false
}

// SetSpecs gets a reference to the given []GetAppState200ResponseAllOfSpecsInner and assigns it to the Specs field.
func (o *AppState) SetSpecs(v []GetAppState200ResponseAllOfSpecsInner) {
	o.Specs = v
}

// GetStateData returns the StateData field value if set, zero value otherwise.
func (o *AppState) GetStateData() string {
	if o == nil || IsNil(o.StateData) {
		var ret string
		return ret
	}
	return *o.StateData
}

// GetStateDataOk returns a tuple with the StateData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppState) GetStateDataOk() (*string, bool) {
	if o == nil || IsNil(o.StateData) {
		return nil, false
	}
	return o.StateData, true
}

// IsSetStateData returns a boolean if a field has been set.
func (o *AppState) IsSetStateData() bool {
	if o != nil && !IsNil(o.StateData) {
		return true
	}

	return false
}

// SetStateData gets a reference to the given string and assigns it to the StateData field.
func (o *AppState) SetStateData(v string) {
	o.StateData = &v
}

// GetPlanData returns the PlanData field value if set, zero value otherwise.
func (o *AppState) GetPlanData() string {
	if o == nil || IsNil(o.PlanData) {
		var ret string
		return ret
	}
	return *o.PlanData
}

// GetPlanDataOk returns a tuple with the PlanData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppState) GetPlanDataOk() (*string, bool) {
	if o == nil || IsNil(o.PlanData) {
		return nil, false
	}
	return o.PlanData, true
}

// IsSetPlanData returns a boolean if a field has been set.
func (o *AppState) IsSetPlanData() bool {
	if o != nil && !IsNil(o.PlanData) {
		return true
	}

	return false
}

// SetPlanData gets a reference to the given string and assigns it to the PlanData field.
func (o *AppState) SetPlanData(v string) {
	o.PlanData = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *AppState) GetInput() GetAppState200ResponseAllOfInput {
	if o == nil || IsNil(o.Input) {
		var ret GetAppState200ResponseAllOfInput
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppState) GetInputOk() (*GetAppState200ResponseAllOfInput, bool) {
	if o == nil || IsNil(o.Input) {
		return nil, false
	}
	return o.Input, true
}

// IsSetInput returns a boolean if a field has been set.
func (o *AppState) IsSetInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given GetAppState200ResponseAllOfInput and assigns it to the Input field.
func (o *AppState) SetInput(v GetAppState200ResponseAllOfInput) {
	o.Input = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *AppState) GetOutput() GetAppState200ResponseAllOfOutput {
	if o == nil || IsNil(o.Output) {
		var ret GetAppState200ResponseAllOfOutput
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppState) GetOutputOk() (*GetAppState200ResponseAllOfOutput, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// IsSetOutput returns a boolean if a field has been set.
func (o *AppState) IsSetOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given GetAppState200ResponseAllOfOutput and assigns it to the Output field.
func (o *AppState) SetOutput(v GetAppState200ResponseAllOfOutput) {
	o.Output = &v
}

func (o AppState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Workloads) {
		toSerialize["workloads"] = o.Workloads
	}
	if !IsNil(o.IacDrift) {
		toSerialize["iacDrift"] = o.IacDrift
	}
	if !IsNil(o.PlanResources) {
		toSerialize["planResources"] = o.PlanResources
	}
	if !IsNil(o.Specs) {
		toSerialize["specs"] = o.Specs
	}
	if !IsNil(o.StateData) {
		toSerialize["stateData"] = o.StateData
	}
	if !IsNil(o.PlanData) {
		toSerialize["planData"] = o.PlanData
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	return toSerialize, nil
}

type NullableAppState struct {
	value *AppState
	isSet bool
}

func (v NullableAppState) Get() *AppState {
	return v.value
}

func (v *NullableAppState) Set(val *AppState) {
	v.value = val
	v.isSet = true
}

func (v NullableAppState) IsSet() bool {
	return v.isSet
}

func (v *NullableAppState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppState(val *AppState) *NullableAppState {
	return &NullableAppState{value: val, isSet: true}
}

func (v NullableAppState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


