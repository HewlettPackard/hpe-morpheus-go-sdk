/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the UpdateGroupsZonesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateGroupsZonesRequest{}

// UpdateGroupsZonesRequest struct for UpdateGroupsZonesRequest
type UpdateGroupsZonesRequest struct {
	Group UpdateGroupsZonesRequestGroup `json:"group"`
	AdditionalProperties map[string]interface{}
}

type _UpdateGroupsZonesRequest UpdateGroupsZonesRequest

// NewUpdateGroupsZonesRequest instantiates a new UpdateGroupsZonesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGroupsZonesRequest(group UpdateGroupsZonesRequestGroup) *UpdateGroupsZonesRequest {
	this := UpdateGroupsZonesRequest{}
	this.Group = group
	return &this
}

// NewUpdateGroupsZonesRequestWithDefaults instantiates a new UpdateGroupsZonesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGroupsZonesRequestWithDefaults() *UpdateGroupsZonesRequest {
	this := UpdateGroupsZonesRequest{}
	return &this
}

// GetGroup returns the Group field value
func (o *UpdateGroupsZonesRequest) GetGroup() UpdateGroupsZonesRequestGroup {
	if o == nil {
		var ret UpdateGroupsZonesRequestGroup
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *UpdateGroupsZonesRequest) GetGroupOk() (*UpdateGroupsZonesRequestGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *UpdateGroupsZonesRequest) SetGroup(v UpdateGroupsZonesRequestGroup) {
	o.Group = v
}

func (o UpdateGroupsZonesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateGroupsZonesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group"] = o.Group

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateGroupsZonesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateGroupsZonesRequest := _UpdateGroupsZonesRequest{}

	err = json.Unmarshal(data, &varUpdateGroupsZonesRequest)

	if err != nil {
		return err
	}

	*o = UpdateGroupsZonesRequest(varUpdateGroupsZonesRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "group")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateGroupsZonesRequest struct {
	value *UpdateGroupsZonesRequest
	isSet bool
}

func (v NullableUpdateGroupsZonesRequest) Get() *UpdateGroupsZonesRequest {
	return v.value
}

func (v *NullableUpdateGroupsZonesRequest) Set(val *UpdateGroupsZonesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGroupsZonesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGroupsZonesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGroupsZonesRequest(val *UpdateGroupsZonesRequest) *NullableUpdateGroupsZonesRequest {
	return &NullableUpdateGroupsZonesRequest{value: val, isSet: true}
}

func (v NullableUpdateGroupsZonesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGroupsZonesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


