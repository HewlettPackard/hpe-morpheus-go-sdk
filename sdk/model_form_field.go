/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FormField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormField{}

// FormField struct for FormField
type FormField struct {
	// The ID of the input, include this to use an existing input or to update an existing form input record instead of creating a new one.
	Id *int64 `json:"id,omitempty"`
	// The code of the option type as a globally unique identifier. By default a UUID will be used.
	Code *string `json:"code,omitempty"`
	// The name of the option type for handy reference. By default a UUID will be used.
	Name *string `json:"name,omitempty"`
	// Short description of the option type
	Description *string `json:"description,omitempty"`
	// Field Name, the name for user input. This along with fieldContext determines the configuration property name.  The property key for when posting this option type to a JSON POST request
	FieldName string `json:"fieldName"`
	// Type, the type of input. eg. text, checkbox, select, etc.
	Type *string `json:"type,omitempty"`
	// Field Label, the label for user input.
	FieldLabel string `json:"fieldLabel"`
	// Localized Label, i18n code for the label
	FieldCode *string `json:"fieldCode,omitempty"`
	// Any placeholder text when nothing is yet entered
	PlaceHolder *string `json:"placeHolder,omitempty"`
	// This is the explaination of the input that shows typically underneath the option
	HelpBlock *string `json:"helpBlock,omitempty"`
	// Localized Help Block, i18n code for the help block
	HelpBlockFieldCode *string `json:"helpBlockFieldCode,omitempty"`
	// The default value if no user entry is specified. This value should be passed to the desired JSON Map if nothing else is entered
	DefaultValue *string `json:"defaultValue,omitempty"`
	// Is this field entry required for the request
	Required *bool `json:"required,omitempty"`
	// Export as Tag
	ExportMeta *bool `json:"exportMeta,omitempty"`
	// Used primarily on tasks and workflows. Basically wether or not the field can be overridden optionally when the object is run
	Editable *bool `json:"editable,omitempty"`
	OptionList *AddOptionTypeRequestOptionTypeOptionList `json:"optionList,omitempty"`
	// Display Value On Details
	DisplayValueOnDetails *bool `json:"displayValueOnDetails,omitempty"`
	// Locked
	IsLocked *bool `json:"isLocked,omitempty"`
	// Hidden
	IsHidden *bool `json:"isHidden,omitempty"`
	// Exclude From Search
	ExcludeFromSearch *bool `json:"excludeFromSearch,omitempty"`
	// A fieldName that will trigger reloading this input
	DependsOnCode *string `json:"dependsOnCode,omitempty"`
	// A fieldName that will trigger visibility of this input
	VisibleOnCode *string `json:"visibleOnCode,omitempty"`
	// Verify Pattern, A regexp string that validates the input, use (?i) to make the matcher case insensitive
	VerifyPattern *string `json:"verifyPattern,omitempty"`
	// A fieldName that will trigger required attribute of this input
	RequireOnCode *string `json:"requireOnCode,omitempty"`
}

type _FormField FormField

// NewFormField instantiates a new FormField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormField(fieldName string, fieldLabel string) *FormField {
	this := FormField{}
	this.FieldName = fieldName
	var type_ string = "text"
	this.Type = &type_
	this.FieldLabel = fieldLabel
	var required bool = false
	this.Required = &required
	var exportMeta bool = false
	this.ExportMeta = &exportMeta
	var editable bool = false
	this.Editable = &editable
	var displayValueOnDetails bool = false
	this.DisplayValueOnDetails = &displayValueOnDetails
	var isLocked bool = false
	this.IsLocked = &isLocked
	var isHidden bool = false
	this.IsHidden = &isHidden
	var excludeFromSearch bool = false
	this.ExcludeFromSearch = &excludeFromSearch
	return &this
}

// NewFormFieldWithDefaults instantiates a new FormField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormFieldWithDefaults() *FormField {
	this := FormField{}
	var type_ string = "text"
	this.Type = &type_
	var required bool = false
	this.Required = &required
	var exportMeta bool = false
	this.ExportMeta = &exportMeta
	var editable bool = false
	this.Editable = &editable
	var displayValueOnDetails bool = false
	this.DisplayValueOnDetails = &displayValueOnDetails
	var isLocked bool = false
	this.IsLocked = &isLocked
	var isHidden bool = false
	this.IsHidden = &isHidden
	var excludeFromSearch bool = false
	this.ExcludeFromSearch = &excludeFromSearch
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FormField) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *FormField) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *FormField) SetId(v int64) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *FormField) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// IsSetCode returns a boolean if a field has been set.
func (o *FormField) IsSetCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *FormField) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FormField) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *FormField) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FormField) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FormField) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *FormField) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FormField) SetDescription(v string) {
	o.Description = &v
}

// GetFieldName returns the FieldName field value
func (o *FormField) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *FormField) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *FormField) SetFieldName(v string) {
	o.FieldName = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FormField) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// IsSetType returns a boolean if a field has been set.
func (o *FormField) IsSetType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FormField) SetType(v string) {
	o.Type = &v
}

// GetFieldLabel returns the FieldLabel field value
func (o *FormField) GetFieldLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldLabel
}

// GetFieldLabelOk returns a tuple with the FieldLabel field value
// and a boolean to check if the value has been set.
func (o *FormField) GetFieldLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldLabel, true
}

// SetFieldLabel sets field value
func (o *FormField) SetFieldLabel(v string) {
	o.FieldLabel = v
}

// GetFieldCode returns the FieldCode field value if set, zero value otherwise.
func (o *FormField) GetFieldCode() string {
	if o == nil || IsNil(o.FieldCode) {
		var ret string
		return ret
	}
	return *o.FieldCode
}

// GetFieldCodeOk returns a tuple with the FieldCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetFieldCodeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldCode) {
		return nil, false
	}
	return o.FieldCode, true
}

// IsSetFieldCode returns a boolean if a field has been set.
func (o *FormField) IsSetFieldCode() bool {
	if o != nil && !IsNil(o.FieldCode) {
		return true
	}

	return false
}

// SetFieldCode gets a reference to the given string and assigns it to the FieldCode field.
func (o *FormField) SetFieldCode(v string) {
	o.FieldCode = &v
}

// GetPlaceHolder returns the PlaceHolder field value if set, zero value otherwise.
func (o *FormField) GetPlaceHolder() string {
	if o == nil || IsNil(o.PlaceHolder) {
		var ret string
		return ret
	}
	return *o.PlaceHolder
}

// GetPlaceHolderOk returns a tuple with the PlaceHolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetPlaceHolderOk() (*string, bool) {
	if o == nil || IsNil(o.PlaceHolder) {
		return nil, false
	}
	return o.PlaceHolder, true
}

// IsSetPlaceHolder returns a boolean if a field has been set.
func (o *FormField) IsSetPlaceHolder() bool {
	if o != nil && !IsNil(o.PlaceHolder) {
		return true
	}

	return false
}

// SetPlaceHolder gets a reference to the given string and assigns it to the PlaceHolder field.
func (o *FormField) SetPlaceHolder(v string) {
	o.PlaceHolder = &v
}

// GetHelpBlock returns the HelpBlock field value if set, zero value otherwise.
func (o *FormField) GetHelpBlock() string {
	if o == nil || IsNil(o.HelpBlock) {
		var ret string
		return ret
	}
	return *o.HelpBlock
}

// GetHelpBlockOk returns a tuple with the HelpBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetHelpBlockOk() (*string, bool) {
	if o == nil || IsNil(o.HelpBlock) {
		return nil, false
	}
	return o.HelpBlock, true
}

// IsSetHelpBlock returns a boolean if a field has been set.
func (o *FormField) IsSetHelpBlock() bool {
	if o != nil && !IsNil(o.HelpBlock) {
		return true
	}

	return false
}

// SetHelpBlock gets a reference to the given string and assigns it to the HelpBlock field.
func (o *FormField) SetHelpBlock(v string) {
	o.HelpBlock = &v
}

// GetHelpBlockFieldCode returns the HelpBlockFieldCode field value if set, zero value otherwise.
func (o *FormField) GetHelpBlockFieldCode() string {
	if o == nil || IsNil(o.HelpBlockFieldCode) {
		var ret string
		return ret
	}
	return *o.HelpBlockFieldCode
}

// GetHelpBlockFieldCodeOk returns a tuple with the HelpBlockFieldCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetHelpBlockFieldCodeOk() (*string, bool) {
	if o == nil || IsNil(o.HelpBlockFieldCode) {
		return nil, false
	}
	return o.HelpBlockFieldCode, true
}

// IsSetHelpBlockFieldCode returns a boolean if a field has been set.
func (o *FormField) IsSetHelpBlockFieldCode() bool {
	if o != nil && !IsNil(o.HelpBlockFieldCode) {
		return true
	}

	return false
}

// SetHelpBlockFieldCode gets a reference to the given string and assigns it to the HelpBlockFieldCode field.
func (o *FormField) SetHelpBlockFieldCode(v string) {
	o.HelpBlockFieldCode = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *FormField) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// IsSetDefaultValue returns a boolean if a field has been set.
func (o *FormField) IsSetDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *FormField) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *FormField) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// IsSetRequired returns a boolean if a field has been set.
func (o *FormField) IsSetRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *FormField) SetRequired(v bool) {
	o.Required = &v
}

// GetExportMeta returns the ExportMeta field value if set, zero value otherwise.
func (o *FormField) GetExportMeta() bool {
	if o == nil || IsNil(o.ExportMeta) {
		var ret bool
		return ret
	}
	return *o.ExportMeta
}

// GetExportMetaOk returns a tuple with the ExportMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetExportMetaOk() (*bool, bool) {
	if o == nil || IsNil(o.ExportMeta) {
		return nil, false
	}
	return o.ExportMeta, true
}

// IsSetExportMeta returns a boolean if a field has been set.
func (o *FormField) IsSetExportMeta() bool {
	if o != nil && !IsNil(o.ExportMeta) {
		return true
	}

	return false
}

// SetExportMeta gets a reference to the given bool and assigns it to the ExportMeta field.
func (o *FormField) SetExportMeta(v bool) {
	o.ExportMeta = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *FormField) GetEditable() bool {
	if o == nil || IsNil(o.Editable) {
		var ret bool
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.Editable) {
		return nil, false
	}
	return o.Editable, true
}

// IsSetEditable returns a boolean if a field has been set.
func (o *FormField) IsSetEditable() bool {
	if o != nil && !IsNil(o.Editable) {
		return true
	}

	return false
}

// SetEditable gets a reference to the given bool and assigns it to the Editable field.
func (o *FormField) SetEditable(v bool) {
	o.Editable = &v
}

// GetOptionList returns the OptionList field value if set, zero value otherwise.
func (o *FormField) GetOptionList() AddOptionTypeRequestOptionTypeOptionList {
	if o == nil || IsNil(o.OptionList) {
		var ret AddOptionTypeRequestOptionTypeOptionList
		return ret
	}
	return *o.OptionList
}

// GetOptionListOk returns a tuple with the OptionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetOptionListOk() (*AddOptionTypeRequestOptionTypeOptionList, bool) {
	if o == nil || IsNil(o.OptionList) {
		return nil, false
	}
	return o.OptionList, true
}

// IsSetOptionList returns a boolean if a field has been set.
func (o *FormField) IsSetOptionList() bool {
	if o != nil && !IsNil(o.OptionList) {
		return true
	}

	return false
}

// SetOptionList gets a reference to the given AddOptionTypeRequestOptionTypeOptionList and assigns it to the OptionList field.
func (o *FormField) SetOptionList(v AddOptionTypeRequestOptionTypeOptionList) {
	o.OptionList = &v
}

// GetDisplayValueOnDetails returns the DisplayValueOnDetails field value if set, zero value otherwise.
func (o *FormField) GetDisplayValueOnDetails() bool {
	if o == nil || IsNil(o.DisplayValueOnDetails) {
		var ret bool
		return ret
	}
	return *o.DisplayValueOnDetails
}

// GetDisplayValueOnDetailsOk returns a tuple with the DisplayValueOnDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetDisplayValueOnDetailsOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayValueOnDetails) {
		return nil, false
	}
	return o.DisplayValueOnDetails, true
}

// IsSetDisplayValueOnDetails returns a boolean if a field has been set.
func (o *FormField) IsSetDisplayValueOnDetails() bool {
	if o != nil && !IsNil(o.DisplayValueOnDetails) {
		return true
	}

	return false
}

// SetDisplayValueOnDetails gets a reference to the given bool and assigns it to the DisplayValueOnDetails field.
func (o *FormField) SetDisplayValueOnDetails(v bool) {
	o.DisplayValueOnDetails = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *FormField) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// IsSetIsLocked returns a boolean if a field has been set.
func (o *FormField) IsSetIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *FormField) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *FormField) GetIsHidden() bool {
	if o == nil || IsNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetIsHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHidden) {
		return nil, false
	}
	return o.IsHidden, true
}

// IsSetIsHidden returns a boolean if a field has been set.
func (o *FormField) IsSetIsHidden() bool {
	if o != nil && !IsNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *FormField) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetExcludeFromSearch returns the ExcludeFromSearch field value if set, zero value otherwise.
func (o *FormField) GetExcludeFromSearch() bool {
	if o == nil || IsNil(o.ExcludeFromSearch) {
		var ret bool
		return ret
	}
	return *o.ExcludeFromSearch
}

// GetExcludeFromSearchOk returns a tuple with the ExcludeFromSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetExcludeFromSearchOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeFromSearch) {
		return nil, false
	}
	return o.ExcludeFromSearch, true
}

// IsSetExcludeFromSearch returns a boolean if a field has been set.
func (o *FormField) IsSetExcludeFromSearch() bool {
	if o != nil && !IsNil(o.ExcludeFromSearch) {
		return true
	}

	return false
}

// SetExcludeFromSearch gets a reference to the given bool and assigns it to the ExcludeFromSearch field.
func (o *FormField) SetExcludeFromSearch(v bool) {
	o.ExcludeFromSearch = &v
}

// GetDependsOnCode returns the DependsOnCode field value if set, zero value otherwise.
func (o *FormField) GetDependsOnCode() string {
	if o == nil || IsNil(o.DependsOnCode) {
		var ret string
		return ret
	}
	return *o.DependsOnCode
}

// GetDependsOnCodeOk returns a tuple with the DependsOnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetDependsOnCodeOk() (*string, bool) {
	if o == nil || IsNil(o.DependsOnCode) {
		return nil, false
	}
	return o.DependsOnCode, true
}

// IsSetDependsOnCode returns a boolean if a field has been set.
func (o *FormField) IsSetDependsOnCode() bool {
	if o != nil && !IsNil(o.DependsOnCode) {
		return true
	}

	return false
}

// SetDependsOnCode gets a reference to the given string and assigns it to the DependsOnCode field.
func (o *FormField) SetDependsOnCode(v string) {
	o.DependsOnCode = &v
}

// GetVisibleOnCode returns the VisibleOnCode field value if set, zero value otherwise.
func (o *FormField) GetVisibleOnCode() string {
	if o == nil || IsNil(o.VisibleOnCode) {
		var ret string
		return ret
	}
	return *o.VisibleOnCode
}

// GetVisibleOnCodeOk returns a tuple with the VisibleOnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetVisibleOnCodeOk() (*string, bool) {
	if o == nil || IsNil(o.VisibleOnCode) {
		return nil, false
	}
	return o.VisibleOnCode, true
}

// IsSetVisibleOnCode returns a boolean if a field has been set.
func (o *FormField) IsSetVisibleOnCode() bool {
	if o != nil && !IsNil(o.VisibleOnCode) {
		return true
	}

	return false
}

// SetVisibleOnCode gets a reference to the given string and assigns it to the VisibleOnCode field.
func (o *FormField) SetVisibleOnCode(v string) {
	o.VisibleOnCode = &v
}

// GetVerifyPattern returns the VerifyPattern field value if set, zero value otherwise.
func (o *FormField) GetVerifyPattern() string {
	if o == nil || IsNil(o.VerifyPattern) {
		var ret string
		return ret
	}
	return *o.VerifyPattern
}

// GetVerifyPatternOk returns a tuple with the VerifyPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetVerifyPatternOk() (*string, bool) {
	if o == nil || IsNil(o.VerifyPattern) {
		return nil, false
	}
	return o.VerifyPattern, true
}

// IsSetVerifyPattern returns a boolean if a field has been set.
func (o *FormField) IsSetVerifyPattern() bool {
	if o != nil && !IsNil(o.VerifyPattern) {
		return true
	}

	return false
}

// SetVerifyPattern gets a reference to the given string and assigns it to the VerifyPattern field.
func (o *FormField) SetVerifyPattern(v string) {
	o.VerifyPattern = &v
}

// GetRequireOnCode returns the RequireOnCode field value if set, zero value otherwise.
func (o *FormField) GetRequireOnCode() string {
	if o == nil || IsNil(o.RequireOnCode) {
		var ret string
		return ret
	}
	return *o.RequireOnCode
}

// GetRequireOnCodeOk returns a tuple with the RequireOnCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormField) GetRequireOnCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RequireOnCode) {
		return nil, false
	}
	return o.RequireOnCode, true
}

// IsSetRequireOnCode returns a boolean if a field has been set.
func (o *FormField) IsSetRequireOnCode() bool {
	if o != nil && !IsNil(o.RequireOnCode) {
		return true
	}

	return false
}

// SetRequireOnCode gets a reference to the given string and assigns it to the RequireOnCode field.
func (o *FormField) SetRequireOnCode(v string) {
	o.RequireOnCode = &v
}

func (o FormField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["fieldName"] = o.FieldName
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["fieldLabel"] = o.FieldLabel
	if !IsNil(o.FieldCode) {
		toSerialize["fieldCode"] = o.FieldCode
	}
	if !IsNil(o.PlaceHolder) {
		toSerialize["placeHolder"] = o.PlaceHolder
	}
	if !IsNil(o.HelpBlock) {
		toSerialize["helpBlock"] = o.HelpBlock
	}
	if !IsNil(o.HelpBlockFieldCode) {
		toSerialize["helpBlockFieldCode"] = o.HelpBlockFieldCode
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.ExportMeta) {
		toSerialize["exportMeta"] = o.ExportMeta
	}
	if !IsNil(o.Editable) {
		toSerialize["editable"] = o.Editable
	}
	if !IsNil(o.OptionList) {
		toSerialize["optionList"] = o.OptionList
	}
	if !IsNil(o.DisplayValueOnDetails) {
		toSerialize["displayValueOnDetails"] = o.DisplayValueOnDetails
	}
	if !IsNil(o.IsLocked) {
		toSerialize["isLocked"] = o.IsLocked
	}
	if !IsNil(o.IsHidden) {
		toSerialize["isHidden"] = o.IsHidden
	}
	if !IsNil(o.ExcludeFromSearch) {
		toSerialize["excludeFromSearch"] = o.ExcludeFromSearch
	}
	if !IsNil(o.DependsOnCode) {
		toSerialize["dependsOnCode"] = o.DependsOnCode
	}
	if !IsNil(o.VisibleOnCode) {
		toSerialize["visibleOnCode"] = o.VisibleOnCode
	}
	if !IsNil(o.VerifyPattern) {
		toSerialize["verifyPattern"] = o.VerifyPattern
	}
	if !IsNil(o.RequireOnCode) {
		toSerialize["requireOnCode"] = o.RequireOnCode
	}
	return toSerialize, nil
}

func (o *FormField) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fieldName",
		"fieldLabel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFormField := _FormField{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFormField)

	if err != nil {
		return err
	}

	*o = FormField(varFormField)

	return err
}

type NullableFormField struct {
	value *FormField
	isSet bool
}

func (v NullableFormField) Get() *FormField {
	return v.value
}

func (v *NullableFormField) Set(val *FormField) {
	v.value = val
	v.isSet = true
}

func (v NullableFormField) IsSet() bool {
	return v.isSet
}

func (v *NullableFormField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormField(val *FormField) *NullableFormField {
	return &NullableFormField{value: val, isSet: true}
}

func (v NullableFormField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


