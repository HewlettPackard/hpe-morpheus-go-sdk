/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddOsTypeImageRequestOsTypeImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddOsTypeImageRequestOsTypeImage{}

// AddOsTypeImageRequestOsTypeImage struct for AddOsTypeImageRequestOsTypeImage
type AddOsTypeImageRequestOsTypeImage struct {
	// id of osType
	OsType int32 `json:"osType"`
	// id of virtualImage
	VirtualImage int32 `json:"virtualImage"`
	// id of provisionType
	ProvisionType *int32 `json:"provisionType,omitempty"`
	// id of cloud/zone
	Zone *int32 `json:"zone,omitempty"`
}

type _AddOsTypeImageRequestOsTypeImage AddOsTypeImageRequestOsTypeImage

// NewAddOsTypeImageRequestOsTypeImage instantiates a new AddOsTypeImageRequestOsTypeImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddOsTypeImageRequestOsTypeImage(osType int32, virtualImage int32) *AddOsTypeImageRequestOsTypeImage {
	this := AddOsTypeImageRequestOsTypeImage{}
	this.OsType = osType
	this.VirtualImage = virtualImage
	return &this
}

// NewAddOsTypeImageRequestOsTypeImageWithDefaults instantiates a new AddOsTypeImageRequestOsTypeImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddOsTypeImageRequestOsTypeImageWithDefaults() *AddOsTypeImageRequestOsTypeImage {
	this := AddOsTypeImageRequestOsTypeImage{}
	return &this
}

// GetOsType returns the OsType field value
func (o *AddOsTypeImageRequestOsTypeImage) GetOsType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value
// and a boolean to check if the value has been set.
func (o *AddOsTypeImageRequestOsTypeImage) GetOsTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OsType, true
}

// SetOsType sets field value
func (o *AddOsTypeImageRequestOsTypeImage) SetOsType(v int32) {
	o.OsType = v
}

// GetVirtualImage returns the VirtualImage field value
func (o *AddOsTypeImageRequestOsTypeImage) GetVirtualImage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VirtualImage
}

// GetVirtualImageOk returns a tuple with the VirtualImage field value
// and a boolean to check if the value has been set.
func (o *AddOsTypeImageRequestOsTypeImage) GetVirtualImageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VirtualImage, true
}

// SetVirtualImage sets field value
func (o *AddOsTypeImageRequestOsTypeImage) SetVirtualImage(v int32) {
	o.VirtualImage = v
}

// GetProvisionType returns the ProvisionType field value if set, zero value otherwise.
func (o *AddOsTypeImageRequestOsTypeImage) GetProvisionType() int32 {
	if o == nil || IsNil(o.ProvisionType) {
		var ret int32
		return ret
	}
	return *o.ProvisionType
}

// GetProvisionTypeOk returns a tuple with the ProvisionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOsTypeImageRequestOsTypeImage) GetProvisionTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.ProvisionType) {
		return nil, false
	}
	return o.ProvisionType, true
}

// IsSetProvisionType returns a boolean if a field has been set.
func (o *AddOsTypeImageRequestOsTypeImage) IsSetProvisionType() bool {
	if o != nil && !IsNil(o.ProvisionType) {
		return true
	}

	return false
}

// SetProvisionType gets a reference to the given int32 and assigns it to the ProvisionType field.
func (o *AddOsTypeImageRequestOsTypeImage) SetProvisionType(v int32) {
	o.ProvisionType = &v
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *AddOsTypeImageRequestOsTypeImage) GetZone() int32 {
	if o == nil || IsNil(o.Zone) {
		var ret int32
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddOsTypeImageRequestOsTypeImage) GetZoneOk() (*int32, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// IsSetZone returns a boolean if a field has been set.
func (o *AddOsTypeImageRequestOsTypeImage) IsSetZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given int32 and assigns it to the Zone field.
func (o *AddOsTypeImageRequestOsTypeImage) SetZone(v int32) {
	o.Zone = &v
}

func (o AddOsTypeImageRequestOsTypeImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddOsTypeImageRequestOsTypeImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["osType"] = o.OsType
	toSerialize["virtualImage"] = o.VirtualImage
	if !IsNil(o.ProvisionType) {
		toSerialize["provisionType"] = o.ProvisionType
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	return toSerialize, nil
}

func (o *AddOsTypeImageRequestOsTypeImage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"osType",
		"virtualImage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddOsTypeImageRequestOsTypeImage := _AddOsTypeImageRequestOsTypeImage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddOsTypeImageRequestOsTypeImage)

	if err != nil {
		return err
	}

	*o = AddOsTypeImageRequestOsTypeImage(varAddOsTypeImageRequestOsTypeImage)

	return err
}

type NullableAddOsTypeImageRequestOsTypeImage struct {
	value *AddOsTypeImageRequestOsTypeImage
	isSet bool
}

func (v NullableAddOsTypeImageRequestOsTypeImage) Get() *AddOsTypeImageRequestOsTypeImage {
	return v.value
}

func (v *NullableAddOsTypeImageRequestOsTypeImage) Set(val *AddOsTypeImageRequestOsTypeImage) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOsTypeImageRequestOsTypeImage) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOsTypeImageRequestOsTypeImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOsTypeImageRequestOsTypeImage(val *AddOsTypeImageRequestOsTypeImage) *NullableAddOsTypeImageRequestOsTypeImage {
	return &NullableAddOsTypeImageRequestOsTypeImage{value: val, isSet: true}
}

func (v NullableAddOsTypeImageRequestOsTypeImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOsTypeImageRequestOsTypeImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


