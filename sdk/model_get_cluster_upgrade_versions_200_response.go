/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the GetClusterUpgradeVersions200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetClusterUpgradeVersions200Response{}

// GetClusterUpgradeVersions200Response struct for GetClusterUpgradeVersions200Response
type GetClusterUpgradeVersions200Response struct {
	Versions []string `json:"versions,omitempty"`
	CurrentVersion *string `json:"currentVersion,omitempty"`
}

// NewGetClusterUpgradeVersions200Response instantiates a new GetClusterUpgradeVersions200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetClusterUpgradeVersions200Response() *GetClusterUpgradeVersions200Response {
	this := GetClusterUpgradeVersions200Response{}
	return &this
}

// NewGetClusterUpgradeVersions200ResponseWithDefaults instantiates a new GetClusterUpgradeVersions200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetClusterUpgradeVersions200ResponseWithDefaults() *GetClusterUpgradeVersions200Response {
	this := GetClusterUpgradeVersions200Response{}
	return &this
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *GetClusterUpgradeVersions200Response) GetVersions() []string {
	if o == nil || IsNil(o.Versions) {
		var ret []string
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetClusterUpgradeVersions200Response) GetVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// IsSetVersions returns a boolean if a field has been set.
func (o *GetClusterUpgradeVersions200Response) IsSetVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *GetClusterUpgradeVersions200Response) SetVersions(v []string) {
	o.Versions = v
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise.
func (o *GetClusterUpgradeVersions200Response) GetCurrentVersion() string {
	if o == nil || IsNil(o.CurrentVersion) {
		var ret string
		return ret
	}
	return *o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetClusterUpgradeVersions200Response) GetCurrentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentVersion) {
		return nil, false
	}
	return o.CurrentVersion, true
}

// IsSetCurrentVersion returns a boolean if a field has been set.
func (o *GetClusterUpgradeVersions200Response) IsSetCurrentVersion() bool {
	if o != nil && !IsNil(o.CurrentVersion) {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given string and assigns it to the CurrentVersion field.
func (o *GetClusterUpgradeVersions200Response) SetCurrentVersion(v string) {
	o.CurrentVersion = &v
}

func (o GetClusterUpgradeVersions200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetClusterUpgradeVersions200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	if !IsNil(o.CurrentVersion) {
		toSerialize["currentVersion"] = o.CurrentVersion
	}
	return toSerialize, nil
}

type NullableGetClusterUpgradeVersions200Response struct {
	value *GetClusterUpgradeVersions200Response
	isSet bool
}

func (v NullableGetClusterUpgradeVersions200Response) Get() *GetClusterUpgradeVersions200Response {
	return v.value
}

func (v *NullableGetClusterUpgradeVersions200Response) Set(val *GetClusterUpgradeVersions200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetClusterUpgradeVersions200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetClusterUpgradeVersions200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetClusterUpgradeVersions200Response(val *GetClusterUpgradeVersions200Response) *NullableGetClusterUpgradeVersions200Response {
	return &NullableGetClusterUpgradeVersions200Response{value: val, isSet: true}
}

func (v NullableGetClusterUpgradeVersions200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetClusterUpgradeVersions200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


