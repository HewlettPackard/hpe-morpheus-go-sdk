/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the PolicyUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyUpdate{}

// PolicyUpdate struct for PolicyUpdate
type PolicyUpdate struct {
	// A name for the policy
	Name *string `json:"name,omitempty"`
	// A description for the policy
	Description *string `json:"description,omitempty"`
	Config *UpdatePoliciesRequestPolicyConfig `json:"config,omitempty"`
	// Set to false to disable
	Enabled *bool `json:"enabled,omitempty"`
	// Scope object type
	RefType *string `json:"refType,omitempty"`
	// Scope object ID (`group`,`cloud`,`user`, etc)
	RefId *int64 `json:"refId,omitempty"`
	// Array of tenants to scope the policy to
	Accounts []int64 `json:"accounts,omitempty"`
	// Apply individually to each user in role.  Only when `refType` equals `Role`
	EachUser *bool `json:"eachUser,omitempty"`
}

// NewPolicyUpdate instantiates a new PolicyUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyUpdate() *PolicyUpdate {
	this := PolicyUpdate{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewPolicyUpdateWithDefaults instantiates a new PolicyUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyUpdateWithDefaults() *PolicyUpdate {
	this := PolicyUpdate{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PolicyUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *PolicyUpdate) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PolicyUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PolicyUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *PolicyUpdate) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PolicyUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *PolicyUpdate) GetConfig() UpdatePoliciesRequestPolicyConfig {
	if o == nil || IsNil(o.Config) {
		var ret UpdatePoliciesRequestPolicyConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyUpdate) GetConfigOk() (*UpdatePoliciesRequestPolicyConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// IsSetConfig returns a boolean if a field has been set.
func (o *PolicyUpdate) IsSetConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given UpdatePoliciesRequestPolicyConfig and assigns it to the Config field.
func (o *PolicyUpdate) SetConfig(v UpdatePoliciesRequestPolicyConfig) {
	o.Config = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PolicyUpdate) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyUpdate) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// IsSetEnabled returns a boolean if a field has been set.
func (o *PolicyUpdate) IsSetEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PolicyUpdate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *PolicyUpdate) GetRefType() string {
	if o == nil || IsNil(o.RefType) {
		var ret string
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyUpdate) GetRefTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RefType) {
		return nil, false
	}
	return o.RefType, true
}

// IsSetRefType returns a boolean if a field has been set.
func (o *PolicyUpdate) IsSetRefType() bool {
	if o != nil && !IsNil(o.RefType) {
		return true
	}

	return false
}

// SetRefType gets a reference to the given string and assigns it to the RefType field.
func (o *PolicyUpdate) SetRefType(v string) {
	o.RefType = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *PolicyUpdate) GetRefId() int64 {
	if o == nil || IsNil(o.RefId) {
		var ret int64
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyUpdate) GetRefIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// IsSetRefId returns a boolean if a field has been set.
func (o *PolicyUpdate) IsSetRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given int64 and assigns it to the RefId field.
func (o *PolicyUpdate) SetRefId(v int64) {
	o.RefId = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *PolicyUpdate) GetAccounts() []int64 {
	if o == nil || IsNil(o.Accounts) {
		var ret []int64
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyUpdate) GetAccountsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// IsSetAccounts returns a boolean if a field has been set.
func (o *PolicyUpdate) IsSetAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []int64 and assigns it to the Accounts field.
func (o *PolicyUpdate) SetAccounts(v []int64) {
	o.Accounts = v
}

// GetEachUser returns the EachUser field value if set, zero value otherwise.
func (o *PolicyUpdate) GetEachUser() bool {
	if o == nil || IsNil(o.EachUser) {
		var ret bool
		return ret
	}
	return *o.EachUser
}

// GetEachUserOk returns a tuple with the EachUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyUpdate) GetEachUserOk() (*bool, bool) {
	if o == nil || IsNil(o.EachUser) {
		return nil, false
	}
	return o.EachUser, true
}

// IsSetEachUser returns a boolean if a field has been set.
func (o *PolicyUpdate) IsSetEachUser() bool {
	if o != nil && !IsNil(o.EachUser) {
		return true
	}

	return false
}

// SetEachUser gets a reference to the given bool and assigns it to the EachUser field.
func (o *PolicyUpdate) SetEachUser(v bool) {
	o.EachUser = &v
}

func (o PolicyUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.RefType) {
		toSerialize["refType"] = o.RefType
	}
	if !IsNil(o.RefId) {
		toSerialize["refId"] = o.RefId
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.EachUser) {
		toSerialize["eachUser"] = o.EachUser
	}
	return toSerialize, nil
}

type NullablePolicyUpdate struct {
	value *PolicyUpdate
	isSet bool
}

func (v NullablePolicyUpdate) Get() *PolicyUpdate {
	return v.value
}

func (v *NullablePolicyUpdate) Set(val *PolicyUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyUpdate(val *PolicyUpdate) *NullablePolicyUpdate {
	return &NullablePolicyUpdate{value: val, isSet: true}
}

func (v NullablePolicyUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


