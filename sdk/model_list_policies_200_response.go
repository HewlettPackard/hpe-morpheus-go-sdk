/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ListPolicies200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListPolicies200Response{}

// ListPolicies200Response struct for ListPolicies200Response
type ListPolicies200Response struct {
	Policies             []ListPolicies200ResponseAllOfPoliciesInner `json:"policies,omitempty"`
	Meta                 *ListActivity200ResponseAllOfMeta           `json:"meta,omitempty"`
	AdditionalProperties map[string]interface{}                      `json:",remain"`
}

type _ListPolicies200Response ListPolicies200Response

// NewListPolicies200Response instantiates a new ListPolicies200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPolicies200Response() *ListPolicies200Response {
	this := ListPolicies200Response{}
	return &this
}

// NewListPolicies200ResponseWithDefaults instantiates a new ListPolicies200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPolicies200ResponseWithDefaults() *ListPolicies200Response {
	this := ListPolicies200Response{}
	return &this
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *ListPolicies200Response) GetPolicies() []ListPolicies200ResponseAllOfPoliciesInner {
	if o == nil || IsNil(o.Policies) {
		var ret []ListPolicies200ResponseAllOfPoliciesInner
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPolicies200Response) GetPoliciesOk() ([]ListPolicies200ResponseAllOfPoliciesInner, bool) {
	if o == nil || IsNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// IsSetPolicies returns a boolean if a field has been set.
func (o *ListPolicies200Response) IsSetPolicies() bool {
	if o != nil && !IsNil(o.Policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []ListPolicies200ResponseAllOfPoliciesInner and assigns it to the Policies field.
func (o *ListPolicies200Response) SetPolicies(v []ListPolicies200ResponseAllOfPoliciesInner) {
	o.Policies = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ListPolicies200Response) GetMeta() ListActivity200ResponseAllOfMeta {
	if o == nil || IsNil(o.Meta) {
		var ret ListActivity200ResponseAllOfMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPolicies200Response) GetMetaOk() (*ListActivity200ResponseAllOfMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// IsSetMeta returns a boolean if a field has been set.
func (o *ListPolicies200Response) IsSetMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ListActivity200ResponseAllOfMeta and assigns it to the Meta field.
func (o *ListPolicies200Response) SetMeta(v ListActivity200ResponseAllOfMeta) {
	o.Meta = &v
}

func (o ListPolicies200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListPolicies200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Policies) {
		toSerialize["policies"] = o.Policies
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *ListPolicies200Response) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
