/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)


// CreateNetworkPoolServerRequestNetworkPoolServer Payload for creating a new Network Pool Server
type CreateNetworkPoolServerRequestNetworkPoolServer struct {
	BluecatNetworkPoolServer *BluecatNetworkPoolServer
	InfobloxNetworkPoolServer *InfobloxNetworkPoolServer
	PhpIPAMNetworkPoolServer *PhpIPAMNetworkPoolServer
	SolarWindsNetworkPoolServer *SolarWindsNetworkPoolServer
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CreateNetworkPoolServerRequestNetworkPoolServer) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into BluecatNetworkPoolServer
	err = json.Unmarshal(data, &dst.BluecatNetworkPoolServer);
	if err == nil {
		jsonBluecatNetworkPoolServer, _ := json.Marshal(dst.BluecatNetworkPoolServer)
		if string(jsonBluecatNetworkPoolServer) == "{}" { // empty struct
			dst.BluecatNetworkPoolServer = nil
		} else {
			return nil // data stored in dst.BluecatNetworkPoolServer, return on the first match
		}
	} else {
		dst.BluecatNetworkPoolServer = nil
	}

	// try to unmarshal JSON data into InfobloxNetworkPoolServer
	err = json.Unmarshal(data, &dst.InfobloxNetworkPoolServer);
	if err == nil {
		jsonInfobloxNetworkPoolServer, _ := json.Marshal(dst.InfobloxNetworkPoolServer)
		if string(jsonInfobloxNetworkPoolServer) == "{}" { // empty struct
			dst.InfobloxNetworkPoolServer = nil
		} else {
			return nil // data stored in dst.InfobloxNetworkPoolServer, return on the first match
		}
	} else {
		dst.InfobloxNetworkPoolServer = nil
	}

	// try to unmarshal JSON data into PhpIPAMNetworkPoolServer
	err = json.Unmarshal(data, &dst.PhpIPAMNetworkPoolServer);
	if err == nil {
		jsonPhpIPAMNetworkPoolServer, _ := json.Marshal(dst.PhpIPAMNetworkPoolServer)
		if string(jsonPhpIPAMNetworkPoolServer) == "{}" { // empty struct
			dst.PhpIPAMNetworkPoolServer = nil
		} else {
			return nil // data stored in dst.PhpIPAMNetworkPoolServer, return on the first match
		}
	} else {
		dst.PhpIPAMNetworkPoolServer = nil
	}

	// try to unmarshal JSON data into SolarWindsNetworkPoolServer
	err = json.Unmarshal(data, &dst.SolarWindsNetworkPoolServer);
	if err == nil {
		jsonSolarWindsNetworkPoolServer, _ := json.Marshal(dst.SolarWindsNetworkPoolServer)
		if string(jsonSolarWindsNetworkPoolServer) == "{}" { // empty struct
			dst.SolarWindsNetworkPoolServer = nil
		} else {
			return nil // data stored in dst.SolarWindsNetworkPoolServer, return on the first match
		}
	} else {
		dst.SolarWindsNetworkPoolServer = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(CreateNetworkPoolServerRequestNetworkPoolServer)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateNetworkPoolServerRequestNetworkPoolServer) MarshalJSON() ([]byte, error) {
	if src.BluecatNetworkPoolServer != nil {
		return json.Marshal(&src.BluecatNetworkPoolServer)
	}

	if src.InfobloxNetworkPoolServer != nil {
		return json.Marshal(&src.InfobloxNetworkPoolServer)
	}

	if src.PhpIPAMNetworkPoolServer != nil {
		return json.Marshal(&src.PhpIPAMNetworkPoolServer)
	}

	if src.SolarWindsNetworkPoolServer != nil {
		return json.Marshal(&src.SolarWindsNetworkPoolServer)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableCreateNetworkPoolServerRequestNetworkPoolServer struct {
	value *CreateNetworkPoolServerRequestNetworkPoolServer
	isSet bool
}

func (v NullableCreateNetworkPoolServerRequestNetworkPoolServer) Get() *CreateNetworkPoolServerRequestNetworkPoolServer {
	return v.value
}

func (v *NullableCreateNetworkPoolServerRequestNetworkPoolServer) Set(val *CreateNetworkPoolServerRequestNetworkPoolServer) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNetworkPoolServerRequestNetworkPoolServer) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNetworkPoolServerRequestNetworkPoolServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNetworkPoolServerRequestNetworkPoolServer(val *CreateNetworkPoolServerRequestNetworkPoolServer) *NullableCreateNetworkPoolServerRequestNetworkPoolServer {
	return &NullableCreateNetworkPoolServerRequestNetworkPoolServer{value: val, isSet: true}
}

func (v NullableCreateNetworkPoolServerRequestNetworkPoolServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNetworkPoolServerRequestNetworkPoolServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


