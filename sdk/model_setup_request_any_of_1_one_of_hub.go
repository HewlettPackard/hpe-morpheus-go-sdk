/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetupRequestAnyOf1OneOfHub type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetupRequestAnyOf1OneOfHub{}

// SetupRequestAnyOf1OneOfHub struct for SetupRequestAnyOf1OneOfHub
type SetupRequestAnyOf1OneOfHub struct {
	// Email for existing Morpheus Hub user
	Email string `json:"email"`
	// Password for existing Morpheus Hub user
	Password string `json:"password"`
}

type _SetupRequestAnyOf1OneOfHub SetupRequestAnyOf1OneOfHub

// NewSetupRequestAnyOf1OneOfHub instantiates a new SetupRequestAnyOf1OneOfHub object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetupRequestAnyOf1OneOfHub(email string, password string) *SetupRequestAnyOf1OneOfHub {
	this := SetupRequestAnyOf1OneOfHub{}
	this.Email = email
	this.Password = password
	return &this
}

// NewSetupRequestAnyOf1OneOfHubWithDefaults instantiates a new SetupRequestAnyOf1OneOfHub object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetupRequestAnyOf1OneOfHubWithDefaults() *SetupRequestAnyOf1OneOfHub {
	this := SetupRequestAnyOf1OneOfHub{}
	return &this
}

// GetEmail returns the Email field value
func (o *SetupRequestAnyOf1OneOfHub) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *SetupRequestAnyOf1OneOfHub) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *SetupRequestAnyOf1OneOfHub) SetEmail(v string) {
	o.Email = v
}

// GetPassword returns the Password field value
func (o *SetupRequestAnyOf1OneOfHub) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *SetupRequestAnyOf1OneOfHub) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *SetupRequestAnyOf1OneOfHub) SetPassword(v string) {
	o.Password = v
}

func (o SetupRequestAnyOf1OneOfHub) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetupRequestAnyOf1OneOfHub) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

func (o *SetupRequestAnyOf1OneOfHub) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetupRequestAnyOf1OneOfHub := _SetupRequestAnyOf1OneOfHub{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetupRequestAnyOf1OneOfHub)

	if err != nil {
		return err
	}

	*o = SetupRequestAnyOf1OneOfHub(varSetupRequestAnyOf1OneOfHub)

	return err
}

type NullableSetupRequestAnyOf1OneOfHub struct {
	value *SetupRequestAnyOf1OneOfHub
	isSet bool
}

func (v NullableSetupRequestAnyOf1OneOfHub) Get() *SetupRequestAnyOf1OneOfHub {
	return v.value
}

func (v *NullableSetupRequestAnyOf1OneOfHub) Set(val *SetupRequestAnyOf1OneOfHub) {
	v.value = val
	v.isSet = true
}

func (v NullableSetupRequestAnyOf1OneOfHub) IsSet() bool {
	return v.isSet
}

func (v *NullableSetupRequestAnyOf1OneOfHub) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetupRequestAnyOf1OneOfHub(val *SetupRequestAnyOf1OneOfHub) *NullableSetupRequestAnyOf1OneOfHub {
	return &NullableSetupRequestAnyOf1OneOfHub{value: val, isSet: true}
}

func (v NullableSetupRequestAnyOf1OneOfHub) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetupRequestAnyOf1OneOfHub) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


