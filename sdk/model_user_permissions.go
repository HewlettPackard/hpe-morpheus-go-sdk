/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UserPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPermissions{}

// UserPermissions struct for UserPermissions
type UserPermissions struct {
	Features []map[string]interface{} `json:"features,omitempty"`
	Zones []map[string]interface{} `json:"zones,omitempty"`
	Sites []map[string]interface{} `json:"sites,omitempty"`
	InstanceTypes []map[string]interface{} `json:"instanceTypes,omitempty"`
	AppTemplates []map[string]interface{} `json:"appTemplates,omitempty"`
	CatalogItemTypes []map[string]interface{} `json:"catalogItemTypes,omitempty"`
	Personas []map[string]interface{} `json:"personas,omitempty"`
	VdiPools []map[string]interface{} `json:"vdiPools,omitempty"`
	ReportTypes []map[string]interface{} `json:"reportTypes,omitempty"`
	Tasks []map[string]interface{} `json:"tasks,omitempty"`
	TaskSets []map[string]interface{} `json:"taskSets,omitempty"`
}

// NewUserPermissions instantiates a new UserPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPermissions() *UserPermissions {
	this := UserPermissions{}
	return &this
}

// NewUserPermissionsWithDefaults instantiates a new UserPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPermissionsWithDefaults() *UserPermissions {
	this := UserPermissions{}
	return &this
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *UserPermissions) GetFeatures() []map[string]interface{} {
	if o == nil || IsNil(o.Features) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetFeaturesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// IsSetFeatures returns a boolean if a field has been set.
func (o *UserPermissions) IsSetFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []map[string]interface{} and assigns it to the Features field.
func (o *UserPermissions) SetFeatures(v []map[string]interface{}) {
	o.Features = v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *UserPermissions) GetZones() []map[string]interface{} {
	if o == nil || IsNil(o.Zones) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetZonesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Zones) {
		return nil, false
	}
	return o.Zones, true
}

// IsSetZones returns a boolean if a field has been set.
func (o *UserPermissions) IsSetZones() bool {
	if o != nil && !IsNil(o.Zones) {
		return true
	}

	return false
}

// SetZones gets a reference to the given []map[string]interface{} and assigns it to the Zones field.
func (o *UserPermissions) SetZones(v []map[string]interface{}) {
	o.Zones = v
}

// GetSites returns the Sites field value if set, zero value otherwise.
func (o *UserPermissions) GetSites() []map[string]interface{} {
	if o == nil || IsNil(o.Sites) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Sites
}

// GetSitesOk returns a tuple with the Sites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetSitesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Sites) {
		return nil, false
	}
	return o.Sites, true
}

// IsSetSites returns a boolean if a field has been set.
func (o *UserPermissions) IsSetSites() bool {
	if o != nil && !IsNil(o.Sites) {
		return true
	}

	return false
}

// SetSites gets a reference to the given []map[string]interface{} and assigns it to the Sites field.
func (o *UserPermissions) SetSites(v []map[string]interface{}) {
	o.Sites = v
}

// GetInstanceTypes returns the InstanceTypes field value if set, zero value otherwise.
func (o *UserPermissions) GetInstanceTypes() []map[string]interface{} {
	if o == nil || IsNil(o.InstanceTypes) {
		var ret []map[string]interface{}
		return ret
	}
	return o.InstanceTypes
}

// GetInstanceTypesOk returns a tuple with the InstanceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetInstanceTypesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.InstanceTypes) {
		return nil, false
	}
	return o.InstanceTypes, true
}

// IsSetInstanceTypes returns a boolean if a field has been set.
func (o *UserPermissions) IsSetInstanceTypes() bool {
	if o != nil && !IsNil(o.InstanceTypes) {
		return true
	}

	return false
}

// SetInstanceTypes gets a reference to the given []map[string]interface{} and assigns it to the InstanceTypes field.
func (o *UserPermissions) SetInstanceTypes(v []map[string]interface{}) {
	o.InstanceTypes = v
}

// GetAppTemplates returns the AppTemplates field value if set, zero value otherwise.
func (o *UserPermissions) GetAppTemplates() []map[string]interface{} {
	if o == nil || IsNil(o.AppTemplates) {
		var ret []map[string]interface{}
		return ret
	}
	return o.AppTemplates
}

// GetAppTemplatesOk returns a tuple with the AppTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetAppTemplatesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.AppTemplates) {
		return nil, false
	}
	return o.AppTemplates, true
}

// IsSetAppTemplates returns a boolean if a field has been set.
func (o *UserPermissions) IsSetAppTemplates() bool {
	if o != nil && !IsNil(o.AppTemplates) {
		return true
	}

	return false
}

// SetAppTemplates gets a reference to the given []map[string]interface{} and assigns it to the AppTemplates field.
func (o *UserPermissions) SetAppTemplates(v []map[string]interface{}) {
	o.AppTemplates = v
}

// GetCatalogItemTypes returns the CatalogItemTypes field value if set, zero value otherwise.
func (o *UserPermissions) GetCatalogItemTypes() []map[string]interface{} {
	if o == nil || IsNil(o.CatalogItemTypes) {
		var ret []map[string]interface{}
		return ret
	}
	return o.CatalogItemTypes
}

// GetCatalogItemTypesOk returns a tuple with the CatalogItemTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetCatalogItemTypesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.CatalogItemTypes) {
		return nil, false
	}
	return o.CatalogItemTypes, true
}

// IsSetCatalogItemTypes returns a boolean if a field has been set.
func (o *UserPermissions) IsSetCatalogItemTypes() bool {
	if o != nil && !IsNil(o.CatalogItemTypes) {
		return true
	}

	return false
}

// SetCatalogItemTypes gets a reference to the given []map[string]interface{} and assigns it to the CatalogItemTypes field.
func (o *UserPermissions) SetCatalogItemTypes(v []map[string]interface{}) {
	o.CatalogItemTypes = v
}

// GetPersonas returns the Personas field value if set, zero value otherwise.
func (o *UserPermissions) GetPersonas() []map[string]interface{} {
	if o == nil || IsNil(o.Personas) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Personas
}

// GetPersonasOk returns a tuple with the Personas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetPersonasOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Personas) {
		return nil, false
	}
	return o.Personas, true
}

// IsSetPersonas returns a boolean if a field has been set.
func (o *UserPermissions) IsSetPersonas() bool {
	if o != nil && !IsNil(o.Personas) {
		return true
	}

	return false
}

// SetPersonas gets a reference to the given []map[string]interface{} and assigns it to the Personas field.
func (o *UserPermissions) SetPersonas(v []map[string]interface{}) {
	o.Personas = v
}

// GetVdiPools returns the VdiPools field value if set, zero value otherwise.
func (o *UserPermissions) GetVdiPools() []map[string]interface{} {
	if o == nil || IsNil(o.VdiPools) {
		var ret []map[string]interface{}
		return ret
	}
	return o.VdiPools
}

// GetVdiPoolsOk returns a tuple with the VdiPools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetVdiPoolsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.VdiPools) {
		return nil, false
	}
	return o.VdiPools, true
}

// IsSetVdiPools returns a boolean if a field has been set.
func (o *UserPermissions) IsSetVdiPools() bool {
	if o != nil && !IsNil(o.VdiPools) {
		return true
	}

	return false
}

// SetVdiPools gets a reference to the given []map[string]interface{} and assigns it to the VdiPools field.
func (o *UserPermissions) SetVdiPools(v []map[string]interface{}) {
	o.VdiPools = v
}

// GetReportTypes returns the ReportTypes field value if set, zero value otherwise.
func (o *UserPermissions) GetReportTypes() []map[string]interface{} {
	if o == nil || IsNil(o.ReportTypes) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ReportTypes
}

// GetReportTypesOk returns a tuple with the ReportTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetReportTypesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ReportTypes) {
		return nil, false
	}
	return o.ReportTypes, true
}

// IsSetReportTypes returns a boolean if a field has been set.
func (o *UserPermissions) IsSetReportTypes() bool {
	if o != nil && !IsNil(o.ReportTypes) {
		return true
	}

	return false
}

// SetReportTypes gets a reference to the given []map[string]interface{} and assigns it to the ReportTypes field.
func (o *UserPermissions) SetReportTypes(v []map[string]interface{}) {
	o.ReportTypes = v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *UserPermissions) GetTasks() []map[string]interface{} {
	if o == nil || IsNil(o.Tasks) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetTasksOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// IsSetTasks returns a boolean if a field has been set.
func (o *UserPermissions) IsSetTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []map[string]interface{} and assigns it to the Tasks field.
func (o *UserPermissions) SetTasks(v []map[string]interface{}) {
	o.Tasks = v
}

// GetTaskSets returns the TaskSets field value if set, zero value otherwise.
func (o *UserPermissions) GetTaskSets() []map[string]interface{} {
	if o == nil || IsNil(o.TaskSets) {
		var ret []map[string]interface{}
		return ret
	}
	return o.TaskSets
}

// GetTaskSetsOk returns a tuple with the TaskSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetTaskSetsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.TaskSets) {
		return nil, false
	}
	return o.TaskSets, true
}

// IsSetTaskSets returns a boolean if a field has been set.
func (o *UserPermissions) IsSetTaskSets() bool {
	if o != nil && !IsNil(o.TaskSets) {
		return true
	}

	return false
}

// SetTaskSets gets a reference to the given []map[string]interface{} and assigns it to the TaskSets field.
func (o *UserPermissions) SetTaskSets(v []map[string]interface{}) {
	o.TaskSets = v
}

func (o UserPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.Zones) {
		toSerialize["zones"] = o.Zones
	}
	if !IsNil(o.Sites) {
		toSerialize["sites"] = o.Sites
	}
	if !IsNil(o.InstanceTypes) {
		toSerialize["instanceTypes"] = o.InstanceTypes
	}
	if !IsNil(o.AppTemplates) {
		toSerialize["appTemplates"] = o.AppTemplates
	}
	if !IsNil(o.CatalogItemTypes) {
		toSerialize["catalogItemTypes"] = o.CatalogItemTypes
	}
	if !IsNil(o.Personas) {
		toSerialize["personas"] = o.Personas
	}
	if !IsNil(o.VdiPools) {
		toSerialize["vdiPools"] = o.VdiPools
	}
	if !IsNil(o.ReportTypes) {
		toSerialize["reportTypes"] = o.ReportTypes
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.TaskSets) {
		toSerialize["taskSets"] = o.TaskSets
	}
	return toSerialize, nil
}

type NullableUserPermissions struct {
	value *UserPermissions
	isSet bool
}

func (v NullableUserPermissions) Get() *UserPermissions {
	return v.value
}

func (v *NullableUserPermissions) Set(val *UserPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPermissions(val *UserPermissions) *NullableUserPermissions {
	return &NullableUserPermissions{value: val, isSet: true}
}

func (v NullableUserPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


