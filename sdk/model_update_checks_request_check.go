/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UpdateChecksRequestCheck - Payload for updating a monitoring check
type UpdateChecksRequestCheck struct {
	AddChecksRequestCheckOneOf *AddChecksRequestCheckOneOf
	AddChecksRequestCheckOneOf1 *AddChecksRequestCheckOneOf1
	AddChecksRequestCheckOneOf2 *AddChecksRequestCheckOneOf2
	AddChecksRequestCheckOneOf3 *AddChecksRequestCheckOneOf3
	AddChecksRequestCheckOneOf4 *AddChecksRequestCheckOneOf4
}

// AddChecksRequestCheckOneOfAsUpdateChecksRequestCheck is a convenience function that returns AddChecksRequestCheckOneOf wrapped in UpdateChecksRequestCheck
func AddChecksRequestCheckOneOfAsUpdateChecksRequestCheck(v *AddChecksRequestCheckOneOf) UpdateChecksRequestCheck {
	return UpdateChecksRequestCheck{
		AddChecksRequestCheckOneOf: v,
	}
}

// AddChecksRequestCheckOneOf1AsUpdateChecksRequestCheck is a convenience function that returns AddChecksRequestCheckOneOf1 wrapped in UpdateChecksRequestCheck
func AddChecksRequestCheckOneOf1AsUpdateChecksRequestCheck(v *AddChecksRequestCheckOneOf1) UpdateChecksRequestCheck {
	return UpdateChecksRequestCheck{
		AddChecksRequestCheckOneOf1: v,
	}
}

// AddChecksRequestCheckOneOf2AsUpdateChecksRequestCheck is a convenience function that returns AddChecksRequestCheckOneOf2 wrapped in UpdateChecksRequestCheck
func AddChecksRequestCheckOneOf2AsUpdateChecksRequestCheck(v *AddChecksRequestCheckOneOf2) UpdateChecksRequestCheck {
	return UpdateChecksRequestCheck{
		AddChecksRequestCheckOneOf2: v,
	}
}

// AddChecksRequestCheckOneOf3AsUpdateChecksRequestCheck is a convenience function that returns AddChecksRequestCheckOneOf3 wrapped in UpdateChecksRequestCheck
func AddChecksRequestCheckOneOf3AsUpdateChecksRequestCheck(v *AddChecksRequestCheckOneOf3) UpdateChecksRequestCheck {
	return UpdateChecksRequestCheck{
		AddChecksRequestCheckOneOf3: v,
	}
}

// AddChecksRequestCheckOneOf4AsUpdateChecksRequestCheck is a convenience function that returns AddChecksRequestCheckOneOf4 wrapped in UpdateChecksRequestCheck
func AddChecksRequestCheckOneOf4AsUpdateChecksRequestCheck(v *AddChecksRequestCheckOneOf4) UpdateChecksRequestCheck {
	return UpdateChecksRequestCheck{
		AddChecksRequestCheckOneOf4: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateChecksRequestCheck) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddChecksRequestCheckOneOf
	err = newStrictDecoder(data).Decode(&dst.AddChecksRequestCheckOneOf)
	if err == nil {
		jsonAddChecksRequestCheckOneOf, _ := json.Marshal(dst.AddChecksRequestCheckOneOf)
		if string(jsonAddChecksRequestCheckOneOf) == "{}" { // empty struct
			dst.AddChecksRequestCheckOneOf = nil
		} else {
			if err = validator.Validate(dst.AddChecksRequestCheckOneOf); err != nil {
				dst.AddChecksRequestCheckOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddChecksRequestCheckOneOf = nil
	}

	// try to unmarshal data into AddChecksRequestCheckOneOf1
	err = newStrictDecoder(data).Decode(&dst.AddChecksRequestCheckOneOf1)
	if err == nil {
		jsonAddChecksRequestCheckOneOf1, _ := json.Marshal(dst.AddChecksRequestCheckOneOf1)
		if string(jsonAddChecksRequestCheckOneOf1) == "{}" { // empty struct
			dst.AddChecksRequestCheckOneOf1 = nil
		} else {
			if err = validator.Validate(dst.AddChecksRequestCheckOneOf1); err != nil {
				dst.AddChecksRequestCheckOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddChecksRequestCheckOneOf1 = nil
	}

	// try to unmarshal data into AddChecksRequestCheckOneOf2
	err = newStrictDecoder(data).Decode(&dst.AddChecksRequestCheckOneOf2)
	if err == nil {
		jsonAddChecksRequestCheckOneOf2, _ := json.Marshal(dst.AddChecksRequestCheckOneOf2)
		if string(jsonAddChecksRequestCheckOneOf2) == "{}" { // empty struct
			dst.AddChecksRequestCheckOneOf2 = nil
		} else {
			if err = validator.Validate(dst.AddChecksRequestCheckOneOf2); err != nil {
				dst.AddChecksRequestCheckOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddChecksRequestCheckOneOf2 = nil
	}

	// try to unmarshal data into AddChecksRequestCheckOneOf3
	err = newStrictDecoder(data).Decode(&dst.AddChecksRequestCheckOneOf3)
	if err == nil {
		jsonAddChecksRequestCheckOneOf3, _ := json.Marshal(dst.AddChecksRequestCheckOneOf3)
		if string(jsonAddChecksRequestCheckOneOf3) == "{}" { // empty struct
			dst.AddChecksRequestCheckOneOf3 = nil
		} else {
			if err = validator.Validate(dst.AddChecksRequestCheckOneOf3); err != nil {
				dst.AddChecksRequestCheckOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddChecksRequestCheckOneOf3 = nil
	}

	// try to unmarshal data into AddChecksRequestCheckOneOf4
	err = newStrictDecoder(data).Decode(&dst.AddChecksRequestCheckOneOf4)
	if err == nil {
		jsonAddChecksRequestCheckOneOf4, _ := json.Marshal(dst.AddChecksRequestCheckOneOf4)
		if string(jsonAddChecksRequestCheckOneOf4) == "{}" { // empty struct
			dst.AddChecksRequestCheckOneOf4 = nil
		} else {
			if err = validator.Validate(dst.AddChecksRequestCheckOneOf4); err != nil {
				dst.AddChecksRequestCheckOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddChecksRequestCheckOneOf4 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddChecksRequestCheckOneOf = nil
		dst.AddChecksRequestCheckOneOf1 = nil
		dst.AddChecksRequestCheckOneOf2 = nil
		dst.AddChecksRequestCheckOneOf3 = nil
		dst.AddChecksRequestCheckOneOf4 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateChecksRequestCheck)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateChecksRequestCheck)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateChecksRequestCheck) MarshalJSON() ([]byte, error) {
	if src.AddChecksRequestCheckOneOf != nil {
		return json.Marshal(&src.AddChecksRequestCheckOneOf)
	}

	if src.AddChecksRequestCheckOneOf1 != nil {
		return json.Marshal(&src.AddChecksRequestCheckOneOf1)
	}

	if src.AddChecksRequestCheckOneOf2 != nil {
		return json.Marshal(&src.AddChecksRequestCheckOneOf2)
	}

	if src.AddChecksRequestCheckOneOf3 != nil {
		return json.Marshal(&src.AddChecksRequestCheckOneOf3)
	}

	if src.AddChecksRequestCheckOneOf4 != nil {
		return json.Marshal(&src.AddChecksRequestCheckOneOf4)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateChecksRequestCheck) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddChecksRequestCheckOneOf != nil {
		return obj.AddChecksRequestCheckOneOf
	}

	if obj.AddChecksRequestCheckOneOf1 != nil {
		return obj.AddChecksRequestCheckOneOf1
	}

	if obj.AddChecksRequestCheckOneOf2 != nil {
		return obj.AddChecksRequestCheckOneOf2
	}

	if obj.AddChecksRequestCheckOneOf3 != nil {
		return obj.AddChecksRequestCheckOneOf3
	}

	if obj.AddChecksRequestCheckOneOf4 != nil {
		return obj.AddChecksRequestCheckOneOf4
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateChecksRequestCheck) GetActualInstanceValue() (interface{}) {
	if obj.AddChecksRequestCheckOneOf != nil {
		return *obj.AddChecksRequestCheckOneOf
	}

	if obj.AddChecksRequestCheckOneOf1 != nil {
		return *obj.AddChecksRequestCheckOneOf1
	}

	if obj.AddChecksRequestCheckOneOf2 != nil {
		return *obj.AddChecksRequestCheckOneOf2
	}

	if obj.AddChecksRequestCheckOneOf3 != nil {
		return *obj.AddChecksRequestCheckOneOf3
	}

	if obj.AddChecksRequestCheckOneOf4 != nil {
		return *obj.AddChecksRequestCheckOneOf4
	}

	// all schemas are nil
	return nil
}

type NullableUpdateChecksRequestCheck struct {
	value *UpdateChecksRequestCheck
	isSet bool
}

func (v NullableUpdateChecksRequestCheck) Get() *UpdateChecksRequestCheck {
	return v.value
}

func (v *NullableUpdateChecksRequestCheck) Set(val *UpdateChecksRequestCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateChecksRequestCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateChecksRequestCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateChecksRequestCheck(val *UpdateChecksRequestCheck) *NullableUpdateChecksRequestCheck {
	return &NullableUpdateChecksRequestCheck{value: val, isSet: true}
}

func (v NullableUpdateChecksRequestCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateChecksRequestCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


