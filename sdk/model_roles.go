/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
)

// checks if the Roles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Roles{}

// Roles struct for Roles
type Roles struct {
	Id *int64 `json:"id,omitempty"`
	// a unique name of the role
	Name *string `json:"name,omitempty"`
	// Alias for name
	Authority *string `json:"authority,omitempty"`
	Description *string `json:"description,omitempty"`
	// An optional override for the default landing page after login for a user.
	LandingUrl *string `json:"landingUrl,omitempty"`
	Scope *string `json:"scope,omitempty"`
	RoleType *string `json:"roleType,omitempty"`
	Multitenant *bool `json:"multitenant,omitempty"`
	MultitenantLocked *bool `json:"multitenantLocked,omitempty"`
	ParentRoleId *string `json:"parentRoleId,omitempty"`
	Diverged *bool `json:"diverged,omitempty"`
	OwnerId *int64 `json:"ownerId,omitempty"`
	Owner *ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner `json:"owner,omitempty"`
	DefaultPersona *string `json:"defaultPersona,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// NewRoles instantiates a new Roles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoles() *Roles {
	this := Roles{}
	return &this
}

// NewRolesWithDefaults instantiates a new Roles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolesWithDefaults() *Roles {
	this := Roles{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Roles) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *Roles) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Roles) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Roles) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *Roles) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Roles) SetName(v string) {
	o.Name = &v
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *Roles) GetAuthority() string {
	if o == nil || IsNil(o.Authority) {
		var ret string
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetAuthorityOk() (*string, bool) {
	if o == nil || IsNil(o.Authority) {
		return nil, false
	}
	return o.Authority, true
}

// IsSetAuthority returns a boolean if a field has been set.
func (o *Roles) IsSetAuthority() bool {
	if o != nil && !IsNil(o.Authority) {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given string and assigns it to the Authority field.
func (o *Roles) SetAuthority(v string) {
	o.Authority = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Roles) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *Roles) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Roles) SetDescription(v string) {
	o.Description = &v
}

// GetLandingUrl returns the LandingUrl field value if set, zero value otherwise.
func (o *Roles) GetLandingUrl() string {
	if o == nil || IsNil(o.LandingUrl) {
		var ret string
		return ret
	}
	return *o.LandingUrl
}

// GetLandingUrlOk returns a tuple with the LandingUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetLandingUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LandingUrl) {
		return nil, false
	}
	return o.LandingUrl, true
}

// IsSetLandingUrl returns a boolean if a field has been set.
func (o *Roles) IsSetLandingUrl() bool {
	if o != nil && !IsNil(o.LandingUrl) {
		return true
	}

	return false
}

// SetLandingUrl gets a reference to the given string and assigns it to the LandingUrl field.
func (o *Roles) SetLandingUrl(v string) {
	o.LandingUrl = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *Roles) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// IsSetScope returns a boolean if a field has been set.
func (o *Roles) IsSetScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *Roles) SetScope(v string) {
	o.Scope = &v
}

// GetRoleType returns the RoleType field value if set, zero value otherwise.
func (o *Roles) GetRoleType() string {
	if o == nil || IsNil(o.RoleType) {
		var ret string
		return ret
	}
	return *o.RoleType
}

// GetRoleTypeOk returns a tuple with the RoleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetRoleTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RoleType) {
		return nil, false
	}
	return o.RoleType, true
}

// IsSetRoleType returns a boolean if a field has been set.
func (o *Roles) IsSetRoleType() bool {
	if o != nil && !IsNil(o.RoleType) {
		return true
	}

	return false
}

// SetRoleType gets a reference to the given string and assigns it to the RoleType field.
func (o *Roles) SetRoleType(v string) {
	o.RoleType = &v
}

// GetMultitenant returns the Multitenant field value if set, zero value otherwise.
func (o *Roles) GetMultitenant() bool {
	if o == nil || IsNil(o.Multitenant) {
		var ret bool
		return ret
	}
	return *o.Multitenant
}

// GetMultitenantOk returns a tuple with the Multitenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetMultitenantOk() (*bool, bool) {
	if o == nil || IsNil(o.Multitenant) {
		return nil, false
	}
	return o.Multitenant, true
}

// IsSetMultitenant returns a boolean if a field has been set.
func (o *Roles) IsSetMultitenant() bool {
	if o != nil && !IsNil(o.Multitenant) {
		return true
	}

	return false
}

// SetMultitenant gets a reference to the given bool and assigns it to the Multitenant field.
func (o *Roles) SetMultitenant(v bool) {
	o.Multitenant = &v
}

// GetMultitenantLocked returns the MultitenantLocked field value if set, zero value otherwise.
func (o *Roles) GetMultitenantLocked() bool {
	if o == nil || IsNil(o.MultitenantLocked) {
		var ret bool
		return ret
	}
	return *o.MultitenantLocked
}

// GetMultitenantLockedOk returns a tuple with the MultitenantLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetMultitenantLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.MultitenantLocked) {
		return nil, false
	}
	return o.MultitenantLocked, true
}

// IsSetMultitenantLocked returns a boolean if a field has been set.
func (o *Roles) IsSetMultitenantLocked() bool {
	if o != nil && !IsNil(o.MultitenantLocked) {
		return true
	}

	return false
}

// SetMultitenantLocked gets a reference to the given bool and assigns it to the MultitenantLocked field.
func (o *Roles) SetMultitenantLocked(v bool) {
	o.MultitenantLocked = &v
}

// GetParentRoleId returns the ParentRoleId field value if set, zero value otherwise.
func (o *Roles) GetParentRoleId() string {
	if o == nil || IsNil(o.ParentRoleId) {
		var ret string
		return ret
	}
	return *o.ParentRoleId
}

// GetParentRoleIdOk returns a tuple with the ParentRoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetParentRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentRoleId) {
		return nil, false
	}
	return o.ParentRoleId, true
}

// IsSetParentRoleId returns a boolean if a field has been set.
func (o *Roles) IsSetParentRoleId() bool {
	if o != nil && !IsNil(o.ParentRoleId) {
		return true
	}

	return false
}

// SetParentRoleId gets a reference to the given string and assigns it to the ParentRoleId field.
func (o *Roles) SetParentRoleId(v string) {
	o.ParentRoleId = &v
}

// GetDiverged returns the Diverged field value if set, zero value otherwise.
func (o *Roles) GetDiverged() bool {
	if o == nil || IsNil(o.Diverged) {
		var ret bool
		return ret
	}
	return *o.Diverged
}

// GetDivergedOk returns a tuple with the Diverged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetDivergedOk() (*bool, bool) {
	if o == nil || IsNil(o.Diverged) {
		return nil, false
	}
	return o.Diverged, true
}

// IsSetDiverged returns a boolean if a field has been set.
func (o *Roles) IsSetDiverged() bool {
	if o != nil && !IsNil(o.Diverged) {
		return true
	}

	return false
}

// SetDiverged gets a reference to the given bool and assigns it to the Diverged field.
func (o *Roles) SetDiverged(v bool) {
	o.Diverged = &v
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
func (o *Roles) GetOwnerId() int64 {
	if o == nil || IsNil(o.OwnerId) {
		var ret int64
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetOwnerIdOk() (*int64, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// IsSetOwnerId returns a boolean if a field has been set.
func (o *Roles) IsSetOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given int64 and assigns it to the OwnerId field.
func (o *Roles) SetOwnerId(v int64) {
	o.OwnerId = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Roles) GetOwner() ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner {
	if o == nil || IsNil(o.Owner) {
		var ret ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetOwnerOk() (*ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// IsSetOwner returns a boolean if a field has been set.
func (o *Roles) IsSetOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner and assigns it to the Owner field.
func (o *Roles) SetOwner(v ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner) {
	o.Owner = &v
}

// GetDefaultPersona returns the DefaultPersona field value if set, zero value otherwise.
func (o *Roles) GetDefaultPersona() string {
	if o == nil || IsNil(o.DefaultPersona) {
		var ret string
		return ret
	}
	return *o.DefaultPersona
}

// GetDefaultPersonaOk returns a tuple with the DefaultPersona field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetDefaultPersonaOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultPersona) {
		return nil, false
	}
	return o.DefaultPersona, true
}

// IsSetDefaultPersona returns a boolean if a field has been set.
func (o *Roles) IsSetDefaultPersona() bool {
	if o != nil && !IsNil(o.DefaultPersona) {
		return true
	}

	return false
}

// SetDefaultPersona gets a reference to the given string and assigns it to the DefaultPersona field.
func (o *Roles) SetDefaultPersona(v string) {
	o.DefaultPersona = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Roles) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// IsSetDateCreated returns a boolean if a field has been set.
func (o *Roles) IsSetDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Roles) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Roles) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Roles) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// IsSetLastUpdated returns a boolean if a field has been set.
func (o *Roles) IsSetLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Roles) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o Roles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Roles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Authority) {
		toSerialize["authority"] = o.Authority
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.LandingUrl) {
		toSerialize["landingUrl"] = o.LandingUrl
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.RoleType) {
		toSerialize["roleType"] = o.RoleType
	}
	if !IsNil(o.Multitenant) {
		toSerialize["multitenant"] = o.Multitenant
	}
	if !IsNil(o.MultitenantLocked) {
		toSerialize["multitenantLocked"] = o.MultitenantLocked
	}
	if !IsNil(o.ParentRoleId) {
		toSerialize["parentRoleId"] = o.ParentRoleId
	}
	if !IsNil(o.Diverged) {
		toSerialize["diverged"] = o.Diverged
	}
	if !IsNil(o.OwnerId) {
		toSerialize["ownerId"] = o.OwnerId
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.DefaultPersona) {
		toSerialize["defaultPersona"] = o.DefaultPersona
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return toSerialize, nil
}

type NullableRoles struct {
	value *Roles
	isSet bool
}

func (v NullableRoles) Get() *Roles {
	return v.value
}

func (v *NullableRoles) Set(val *Roles) {
	v.value = val
	v.isSet = true
}

func (v NullableRoles) IsSet() bool {
	return v.isSet
}

func (v *NullableRoles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoles(val *Roles) *NullableRoles {
	return &NullableRoles{value: val, isSet: true}
}

func (v NullableRoles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


