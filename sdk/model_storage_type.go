/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the StorageType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageType{}

// StorageType struct for StorageType
type StorageType struct {
	Id *int64 `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
	DisplayOrder *int64 `json:"displayOrder,omitempty"`
	DefaultType *bool `json:"defaultType,omitempty"`
	CustomLabel *bool `json:"customLabel,omitempty"`
	CustomSize *bool `json:"customSize,omitempty"`
	CustomSizeOptions *string `json:"customSizeOptions,omitempty"`
}

// NewStorageType instantiates a new StorageType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageType() *StorageType {
	this := StorageType{}
	return &this
}

// NewStorageTypeWithDefaults instantiates a new StorageType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageTypeWithDefaults() *StorageType {
	this := StorageType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StorageType) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageType) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *StorageType) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *StorageType) SetId(v int64) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *StorageType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// IsSetCode returns a boolean if a field has been set.
func (o *StorageType) IsSetCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *StorageType) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *StorageType) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageType) SetName(v string) {
	o.Name = &v
}

// GetDisplayOrder returns the DisplayOrder field value if set, zero value otherwise.
func (o *StorageType) GetDisplayOrder() int64 {
	if o == nil || IsNil(o.DisplayOrder) {
		var ret int64
		return ret
	}
	return *o.DisplayOrder
}

// GetDisplayOrderOk returns a tuple with the DisplayOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageType) GetDisplayOrderOk() (*int64, bool) {
	if o == nil || IsNil(o.DisplayOrder) {
		return nil, false
	}
	return o.DisplayOrder, true
}

// IsSetDisplayOrder returns a boolean if a field has been set.
func (o *StorageType) IsSetDisplayOrder() bool {
	if o != nil && !IsNil(o.DisplayOrder) {
		return true
	}

	return false
}

// SetDisplayOrder gets a reference to the given int64 and assigns it to the DisplayOrder field.
func (o *StorageType) SetDisplayOrder(v int64) {
	o.DisplayOrder = &v
}

// GetDefaultType returns the DefaultType field value if set, zero value otherwise.
func (o *StorageType) GetDefaultType() bool {
	if o == nil || IsNil(o.DefaultType) {
		var ret bool
		return ret
	}
	return *o.DefaultType
}

// GetDefaultTypeOk returns a tuple with the DefaultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageType) GetDefaultTypeOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultType) {
		return nil, false
	}
	return o.DefaultType, true
}

// IsSetDefaultType returns a boolean if a field has been set.
func (o *StorageType) IsSetDefaultType() bool {
	if o != nil && !IsNil(o.DefaultType) {
		return true
	}

	return false
}

// SetDefaultType gets a reference to the given bool and assigns it to the DefaultType field.
func (o *StorageType) SetDefaultType(v bool) {
	o.DefaultType = &v
}

// GetCustomLabel returns the CustomLabel field value if set, zero value otherwise.
func (o *StorageType) GetCustomLabel() bool {
	if o == nil || IsNil(o.CustomLabel) {
		var ret bool
		return ret
	}
	return *o.CustomLabel
}

// GetCustomLabelOk returns a tuple with the CustomLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageType) GetCustomLabelOk() (*bool, bool) {
	if o == nil || IsNil(o.CustomLabel) {
		return nil, false
	}
	return o.CustomLabel, true
}

// IsSetCustomLabel returns a boolean if a field has been set.
func (o *StorageType) IsSetCustomLabel() bool {
	if o != nil && !IsNil(o.CustomLabel) {
		return true
	}

	return false
}

// SetCustomLabel gets a reference to the given bool and assigns it to the CustomLabel field.
func (o *StorageType) SetCustomLabel(v bool) {
	o.CustomLabel = &v
}

// GetCustomSize returns the CustomSize field value if set, zero value otherwise.
func (o *StorageType) GetCustomSize() bool {
	if o == nil || IsNil(o.CustomSize) {
		var ret bool
		return ret
	}
	return *o.CustomSize
}

// GetCustomSizeOk returns a tuple with the CustomSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageType) GetCustomSizeOk() (*bool, bool) {
	if o == nil || IsNil(o.CustomSize) {
		return nil, false
	}
	return o.CustomSize, true
}

// IsSetCustomSize returns a boolean if a field has been set.
func (o *StorageType) IsSetCustomSize() bool {
	if o != nil && !IsNil(o.CustomSize) {
		return true
	}

	return false
}

// SetCustomSize gets a reference to the given bool and assigns it to the CustomSize field.
func (o *StorageType) SetCustomSize(v bool) {
	o.CustomSize = &v
}

// GetCustomSizeOptions returns the CustomSizeOptions field value if set, zero value otherwise.
func (o *StorageType) GetCustomSizeOptions() string {
	if o == nil || IsNil(o.CustomSizeOptions) {
		var ret string
		return ret
	}
	return *o.CustomSizeOptions
}

// GetCustomSizeOptionsOk returns a tuple with the CustomSizeOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageType) GetCustomSizeOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.CustomSizeOptions) {
		return nil, false
	}
	return o.CustomSizeOptions, true
}

// IsSetCustomSizeOptions returns a boolean if a field has been set.
func (o *StorageType) IsSetCustomSizeOptions() bool {
	if o != nil && !IsNil(o.CustomSizeOptions) {
		return true
	}

	return false
}

// SetCustomSizeOptions gets a reference to the given string and assigns it to the CustomSizeOptions field.
func (o *StorageType) SetCustomSizeOptions(v string) {
	o.CustomSizeOptions = &v
}

func (o StorageType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayOrder) {
		toSerialize["displayOrder"] = o.DisplayOrder
	}
	if !IsNil(o.DefaultType) {
		toSerialize["defaultType"] = o.DefaultType
	}
	if !IsNil(o.CustomLabel) {
		toSerialize["customLabel"] = o.CustomLabel
	}
	if !IsNil(o.CustomSize) {
		toSerialize["customSize"] = o.CustomSize
	}
	if !IsNil(o.CustomSizeOptions) {
		toSerialize["customSizeOptions"] = o.CustomSizeOptions
	}
	return toSerialize, nil
}

type NullableStorageType struct {
	value *StorageType
	isSet bool
}

func (v NullableStorageType) Get() *StorageType {
	return v.value
}

func (v *NullableStorageType) Set(val *StorageType) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageType) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageType(val *StorageType) *NullableStorageType {
	return &NullableStorageType{value: val, isSet: true}
}

func (v NullableStorageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


