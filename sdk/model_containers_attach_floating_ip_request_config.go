/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContainersAttachFloatingIpRequestConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContainersAttachFloatingIpRequestConfig{}

// ContainersAttachFloatingIpRequestConfig struct for ContainersAttachFloatingIpRequestConfig
type ContainersAttachFloatingIpRequestConfig struct {
	// The Floating IP identifier in the format: \"ip-ID\" or \"pool-ID\".  The Options API /api/options/openStack/openstackFloatingIpOptions?containerId={{containerId}} can be used to see which options are available. 
	OsExternalNetworkId string `json:"osExternalNetworkId"`
	// Bandwidth (Mbit/s) Only the following cloud types support this parameter: Huawei, OpenTelekom 
	FloatingIpBandwidth *float32 `json:"floatingIpBandwidth,omitempty"`
}

type _ContainersAttachFloatingIpRequestConfig ContainersAttachFloatingIpRequestConfig

// NewContainersAttachFloatingIpRequestConfig instantiates a new ContainersAttachFloatingIpRequestConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainersAttachFloatingIpRequestConfig(osExternalNetworkId string) *ContainersAttachFloatingIpRequestConfig {
	this := ContainersAttachFloatingIpRequestConfig{}
	this.OsExternalNetworkId = osExternalNetworkId
	return &this
}

// NewContainersAttachFloatingIpRequestConfigWithDefaults instantiates a new ContainersAttachFloatingIpRequestConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainersAttachFloatingIpRequestConfigWithDefaults() *ContainersAttachFloatingIpRequestConfig {
	this := ContainersAttachFloatingIpRequestConfig{}
	return &this
}

// GetOsExternalNetworkId returns the OsExternalNetworkId field value
func (o *ContainersAttachFloatingIpRequestConfig) GetOsExternalNetworkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OsExternalNetworkId
}

// GetOsExternalNetworkIdOk returns a tuple with the OsExternalNetworkId field value
// and a boolean to check if the value has been set.
func (o *ContainersAttachFloatingIpRequestConfig) GetOsExternalNetworkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OsExternalNetworkId, true
}

// SetOsExternalNetworkId sets field value
func (o *ContainersAttachFloatingIpRequestConfig) SetOsExternalNetworkId(v string) {
	o.OsExternalNetworkId = v
}

// GetFloatingIpBandwidth returns the FloatingIpBandwidth field value if set, zero value otherwise.
func (o *ContainersAttachFloatingIpRequestConfig) GetFloatingIpBandwidth() float32 {
	if o == nil || IsNil(o.FloatingIpBandwidth) {
		var ret float32
		return ret
	}
	return *o.FloatingIpBandwidth
}

// GetFloatingIpBandwidthOk returns a tuple with the FloatingIpBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainersAttachFloatingIpRequestConfig) GetFloatingIpBandwidthOk() (*float32, bool) {
	if o == nil || IsNil(o.FloatingIpBandwidth) {
		return nil, false
	}
	return o.FloatingIpBandwidth, true
}

// IsSetFloatingIpBandwidth returns a boolean if a field has been set.
func (o *ContainersAttachFloatingIpRequestConfig) IsSetFloatingIpBandwidth() bool {
	if o != nil && !IsNil(o.FloatingIpBandwidth) {
		return true
	}

	return false
}

// SetFloatingIpBandwidth gets a reference to the given float32 and assigns it to the FloatingIpBandwidth field.
func (o *ContainersAttachFloatingIpRequestConfig) SetFloatingIpBandwidth(v float32) {
	o.FloatingIpBandwidth = &v
}

func (o ContainersAttachFloatingIpRequestConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContainersAttachFloatingIpRequestConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["osExternalNetworkId"] = o.OsExternalNetworkId
	if !IsNil(o.FloatingIpBandwidth) {
		toSerialize["floatingIpBandwidth"] = o.FloatingIpBandwidth
	}
	return toSerialize, nil
}

func (o *ContainersAttachFloatingIpRequestConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"osExternalNetworkId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContainersAttachFloatingIpRequestConfig := _ContainersAttachFloatingIpRequestConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContainersAttachFloatingIpRequestConfig)

	if err != nil {
		return err
	}

	*o = ContainersAttachFloatingIpRequestConfig(varContainersAttachFloatingIpRequestConfig)

	return err
}

type NullableContainersAttachFloatingIpRequestConfig struct {
	value *ContainersAttachFloatingIpRequestConfig
	isSet bool
}

func (v NullableContainersAttachFloatingIpRequestConfig) Get() *ContainersAttachFloatingIpRequestConfig {
	return v.value
}

func (v *NullableContainersAttachFloatingIpRequestConfig) Set(val *ContainersAttachFloatingIpRequestConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableContainersAttachFloatingIpRequestConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableContainersAttachFloatingIpRequestConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainersAttachFloatingIpRequestConfig(val *ContainersAttachFloatingIpRequestConfig) *NullableContainersAttachFloatingIpRequestConfig {
	return &NullableContainersAttachFloatingIpRequestConfig{value: val, isSet: true}
}

func (v NullableContainersAttachFloatingIpRequestConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainersAttachFloatingIpRequestConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


