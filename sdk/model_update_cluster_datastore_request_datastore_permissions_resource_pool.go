/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateClusterDatastoreRequestDatastorePermissionsResourcePool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateClusterDatastoreRequestDatastorePermissionsResourcePool{}

// UpdateClusterDatastoreRequestDatastorePermissionsResourcePool struct for UpdateClusterDatastoreRequestDatastorePermissionsResourcePool
type UpdateClusterDatastoreRequestDatastorePermissionsResourcePool struct {
	// Visibility
	Visibility           *string                `json:"visibility,omitempty"`
	AdditionalProperties map[string]interface{} `json:",remain"`
}

type _UpdateClusterDatastoreRequestDatastorePermissionsResourcePool UpdateClusterDatastoreRequestDatastorePermissionsResourcePool

// NewUpdateClusterDatastoreRequestDatastorePermissionsResourcePool instantiates a new UpdateClusterDatastoreRequestDatastorePermissionsResourcePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateClusterDatastoreRequestDatastorePermissionsResourcePool() *UpdateClusterDatastoreRequestDatastorePermissionsResourcePool {
	this := UpdateClusterDatastoreRequestDatastorePermissionsResourcePool{}
	return &this
}

// NewUpdateClusterDatastoreRequestDatastorePermissionsResourcePoolWithDefaults instantiates a new UpdateClusterDatastoreRequestDatastorePermissionsResourcePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateClusterDatastoreRequestDatastorePermissionsResourcePoolWithDefaults() *UpdateClusterDatastoreRequestDatastorePermissionsResourcePool {
	this := UpdateClusterDatastoreRequestDatastorePermissionsResourcePool{}
	return &this
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePool) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePool) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// IsSetVisibility returns a boolean if a field has been set.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePool) IsSetVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePool) SetVisibility(v string) {
	o.Visibility = &v
}

func (o UpdateClusterDatastoreRequestDatastorePermissionsResourcePool) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateClusterDatastoreRequestDatastorePermissionsResourcePool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePool) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
