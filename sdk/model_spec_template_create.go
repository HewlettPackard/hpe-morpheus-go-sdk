/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SpecTemplateCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpecTemplateCreate{}

// SpecTemplateCreate struct for SpecTemplateCreate
type SpecTemplateCreate struct {
	// Spec template name
	Name string `json:"name"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
	Type AddSpecTemplateRequestSpecTemplateType `json:"type"`
	File AddSpecTemplateRequestSpecTemplateFile `json:"file"`
	Config *AddSpecTemplateRequestSpecTemplateConfig `json:"config,omitempty"`
}

type _SpecTemplateCreate SpecTemplateCreate

// NewSpecTemplateCreate instantiates a new SpecTemplateCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecTemplateCreate(name string, type_ AddSpecTemplateRequestSpecTemplateType, file AddSpecTemplateRequestSpecTemplateFile) *SpecTemplateCreate {
	this := SpecTemplateCreate{}
	this.Name = name
	this.Type = type_
	this.File = file
	return &this
}

// NewSpecTemplateCreateWithDefaults instantiates a new SpecTemplateCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecTemplateCreateWithDefaults() *SpecTemplateCreate {
	this := SpecTemplateCreate{}
	return &this
}

// GetName returns the Name field value
func (o *SpecTemplateCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpecTemplateCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpecTemplateCreate) SetName(v string) {
	o.Name = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *SpecTemplateCreate) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecTemplateCreate) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// IsSetLabels returns a boolean if a field has been set.
func (o *SpecTemplateCreate) IsSetLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *SpecTemplateCreate) SetLabels(v []string) {
	o.Labels = v
}

// GetType returns the Type field value
func (o *SpecTemplateCreate) GetType() AddSpecTemplateRequestSpecTemplateType {
	if o == nil {
		var ret AddSpecTemplateRequestSpecTemplateType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SpecTemplateCreate) GetTypeOk() (*AddSpecTemplateRequestSpecTemplateType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SpecTemplateCreate) SetType(v AddSpecTemplateRequestSpecTemplateType) {
	o.Type = v
}

// GetFile returns the File field value
func (o *SpecTemplateCreate) GetFile() AddSpecTemplateRequestSpecTemplateFile {
	if o == nil {
		var ret AddSpecTemplateRequestSpecTemplateFile
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *SpecTemplateCreate) GetFileOk() (*AddSpecTemplateRequestSpecTemplateFile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *SpecTemplateCreate) SetFile(v AddSpecTemplateRequestSpecTemplateFile) {
	o.File = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *SpecTemplateCreate) GetConfig() AddSpecTemplateRequestSpecTemplateConfig {
	if o == nil || IsNil(o.Config) {
		var ret AddSpecTemplateRequestSpecTemplateConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecTemplateCreate) GetConfigOk() (*AddSpecTemplateRequestSpecTemplateConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// IsSetConfig returns a boolean if a field has been set.
func (o *SpecTemplateCreate) IsSetConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given AddSpecTemplateRequestSpecTemplateConfig and assigns it to the Config field.
func (o *SpecTemplateCreate) SetConfig(v AddSpecTemplateRequestSpecTemplateConfig) {
	o.Config = &v
}

func (o SpecTemplateCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpecTemplateCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["type"] = o.Type
	toSerialize["file"] = o.File
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

func (o *SpecTemplateCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
		"file",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpecTemplateCreate := _SpecTemplateCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSpecTemplateCreate)

	if err != nil {
		return err
	}

	*o = SpecTemplateCreate(varSpecTemplateCreate)

	return err
}

type NullableSpecTemplateCreate struct {
	value *SpecTemplateCreate
	isSet bool
}

func (v NullableSpecTemplateCreate) Get() *SpecTemplateCreate {
	return v.value
}

func (v *NullableSpecTemplateCreate) Set(val *SpecTemplateCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecTemplateCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecTemplateCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecTemplateCreate(val *SpecTemplateCreate) *NullableSpecTemplateCreate {
	return &NullableSpecTemplateCreate{value: val, isSet: true}
}

func (v NullableSpecTemplateCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecTemplateCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


