/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// WhitelabelSettingsAPIService WhitelabelSettingsAPI service
type WhitelabelSettingsAPIService service

type ApiGetWhitelabelImageRequest struct {
	ctx context.Context
	ApiService *WhitelabelSettingsAPIService
	imageType string
}

func (r ApiGetWhitelabelImageRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetWhitelabelImageExecute(r)
}

/*
GetWhitelabelImage Download Image

Downloads the specified image.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param imageType Valid image types
 @return ApiGetWhitelabelImageRequest
*/
func (a *WhitelabelSettingsAPIService) GetWhitelabelImage(ctx context.Context, imageType string) ApiGetWhitelabelImageRequest {
	return ApiGetWhitelabelImageRequest{
		ApiService: a,
		ctx: ctx,
		imageType: imageType,
	}
}

// Execute executes the request
//  @return *os.File
func (a *WhitelabelSettingsAPIService) GetWhitelabelImageExecute(r ApiGetWhitelabelImageRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WhitelabelSettingsAPIService.GetWhitelabelImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/whitelabel-settings/images/{imageType}"
	localVarPath = strings.Replace(localVarPath, "{"+"imageType"+"}", url.PathEscape(parameterValueToString(r.imageType, "imageType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/ico", "image/jpeg", "image/png", "image/svg+xml", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ListActivity4XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v ListActivity5XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListWhitelabelSettingsRequest struct {
	ctx context.Context
	ApiService *WhitelabelSettingsAPIService
}

func (r ApiListWhitelabelSettingsRequest) Execute() (*ListWhitelabelSettings200Response, *http.Response, error) {
	return r.ApiService.ListWhitelabelSettingsExecute(r)
}

/*
ListWhitelabelSettings Get Whitelabel Settings

This endpoint retrieves whitelabel settings.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListWhitelabelSettingsRequest
*/
func (a *WhitelabelSettingsAPIService) ListWhitelabelSettings(ctx context.Context) ApiListWhitelabelSettingsRequest {
	return ApiListWhitelabelSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListWhitelabelSettings200Response
func (a *WhitelabelSettingsAPIService) ListWhitelabelSettingsExecute(r ApiListWhitelabelSettingsRequest) (*ListWhitelabelSettings200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListWhitelabelSettings200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WhitelabelSettingsAPIService.ListWhitelabelSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/whitelabel-settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ListActivity4XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v ListActivity5XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveWhitelabelImageRequest struct {
	ctx context.Context
	ApiService *WhitelabelSettingsAPIService
	imageType string
}

func (r ApiRemoveWhitelabelImageRequest) Execute() (*DeleteAlerts200Response, *http.Response, error) {
	return r.ApiService.RemoveWhitelabelImageExecute(r)
}

/*
RemoveWhitelabelImage Reset Image

Resets the specified image to the Morpheus default.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param imageType Valid image types
 @return ApiRemoveWhitelabelImageRequest
*/
func (a *WhitelabelSettingsAPIService) RemoveWhitelabelImage(ctx context.Context, imageType string) ApiRemoveWhitelabelImageRequest {
	return ApiRemoveWhitelabelImageRequest{
		ApiService: a,
		ctx: ctx,
		imageType: imageType,
	}
}

// Execute executes the request
//  @return DeleteAlerts200Response
func (a *WhitelabelSettingsAPIService) RemoveWhitelabelImageExecute(r ApiRemoveWhitelabelImageRequest) (*DeleteAlerts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteAlerts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WhitelabelSettingsAPIService.RemoveWhitelabelImage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/whitelabel-settings/images/{imageType}"
	localVarPath = strings.Replace(localVarPath, "{"+"imageType"+"}", url.PathEscape(parameterValueToString(r.imageType, "imageType")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ListActivity4XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v ListActivity5XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateWhitelabelImagesRequest struct {
	ctx context.Context
	ApiService *WhitelabelSettingsAPIService
	headerLogoFile *os.File
	resetHeaderLogo *bool
	footerLogoFile *os.File
	resetFooterLogo *bool
	loginLogoFile *os.File
	resetLoginLogo *bool
	faviconFile *os.File
	resetFaviconLogo *bool
}

// Header logo image file, valid image types &#x60;png|jpg|svg&#x60;
func (r ApiUpdateWhitelabelImagesRequest) HeaderLogoFile(headerLogoFile *os.File) ApiUpdateWhitelabelImagesRequest {
	r.headerLogoFile = headerLogoFile
	return r
}

// Resets header logo to default
func (r ApiUpdateWhitelabelImagesRequest) ResetHeaderLogo(resetHeaderLogo bool) ApiUpdateWhitelabelImagesRequest {
	r.resetHeaderLogo = &resetHeaderLogo
	return r
}

// Footer logo image file, valid image types &#x60;png|jpg|svg&#x60;
func (r ApiUpdateWhitelabelImagesRequest) FooterLogoFile(footerLogoFile *os.File) ApiUpdateWhitelabelImagesRequest {
	r.footerLogoFile = footerLogoFile
	return r
}

// Resets footer logo to default
func (r ApiUpdateWhitelabelImagesRequest) ResetFooterLogo(resetFooterLogo bool) ApiUpdateWhitelabelImagesRequest {
	r.resetFooterLogo = &resetFooterLogo
	return r
}

// Login logo image file, valid image types &#x60;png|jpg|svg&#x60;
func (r ApiUpdateWhitelabelImagesRequest) LoginLogoFile(loginLogoFile *os.File) ApiUpdateWhitelabelImagesRequest {
	r.loginLogoFile = loginLogoFile
	return r
}

// Resets login logo to default
func (r ApiUpdateWhitelabelImagesRequest) ResetLoginLogo(resetLoginLogo bool) ApiUpdateWhitelabelImagesRequest {
	r.resetLoginLogo = &resetLoginLogo
	return r
}

// Favicon image file, valid image type ico
func (r ApiUpdateWhitelabelImagesRequest) FaviconFile(faviconFile *os.File) ApiUpdateWhitelabelImagesRequest {
	r.faviconFile = faviconFile
	return r
}

// Resets favicon logo to default
func (r ApiUpdateWhitelabelImagesRequest) ResetFaviconLogo(resetFaviconLogo bool) ApiUpdateWhitelabelImagesRequest {
	r.resetFaviconLogo = &resetFaviconLogo
	return r
}

func (r ApiUpdateWhitelabelImagesRequest) Execute() (*DeleteAlerts200Response, *http.Response, error) {
	return r.ApiService.UpdateWhitelabelImagesExecute(r)
}

/*
UpdateWhitelabelImages Update Images

Uploads whitelabel images. Expects multipart form data as the request format, not JSON.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateWhitelabelImagesRequest
*/
func (a *WhitelabelSettingsAPIService) UpdateWhitelabelImages(ctx context.Context) ApiUpdateWhitelabelImagesRequest {
	return ApiUpdateWhitelabelImagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeleteAlerts200Response
func (a *WhitelabelSettingsAPIService) UpdateWhitelabelImagesExecute(r ApiUpdateWhitelabelImagesRequest) (*DeleteAlerts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteAlerts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WhitelabelSettingsAPIService.UpdateWhitelabelImages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/whitelabel-settings/images"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var headerLogoFileLocalVarFormFileName string
	var headerLogoFileLocalVarFileName     string
	var headerLogoFileLocalVarFileBytes    []byte

	headerLogoFileLocalVarFormFileName = "headerLogo.file"
	headerLogoFileLocalVarFile := r.headerLogoFile

	if headerLogoFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(headerLogoFileLocalVarFile)

		headerLogoFileLocalVarFileBytes = fbs
		headerLogoFileLocalVarFileName = headerLogoFileLocalVarFile.Name()
		headerLogoFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: headerLogoFileLocalVarFileBytes, fileName: headerLogoFileLocalVarFileName, formFileName: headerLogoFileLocalVarFormFileName})
	}
	if r.resetHeaderLogo != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "resetHeaderLogo", r.resetHeaderLogo, "", "")
	}
	var footerLogoFileLocalVarFormFileName string
	var footerLogoFileLocalVarFileName     string
	var footerLogoFileLocalVarFileBytes    []byte

	footerLogoFileLocalVarFormFileName = "footerLogo.file"
	footerLogoFileLocalVarFile := r.footerLogoFile

	if footerLogoFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(footerLogoFileLocalVarFile)

		footerLogoFileLocalVarFileBytes = fbs
		footerLogoFileLocalVarFileName = footerLogoFileLocalVarFile.Name()
		footerLogoFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: footerLogoFileLocalVarFileBytes, fileName: footerLogoFileLocalVarFileName, formFileName: footerLogoFileLocalVarFormFileName})
	}
	if r.resetFooterLogo != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "resetFooterLogo", r.resetFooterLogo, "", "")
	}
	var loginLogoFileLocalVarFormFileName string
	var loginLogoFileLocalVarFileName     string
	var loginLogoFileLocalVarFileBytes    []byte

	loginLogoFileLocalVarFormFileName = "loginLogo.file"
	loginLogoFileLocalVarFile := r.loginLogoFile

	if loginLogoFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(loginLogoFileLocalVarFile)

		loginLogoFileLocalVarFileBytes = fbs
		loginLogoFileLocalVarFileName = loginLogoFileLocalVarFile.Name()
		loginLogoFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: loginLogoFileLocalVarFileBytes, fileName: loginLogoFileLocalVarFileName, formFileName: loginLogoFileLocalVarFormFileName})
	}
	if r.resetLoginLogo != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "resetLoginLogo", r.resetLoginLogo, "", "")
	}
	var faviconFileLocalVarFormFileName string
	var faviconFileLocalVarFileName     string
	var faviconFileLocalVarFileBytes    []byte

	faviconFileLocalVarFormFileName = "favicon.file"
	faviconFileLocalVarFile := r.faviconFile

	if faviconFileLocalVarFile != nil {
		fbs, _ := io.ReadAll(faviconFileLocalVarFile)

		faviconFileLocalVarFileBytes = fbs
		faviconFileLocalVarFileName = faviconFileLocalVarFile.Name()
		faviconFileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: faviconFileLocalVarFileBytes, fileName: faviconFileLocalVarFileName, formFileName: faviconFileLocalVarFormFileName})
	}
	if r.resetFaviconLogo != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "resetFaviconLogo", r.resetFaviconLogo, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ListActivity4XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v ListActivity5XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateWhitelabelSettingsRequest struct {
	ctx context.Context
	ApiService *WhitelabelSettingsAPIService
	updateWhitelabelSettingsRequest *UpdateWhitelabelSettingsRequest
}

func (r ApiUpdateWhitelabelSettingsRequest) UpdateWhitelabelSettingsRequest(updateWhitelabelSettingsRequest UpdateWhitelabelSettingsRequest) ApiUpdateWhitelabelSettingsRequest {
	r.updateWhitelabelSettingsRequest = &updateWhitelabelSettingsRequest
	return r
}

func (r ApiUpdateWhitelabelSettingsRequest) Execute() (*DeleteAlerts200Response, *http.Response, error) {
	return r.ApiService.UpdateWhitelabelSettingsExecute(r)
}

/*
UpdateWhitelabelSettings Update Whitelabel Settings

Update Whitelabel Settings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateWhitelabelSettingsRequest
*/
func (a *WhitelabelSettingsAPIService) UpdateWhitelabelSettings(ctx context.Context) ApiUpdateWhitelabelSettingsRequest {
	return ApiUpdateWhitelabelSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeleteAlerts200Response
func (a *WhitelabelSettingsAPIService) UpdateWhitelabelSettingsExecute(r ApiUpdateWhitelabelSettingsRequest) (*DeleteAlerts200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteAlerts200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WhitelabelSettingsAPIService.UpdateWhitelabelSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/whitelabel-settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateWhitelabelSettingsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode >= 400 && localVarHTTPResponse.StatusCode < 500 {
			var v ListActivity4XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode >= 500 {
			var v ListActivity5XXResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
