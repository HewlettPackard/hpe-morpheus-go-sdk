/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddPrices200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddPrices200Response{}

// AddPrices200Response struct for AddPrices200Response
type AddPrices200Response struct {
	Price *ListPrices200ResponseAllOfPricesInner `json:"price,omitempty"`
	Success *bool `json:"success,omitempty"`
}

// NewAddPrices200Response instantiates a new AddPrices200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddPrices200Response() *AddPrices200Response {
	this := AddPrices200Response{}
	return &this
}

// NewAddPrices200ResponseWithDefaults instantiates a new AddPrices200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddPrices200ResponseWithDefaults() *AddPrices200Response {
	this := AddPrices200Response{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *AddPrices200Response) GetPrice() ListPrices200ResponseAllOfPricesInner {
	if o == nil || IsNil(o.Price) {
		var ret ListPrices200ResponseAllOfPricesInner
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPrices200Response) GetPriceOk() (*ListPrices200ResponseAllOfPricesInner, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// IsSetPrice returns a boolean if a field has been set.
func (o *AddPrices200Response) IsSetPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given ListPrices200ResponseAllOfPricesInner and assigns it to the Price field.
func (o *AddPrices200Response) SetPrice(v ListPrices200ResponseAllOfPricesInner) {
	o.Price = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *AddPrices200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPrices200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// IsSetSuccess returns a boolean if a field has been set.
func (o *AddPrices200Response) IsSetSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *AddPrices200Response) SetSuccess(v bool) {
	o.Success = &v
}

func (o AddPrices200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddPrices200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return toSerialize, nil
}

type NullableAddPrices200Response struct {
	value *AddPrices200Response
	isSet bool
}

func (v NullableAddPrices200Response) Get() *AddPrices200Response {
	return v.value
}

func (v *NullableAddPrices200Response) Set(val *AddPrices200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddPrices200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddPrices200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddPrices200Response(val *AddPrices200Response) *NullableAddPrices200Response {
	return &NullableAddPrices200Response{value: val, isSet: true}
}

func (v NullableAddPrices200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddPrices200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


