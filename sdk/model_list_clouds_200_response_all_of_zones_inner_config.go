/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)


// ListClouds200ResponseAllOfZonesInnerConfig struct for ListClouds200ResponseAllOfZonesInnerConfig
type ListClouds200ResponseAllOfZonesInnerConfig struct {
	ListClouds200ResponseAllOfZonesInnerConfigAnyOf *ListClouds200ResponseAllOfZonesInnerConfigAnyOf
	ListClouds200ResponseAllOfZonesInnerConfigAnyOf1 *ListClouds200ResponseAllOfZonesInnerConfigAnyOf1
	ListClouds200ResponseAllOfZonesInnerConfigAnyOf2 *ListClouds200ResponseAllOfZonesInnerConfigAnyOf2
	ListClouds200ResponseAllOfZonesInnerConfigAnyOf3 *ListClouds200ResponseAllOfZonesInnerConfigAnyOf3
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ListClouds200ResponseAllOfZonesInnerConfig) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ListClouds200ResponseAllOfZonesInnerConfigAnyOf
	err = json.Unmarshal(data, &dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf);
	if err == nil {
		jsonListClouds200ResponseAllOfZonesInnerConfigAnyOf, _ := json.Marshal(dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf)
		if string(jsonListClouds200ResponseAllOfZonesInnerConfigAnyOf) == "{}" { // empty struct
			dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf = nil
		} else {
			return nil // data stored in dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf, return on the first match
		}
	} else {
		dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf = nil
	}

	// try to unmarshal JSON data into ListClouds200ResponseAllOfZonesInnerConfigAnyOf1
	err = json.Unmarshal(data, &dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf1);
	if err == nil {
		jsonListClouds200ResponseAllOfZonesInnerConfigAnyOf1, _ := json.Marshal(dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf1)
		if string(jsonListClouds200ResponseAllOfZonesInnerConfigAnyOf1) == "{}" { // empty struct
			dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf1 = nil
		} else {
			return nil // data stored in dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf1, return on the first match
		}
	} else {
		dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf1 = nil
	}

	// try to unmarshal JSON data into ListClouds200ResponseAllOfZonesInnerConfigAnyOf2
	err = json.Unmarshal(data, &dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf2);
	if err == nil {
		jsonListClouds200ResponseAllOfZonesInnerConfigAnyOf2, _ := json.Marshal(dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf2)
		if string(jsonListClouds200ResponseAllOfZonesInnerConfigAnyOf2) == "{}" { // empty struct
			dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf2 = nil
		} else {
			return nil // data stored in dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf2, return on the first match
		}
	} else {
		dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf2 = nil
	}

	// try to unmarshal JSON data into ListClouds200ResponseAllOfZonesInnerConfigAnyOf3
	err = json.Unmarshal(data, &dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf3);
	if err == nil {
		jsonListClouds200ResponseAllOfZonesInnerConfigAnyOf3, _ := json.Marshal(dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf3)
		if string(jsonListClouds200ResponseAllOfZonesInnerConfigAnyOf3) == "{}" { // empty struct
			dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf3 = nil
		} else {
			return nil // data stored in dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf3, return on the first match
		}
	} else {
		dst.ListClouds200ResponseAllOfZonesInnerConfigAnyOf3 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ListClouds200ResponseAllOfZonesInnerConfig)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListClouds200ResponseAllOfZonesInnerConfig) MarshalJSON() ([]byte, error) {
	if src.ListClouds200ResponseAllOfZonesInnerConfigAnyOf != nil {
		return json.Marshal(&src.ListClouds200ResponseAllOfZonesInnerConfigAnyOf)
	}

	if src.ListClouds200ResponseAllOfZonesInnerConfigAnyOf1 != nil {
		return json.Marshal(&src.ListClouds200ResponseAllOfZonesInnerConfigAnyOf1)
	}

	if src.ListClouds200ResponseAllOfZonesInnerConfigAnyOf2 != nil {
		return json.Marshal(&src.ListClouds200ResponseAllOfZonesInnerConfigAnyOf2)
	}

	if src.ListClouds200ResponseAllOfZonesInnerConfigAnyOf3 != nil {
		return json.Marshal(&src.ListClouds200ResponseAllOfZonesInnerConfigAnyOf3)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableListClouds200ResponseAllOfZonesInnerConfig struct {
	value *ListClouds200ResponseAllOfZonesInnerConfig
	isSet bool
}

func (v NullableListClouds200ResponseAllOfZonesInnerConfig) Get() *ListClouds200ResponseAllOfZonesInnerConfig {
	return v.value
}

func (v *NullableListClouds200ResponseAllOfZonesInnerConfig) Set(val *ListClouds200ResponseAllOfZonesInnerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableListClouds200ResponseAllOfZonesInnerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableListClouds200ResponseAllOfZonesInnerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListClouds200ResponseAllOfZonesInnerConfig(val *ListClouds200ResponseAllOfZonesInnerConfig) *NullableListClouds200ResponseAllOfZonesInnerConfig {
	return &NullableListClouds200ResponseAllOfZonesInnerConfig{value: val, isSet: true}
}

func (v NullableListClouds200ResponseAllOfZonesInnerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListClouds200ResponseAllOfZonesInnerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


