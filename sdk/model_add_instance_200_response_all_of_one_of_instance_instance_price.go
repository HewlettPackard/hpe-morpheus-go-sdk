/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddInstance200ResponseAllOfOneOfInstanceInstancePrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddInstance200ResponseAllOfOneOfInstanceInstancePrice{}

// AddInstance200ResponseAllOfOneOfInstanceInstancePrice struct for AddInstance200ResponseAllOfOneOfInstanceInstancePrice
type AddInstance200ResponseAllOfOneOfInstanceInstancePrice struct {
	Price                *float32               `json:"price,omitempty"`
	Cost                 *float32               `json:"cost,omitempty"`
	Currency             *string                `json:"currency,omitempty"`
	Unit                 *string                `json:"unit,omitempty"`
	AdditionalProperties map[string]interface{} `json:",remain"`
}

type _AddInstance200ResponseAllOfOneOfInstanceInstancePrice AddInstance200ResponseAllOfOneOfInstanceInstancePrice

// NewAddInstance200ResponseAllOfOneOfInstanceInstancePrice instantiates a new AddInstance200ResponseAllOfOneOfInstanceInstancePrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddInstance200ResponseAllOfOneOfInstanceInstancePrice() *AddInstance200ResponseAllOfOneOfInstanceInstancePrice {
	this := AddInstance200ResponseAllOfOneOfInstanceInstancePrice{}
	return &this
}

// NewAddInstance200ResponseAllOfOneOfInstanceInstancePriceWithDefaults instantiates a new AddInstance200ResponseAllOfOneOfInstanceInstancePrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddInstance200ResponseAllOfOneOfInstanceInstancePriceWithDefaults() *AddInstance200ResponseAllOfOneOfInstanceInstancePrice {
	this := AddInstance200ResponseAllOfOneOfInstanceInstancePrice{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// IsSetPrice returns a boolean if a field has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) IsSetPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) SetPrice(v float32) {
	o.Price = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) GetCost() float32 {
	if o == nil || IsNil(o.Cost) {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) GetCostOk() (*float32, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// IsSetCost returns a boolean if a field has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) IsSetCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) SetCost(v float32) {
	o.Cost = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// IsSetCurrency returns a boolean if a field has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) IsSetCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) SetCurrency(v string) {
	o.Currency = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// IsSetUnit returns a boolean if a field has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) IsSetUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) SetUnit(v string) {
	o.Unit = &v
}

func (o AddInstance200ResponseAllOfOneOfInstanceInstancePrice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddInstance200ResponseAllOfOneOfInstanceInstancePrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *AddInstance200ResponseAllOfOneOfInstanceInstancePrice) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
