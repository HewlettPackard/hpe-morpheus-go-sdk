/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateNetworkDhcpRelayRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNetworkDhcpRelayRequest{}

// UpdateNetworkDhcpRelayRequest The parameters for update a Network DHCP Relay is type dependent. The following lists the common parameters. Get a specific network type to list available options for the network relay type. 
type UpdateNetworkDhcpRelayRequest struct {
	NetworkDhcpRelay map[string]interface{} `json:"networkDhcpRelay,omitempty"`
}

// NewUpdateNetworkDhcpRelayRequest instantiates a new UpdateNetworkDhcpRelayRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNetworkDhcpRelayRequest() *UpdateNetworkDhcpRelayRequest {
	this := UpdateNetworkDhcpRelayRequest{}
	return &this
}

// NewUpdateNetworkDhcpRelayRequestWithDefaults instantiates a new UpdateNetworkDhcpRelayRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNetworkDhcpRelayRequestWithDefaults() *UpdateNetworkDhcpRelayRequest {
	this := UpdateNetworkDhcpRelayRequest{}
	return &this
}

// GetNetworkDhcpRelay returns the NetworkDhcpRelay field value if set, zero value otherwise.
func (o *UpdateNetworkDhcpRelayRequest) GetNetworkDhcpRelay() map[string]interface{} {
	if o == nil || IsNil(o.NetworkDhcpRelay) {
		var ret map[string]interface{}
		return ret
	}
	return o.NetworkDhcpRelay
}

// GetNetworkDhcpRelayOk returns a tuple with the NetworkDhcpRelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkDhcpRelayRequest) GetNetworkDhcpRelayOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.NetworkDhcpRelay) {
		return map[string]interface{}{}, false
	}
	return o.NetworkDhcpRelay, true
}

// IsSetNetworkDhcpRelay returns a boolean if a field has been set.
func (o *UpdateNetworkDhcpRelayRequest) IsSetNetworkDhcpRelay() bool {
	if o != nil && !IsNil(o.NetworkDhcpRelay) {
		return true
	}

	return false
}

// SetNetworkDhcpRelay gets a reference to the given map[string]interface{} and assigns it to the NetworkDhcpRelay field.
func (o *UpdateNetworkDhcpRelayRequest) SetNetworkDhcpRelay(v map[string]interface{}) {
	o.NetworkDhcpRelay = v
}

func (o UpdateNetworkDhcpRelayRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNetworkDhcpRelayRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkDhcpRelay) {
		toSerialize["networkDhcpRelay"] = o.NetworkDhcpRelay
	}
	return toSerialize, nil
}

type NullableUpdateNetworkDhcpRelayRequest struct {
	value *UpdateNetworkDhcpRelayRequest
	isSet bool
}

func (v NullableUpdateNetworkDhcpRelayRequest) Get() *UpdateNetworkDhcpRelayRequest {
	return v.value
}

func (v *NullableUpdateNetworkDhcpRelayRequest) Set(val *UpdateNetworkDhcpRelayRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkDhcpRelayRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkDhcpRelayRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkDhcpRelayRequest(val *UpdateNetworkDhcpRelayRequest) *NullableUpdateNetworkDhcpRelayRequest {
	return &NullableUpdateNetworkDhcpRelayRequest{value: val, isSet: true}
}

func (v NullableUpdateNetworkDhcpRelayRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkDhcpRelayRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


