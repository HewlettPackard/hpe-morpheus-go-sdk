/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ListDeploymentVersions200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListDeploymentVersions200Response{}

// ListDeploymentVersions200Response struct for ListDeploymentVersions200Response
type ListDeploymentVersions200Response struct {
	Versions []ListDeploymentVersions200ResponseAllOfVersionsInner `json:"versions,omitempty"`
	Meta *ListActivity200ResponseAllOfMeta `json:"meta,omitempty"`
}

// NewListDeploymentVersions200Response instantiates a new ListDeploymentVersions200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListDeploymentVersions200Response() *ListDeploymentVersions200Response {
	this := ListDeploymentVersions200Response{}
	return &this
}

// NewListDeploymentVersions200ResponseWithDefaults instantiates a new ListDeploymentVersions200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListDeploymentVersions200ResponseWithDefaults() *ListDeploymentVersions200Response {
	this := ListDeploymentVersions200Response{}
	return &this
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *ListDeploymentVersions200Response) GetVersions() []ListDeploymentVersions200ResponseAllOfVersionsInner {
	if o == nil || IsNil(o.Versions) {
		var ret []ListDeploymentVersions200ResponseAllOfVersionsInner
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDeploymentVersions200Response) GetVersionsOk() ([]ListDeploymentVersions200ResponseAllOfVersionsInner, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// IsSetVersions returns a boolean if a field has been set.
func (o *ListDeploymentVersions200Response) IsSetVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []ListDeploymentVersions200ResponseAllOfVersionsInner and assigns it to the Versions field.
func (o *ListDeploymentVersions200Response) SetVersions(v []ListDeploymentVersions200ResponseAllOfVersionsInner) {
	o.Versions = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ListDeploymentVersions200Response) GetMeta() ListActivity200ResponseAllOfMeta {
	if o == nil || IsNil(o.Meta) {
		var ret ListActivity200ResponseAllOfMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListDeploymentVersions200Response) GetMetaOk() (*ListActivity200ResponseAllOfMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// IsSetMeta returns a boolean if a field has been set.
func (o *ListDeploymentVersions200Response) IsSetMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ListActivity200ResponseAllOfMeta and assigns it to the Meta field.
func (o *ListDeploymentVersions200Response) SetMeta(v ListActivity200ResponseAllOfMeta) {
	o.Meta = &v
}

func (o ListDeploymentVersions200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListDeploymentVersions200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableListDeploymentVersions200Response struct {
	value *ListDeploymentVersions200Response
	isSet bool
}

func (v NullableListDeploymentVersions200Response) Get() *ListDeploymentVersions200Response {
	return v.value
}

func (v *NullableListDeploymentVersions200Response) Set(val *ListDeploymentVersions200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListDeploymentVersions200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListDeploymentVersions200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListDeploymentVersions200Response(val *ListDeploymentVersions200Response) *NullableListDeploymentVersions200Response {
	return &NullableListDeploymentVersions200Response{value: val, isSet: true}
}

func (v NullableListDeploymentVersions200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListDeploymentVersions200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


