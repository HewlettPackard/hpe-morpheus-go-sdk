/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PolicyCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyCreate{}

// PolicyCreate struct for PolicyCreate
type PolicyCreate struct {
	// A name for the policy
	Name string `json:"name"`
	// A description for the policy
	Description *string `json:"description,omitempty"`
	PolicyType AddPoliciesRequestPolicyPolicyType `json:"policyType"`
	Config AddPoliciesRequestPolicyConfig `json:"config"`
	// Set to false to disable
	Enabled *bool `json:"enabled,omitempty"`
	// Scope object type.  If none specified, will default to Global (null)
	RefType *string `json:"refType,omitempty"`
	// Scope object ID (`group`,`cloud`,`user`, etc)
	RefId *int64 `json:"refId,omitempty"`
	// Array of tenants to scope the policy to
	Accounts []int64 `json:"accounts,omitempty"`
	// Apply individually to each user in role.  Only when `refType` equals `Role`
	EachUser *bool `json:"eachUser,omitempty"`
}

type _PolicyCreate PolicyCreate

// NewPolicyCreate instantiates a new PolicyCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyCreate(name string, policyType AddPoliciesRequestPolicyPolicyType, config AddPoliciesRequestPolicyConfig) *PolicyCreate {
	this := PolicyCreate{}
	this.Name = name
	this.PolicyType = policyType
	this.Config = config
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// NewPolicyCreateWithDefaults instantiates a new PolicyCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyCreateWithDefaults() *PolicyCreate {
	this := PolicyCreate{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetName returns the Name field value
func (o *PolicyCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PolicyCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PolicyCreate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *PolicyCreate) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PolicyCreate) SetDescription(v string) {
	o.Description = &v
}

// GetPolicyType returns the PolicyType field value
func (o *PolicyCreate) GetPolicyType() AddPoliciesRequestPolicyPolicyType {
	if o == nil {
		var ret AddPoliciesRequestPolicyPolicyType
		return ret
	}

	return o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetPolicyTypeOk() (*AddPoliciesRequestPolicyPolicyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyType, true
}

// SetPolicyType sets field value
func (o *PolicyCreate) SetPolicyType(v AddPoliciesRequestPolicyPolicyType) {
	o.PolicyType = v
}

// GetConfig returns the Config field value
func (o *PolicyCreate) GetConfig() AddPoliciesRequestPolicyConfig {
	if o == nil {
		var ret AddPoliciesRequestPolicyConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetConfigOk() (*AddPoliciesRequestPolicyConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *PolicyCreate) SetConfig(v AddPoliciesRequestPolicyConfig) {
	o.Config = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PolicyCreate) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// IsSetEnabled returns a boolean if a field has been set.
func (o *PolicyCreate) IsSetEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PolicyCreate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRefType returns the RefType field value if set, zero value otherwise.
func (o *PolicyCreate) GetRefType() string {
	if o == nil || IsNil(o.RefType) {
		var ret string
		return ret
	}
	return *o.RefType
}

// GetRefTypeOk returns a tuple with the RefType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetRefTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RefType) {
		return nil, false
	}
	return o.RefType, true
}

// IsSetRefType returns a boolean if a field has been set.
func (o *PolicyCreate) IsSetRefType() bool {
	if o != nil && !IsNil(o.RefType) {
		return true
	}

	return false
}

// SetRefType gets a reference to the given string and assigns it to the RefType field.
func (o *PolicyCreate) SetRefType(v string) {
	o.RefType = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *PolicyCreate) GetRefId() int64 {
	if o == nil || IsNil(o.RefId) {
		var ret int64
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetRefIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// IsSetRefId returns a boolean if a field has been set.
func (o *PolicyCreate) IsSetRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given int64 and assigns it to the RefId field.
func (o *PolicyCreate) SetRefId(v int64) {
	o.RefId = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *PolicyCreate) GetAccounts() []int64 {
	if o == nil || IsNil(o.Accounts) {
		var ret []int64
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetAccountsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// IsSetAccounts returns a boolean if a field has been set.
func (o *PolicyCreate) IsSetAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []int64 and assigns it to the Accounts field.
func (o *PolicyCreate) SetAccounts(v []int64) {
	o.Accounts = v
}

// GetEachUser returns the EachUser field value if set, zero value otherwise.
func (o *PolicyCreate) GetEachUser() bool {
	if o == nil || IsNil(o.EachUser) {
		var ret bool
		return ret
	}
	return *o.EachUser
}

// GetEachUserOk returns a tuple with the EachUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCreate) GetEachUserOk() (*bool, bool) {
	if o == nil || IsNil(o.EachUser) {
		return nil, false
	}
	return o.EachUser, true
}

// IsSetEachUser returns a boolean if a field has been set.
func (o *PolicyCreate) IsSetEachUser() bool {
	if o != nil && !IsNil(o.EachUser) {
		return true
	}

	return false
}

// SetEachUser gets a reference to the given bool and assigns it to the EachUser field.
func (o *PolicyCreate) SetEachUser(v bool) {
	o.EachUser = &v
}

func (o PolicyCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["policyType"] = o.PolicyType
	toSerialize["config"] = o.Config
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.RefType) {
		toSerialize["refType"] = o.RefType
	}
	if !IsNil(o.RefId) {
		toSerialize["refId"] = o.RefId
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.EachUser) {
		toSerialize["eachUser"] = o.EachUser
	}
	return toSerialize, nil
}

func (o *PolicyCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"policyType",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyCreate := _PolicyCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyCreate)

	if err != nil {
		return err
	}

	*o = PolicyCreate(varPolicyCreate)

	return err
}

type NullablePolicyCreate struct {
	value *PolicyCreate
	isSet bool
}

func (v NullablePolicyCreate) Get() *PolicyCreate {
	return v.value
}

func (v *NullablePolicyCreate) Set(val *PolicyCreate) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyCreate) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyCreate(val *PolicyCreate) *NullablePolicyCreate {
	return &NullablePolicyCreate{value: val, isSet: true}
}

func (v NullablePolicyCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


