/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddIdentitySourcesRequestUserSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddIdentitySourcesRequestUserSource{}

// AddIdentitySourcesRequestUserSource struct for AddIdentitySourcesRequestUserSource
type AddIdentitySourcesRequestUserSource struct {
	Account *AddIdentitySourcesRequestUserSourceAccount `json:"account,omitempty"`
	// A name for the Identity Source
	Name string `json:"name"`
	// IDM type code
	Type string `json:"type"`
	// description
	Description *string `json:"description,omitempty"`
	DefaultAccountRole *AddIdentitySourcesRequestUserSourceDefaultAccountRole `json:"defaultAccountRole,omitempty"`
	RoleMappings *AddIdentitySourcesRequestUserSourceRoleMappings `json:"roleMappings,omitempty"`
	// Map of Morpheus '`Role ID`':'`Role Name`'. 
	// Deprecated
	RoleMappingNames map[string]string `json:"roleMappingNames,omitempty"`
	// Enable Role Mapping Permission
	AllowCustomMappings *bool `json:"allowCustomMappings,omitempty"`
	// Manual Role Assignment
	ManualRoleAssignment *bool `json:"manualRoleAssignment,omitempty"`
	Config *AddIdentitySourcesRequestUserSourceConfig `json:"config,omitempty"`
}

type _AddIdentitySourcesRequestUserSource AddIdentitySourcesRequestUserSource

// NewAddIdentitySourcesRequestUserSource instantiates a new AddIdentitySourcesRequestUserSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddIdentitySourcesRequestUserSource(name string, type_ string) *AddIdentitySourcesRequestUserSource {
	this := AddIdentitySourcesRequestUserSource{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewAddIdentitySourcesRequestUserSourceWithDefaults instantiates a new AddIdentitySourcesRequestUserSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddIdentitySourcesRequestUserSourceWithDefaults() *AddIdentitySourcesRequestUserSource {
	this := AddIdentitySourcesRequestUserSource{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSource) GetAccount() AddIdentitySourcesRequestUserSourceAccount {
	if o == nil || IsNil(o.Account) {
		var ret AddIdentitySourcesRequestUserSourceAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSource) GetAccountOk() (*AddIdentitySourcesRequestUserSourceAccount, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// IsSetAccount returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSource) IsSetAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given AddIdentitySourcesRequestUserSourceAccount and assigns it to the Account field.
func (o *AddIdentitySourcesRequestUserSource) SetAccount(v AddIdentitySourcesRequestUserSourceAccount) {
	o.Account = &v
}

// GetName returns the Name field value
func (o *AddIdentitySourcesRequestUserSource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddIdentitySourcesRequestUserSource) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *AddIdentitySourcesRequestUserSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSource) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AddIdentitySourcesRequestUserSource) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSource) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSource) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSource) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddIdentitySourcesRequestUserSource) SetDescription(v string) {
	o.Description = &v
}

// GetDefaultAccountRole returns the DefaultAccountRole field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSource) GetDefaultAccountRole() AddIdentitySourcesRequestUserSourceDefaultAccountRole {
	if o == nil || IsNil(o.DefaultAccountRole) {
		var ret AddIdentitySourcesRequestUserSourceDefaultAccountRole
		return ret
	}
	return *o.DefaultAccountRole
}

// GetDefaultAccountRoleOk returns a tuple with the DefaultAccountRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSource) GetDefaultAccountRoleOk() (*AddIdentitySourcesRequestUserSourceDefaultAccountRole, bool) {
	if o == nil || IsNil(o.DefaultAccountRole) {
		return nil, false
	}
	return o.DefaultAccountRole, true
}

// IsSetDefaultAccountRole returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSource) IsSetDefaultAccountRole() bool {
	if o != nil && !IsNil(o.DefaultAccountRole) {
		return true
	}

	return false
}

// SetDefaultAccountRole gets a reference to the given AddIdentitySourcesRequestUserSourceDefaultAccountRole and assigns it to the DefaultAccountRole field.
func (o *AddIdentitySourcesRequestUserSource) SetDefaultAccountRole(v AddIdentitySourcesRequestUserSourceDefaultAccountRole) {
	o.DefaultAccountRole = &v
}

// GetRoleMappings returns the RoleMappings field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSource) GetRoleMappings() AddIdentitySourcesRequestUserSourceRoleMappings {
	if o == nil || IsNil(o.RoleMappings) {
		var ret AddIdentitySourcesRequestUserSourceRoleMappings
		return ret
	}
	return *o.RoleMappings
}

// GetRoleMappingsOk returns a tuple with the RoleMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSource) GetRoleMappingsOk() (*AddIdentitySourcesRequestUserSourceRoleMappings, bool) {
	if o == nil || IsNil(o.RoleMappings) {
		return nil, false
	}
	return o.RoleMappings, true
}

// IsSetRoleMappings returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSource) IsSetRoleMappings() bool {
	if o != nil && !IsNil(o.RoleMappings) {
		return true
	}

	return false
}

// SetRoleMappings gets a reference to the given AddIdentitySourcesRequestUserSourceRoleMappings and assigns it to the RoleMappings field.
func (o *AddIdentitySourcesRequestUserSource) SetRoleMappings(v AddIdentitySourcesRequestUserSourceRoleMappings) {
	o.RoleMappings = &v
}

// GetRoleMappingNames returns the RoleMappingNames field value if set, zero value otherwise.
// Deprecated
func (o *AddIdentitySourcesRequestUserSource) GetRoleMappingNames() map[string]string {
	if o == nil || IsNil(o.RoleMappingNames) {
		var ret map[string]string
		return ret
	}
	return o.RoleMappingNames
}

// GetRoleMappingNamesOk returns a tuple with the RoleMappingNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AddIdentitySourcesRequestUserSource) GetRoleMappingNamesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.RoleMappingNames) {
		return map[string]string{}, false
	}
	return o.RoleMappingNames, true
}

// IsSetRoleMappingNames returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSource) IsSetRoleMappingNames() bool {
	if o != nil && !IsNil(o.RoleMappingNames) {
		return true
	}

	return false
}

// SetRoleMappingNames gets a reference to the given map[string]string and assigns it to the RoleMappingNames field.
// Deprecated
func (o *AddIdentitySourcesRequestUserSource) SetRoleMappingNames(v map[string]string) {
	o.RoleMappingNames = v
}

// GetAllowCustomMappings returns the AllowCustomMappings field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSource) GetAllowCustomMappings() bool {
	if o == nil || IsNil(o.AllowCustomMappings) {
		var ret bool
		return ret
	}
	return *o.AllowCustomMappings
}

// GetAllowCustomMappingsOk returns a tuple with the AllowCustomMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSource) GetAllowCustomMappingsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowCustomMappings) {
		return nil, false
	}
	return o.AllowCustomMappings, true
}

// IsSetAllowCustomMappings returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSource) IsSetAllowCustomMappings() bool {
	if o != nil && !IsNil(o.AllowCustomMappings) {
		return true
	}

	return false
}

// SetAllowCustomMappings gets a reference to the given bool and assigns it to the AllowCustomMappings field.
func (o *AddIdentitySourcesRequestUserSource) SetAllowCustomMappings(v bool) {
	o.AllowCustomMappings = &v
}

// GetManualRoleAssignment returns the ManualRoleAssignment field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSource) GetManualRoleAssignment() bool {
	if o == nil || IsNil(o.ManualRoleAssignment) {
		var ret bool
		return ret
	}
	return *o.ManualRoleAssignment
}

// GetManualRoleAssignmentOk returns a tuple with the ManualRoleAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSource) GetManualRoleAssignmentOk() (*bool, bool) {
	if o == nil || IsNil(o.ManualRoleAssignment) {
		return nil, false
	}
	return o.ManualRoleAssignment, true
}

// IsSetManualRoleAssignment returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSource) IsSetManualRoleAssignment() bool {
	if o != nil && !IsNil(o.ManualRoleAssignment) {
		return true
	}

	return false
}

// SetManualRoleAssignment gets a reference to the given bool and assigns it to the ManualRoleAssignment field.
func (o *AddIdentitySourcesRequestUserSource) SetManualRoleAssignment(v bool) {
	o.ManualRoleAssignment = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *AddIdentitySourcesRequestUserSource) GetConfig() AddIdentitySourcesRequestUserSourceConfig {
	if o == nil || IsNil(o.Config) {
		var ret AddIdentitySourcesRequestUserSourceConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddIdentitySourcesRequestUserSource) GetConfigOk() (*AddIdentitySourcesRequestUserSourceConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// IsSetConfig returns a boolean if a field has been set.
func (o *AddIdentitySourcesRequestUserSource) IsSetConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given AddIdentitySourcesRequestUserSourceConfig and assigns it to the Config field.
func (o *AddIdentitySourcesRequestUserSource) SetConfig(v AddIdentitySourcesRequestUserSourceConfig) {
	o.Config = &v
}

func (o AddIdentitySourcesRequestUserSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddIdentitySourcesRequestUserSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DefaultAccountRole) {
		toSerialize["defaultAccountRole"] = o.DefaultAccountRole
	}
	if !IsNil(o.RoleMappings) {
		toSerialize["roleMappings"] = o.RoleMappings
	}
	if !IsNil(o.RoleMappingNames) {
		toSerialize["roleMappingNames"] = o.RoleMappingNames
	}
	if !IsNil(o.AllowCustomMappings) {
		toSerialize["allowCustomMappings"] = o.AllowCustomMappings
	}
	if !IsNil(o.ManualRoleAssignment) {
		toSerialize["manualRoleAssignment"] = o.ManualRoleAssignment
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

func (o *AddIdentitySourcesRequestUserSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddIdentitySourcesRequestUserSource := _AddIdentitySourcesRequestUserSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddIdentitySourcesRequestUserSource)

	if err != nil {
		return err
	}

	*o = AddIdentitySourcesRequestUserSource(varAddIdentitySourcesRequestUserSource)

	return err
}

type NullableAddIdentitySourcesRequestUserSource struct {
	value *AddIdentitySourcesRequestUserSource
	isSet bool
}

func (v NullableAddIdentitySourcesRequestUserSource) Get() *AddIdentitySourcesRequestUserSource {
	return v.value
}

func (v *NullableAddIdentitySourcesRequestUserSource) Set(val *AddIdentitySourcesRequestUserSource) {
	v.value = val
	v.isSet = true
}

func (v NullableAddIdentitySourcesRequestUserSource) IsSet() bool {
	return v.isSet
}

func (v *NullableAddIdentitySourcesRequestUserSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddIdentitySourcesRequestUserSource(val *AddIdentitySourcesRequestUserSource) *NullableAddIdentitySourcesRequestUserSource {
	return &NullableAddIdentitySourcesRequestUserSource{value: val, isSet: true}
}

func (v NullableAddIdentitySourcesRequestUserSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddIdentitySourcesRequestUserSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


