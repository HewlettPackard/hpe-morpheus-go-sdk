/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddCertificateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddCertificateRequest{}

// AddCertificateRequest struct for AddCertificateRequest
type AddCertificateRequest struct {
	Certificate *AddCertificateRequestCertificate `json:"certificate,omitempty"`
}

// NewAddCertificateRequest instantiates a new AddCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCertificateRequest() *AddCertificateRequest {
	this := AddCertificateRequest{}
	return &this
}

// NewAddCertificateRequestWithDefaults instantiates a new AddCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCertificateRequestWithDefaults() *AddCertificateRequest {
	this := AddCertificateRequest{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *AddCertificateRequest) GetCertificate() AddCertificateRequestCertificate {
	if o == nil || IsNil(o.Certificate) {
		var ret AddCertificateRequestCertificate
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificateRequest) GetCertificateOk() (*AddCertificateRequestCertificate, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// IsSetCertificate returns a boolean if a field has been set.
func (o *AddCertificateRequest) IsSetCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given AddCertificateRequestCertificate and assigns it to the Certificate field.
func (o *AddCertificateRequest) SetCertificate(v AddCertificateRequestCertificate) {
	o.Certificate = &v
}

func (o AddCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddCertificateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	return toSerialize, nil
}

type NullableAddCertificateRequest struct {
	value *AddCertificateRequest
	isSet bool
}

func (v NullableAddCertificateRequest) Get() *AddCertificateRequest {
	return v.value
}

func (v *NullableAddCertificateRequest) Set(val *AddCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCertificateRequest(val *AddCertificateRequest) *NullableAddCertificateRequest {
	return &NullableAddCertificateRequest{value: val, isSet: true}
}

func (v NullableAddCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


