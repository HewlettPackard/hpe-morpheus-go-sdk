/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the Price type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Price{}

// Price struct for Price
type Price struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Code *string `json:"code,omitempty"`
	Active *bool `json:"active,omitempty"`
	PriceType *string `json:"priceType,omitempty"`
	PriceUnit *string `json:"priceUnit,omitempty"`
	AdditionalPriceUnit *string `json:"additionalPriceUnit,omitempty"`
	Price *float32 `json:"price,omitempty"`
	CustomPrice *float32 `json:"customPrice,omitempty"`
	MarkupType *string `json:"markupType,omitempty"`
	Markup *float32 `json:"markup,omitempty"`
	MarkupPercent *float32 `json:"markupPercent,omitempty"`
	Cost *float32 `json:"cost,omitempty"`
	Currency *string `json:"currency,omitempty"`
	IncurCharges *string `json:"incurCharges,omitempty"`
	Platform *string `json:"platform,omitempty"`
	Software *string `json:"software,omitempty"`
	VolumeType *ListPriceSets200ResponseAllOfPriceSetsInnerPricesInnerVolumeType `json:"volumeType,omitempty"`
	Datastore *GetAlerts200ResponseAllOfCheckGroupsInnerInstance `json:"datastore,omitempty"`
	CrossCloudApply *bool `json:"crossCloudApply,omitempty"`
	Account *string `json:"account,omitempty"`
}

// NewPrice instantiates a new Price object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrice() *Price {
	this := Price{}
	return &this
}

// NewPriceWithDefaults instantiates a new Price object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceWithDefaults() *Price {
	this := Price{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Price) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *Price) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Price) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Price) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *Price) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Price) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Price) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// IsSetCode returns a boolean if a field has been set.
func (o *Price) IsSetCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Price) SetCode(v string) {
	o.Code = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Price) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// IsSetActive returns a boolean if a field has been set.
func (o *Price) IsSetActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Price) SetActive(v bool) {
	o.Active = &v
}

// GetPriceType returns the PriceType field value if set, zero value otherwise.
func (o *Price) GetPriceType() string {
	if o == nil || IsNil(o.PriceType) {
		var ret string
		return ret
	}
	return *o.PriceType
}

// GetPriceTypeOk returns a tuple with the PriceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetPriceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PriceType) {
		return nil, false
	}
	return o.PriceType, true
}

// IsSetPriceType returns a boolean if a field has been set.
func (o *Price) IsSetPriceType() bool {
	if o != nil && !IsNil(o.PriceType) {
		return true
	}

	return false
}

// SetPriceType gets a reference to the given string and assigns it to the PriceType field.
func (o *Price) SetPriceType(v string) {
	o.PriceType = &v
}

// GetPriceUnit returns the PriceUnit field value if set, zero value otherwise.
func (o *Price) GetPriceUnit() string {
	if o == nil || IsNil(o.PriceUnit) {
		var ret string
		return ret
	}
	return *o.PriceUnit
}

// GetPriceUnitOk returns a tuple with the PriceUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetPriceUnitOk() (*string, bool) {
	if o == nil || IsNil(o.PriceUnit) {
		return nil, false
	}
	return o.PriceUnit, true
}

// IsSetPriceUnit returns a boolean if a field has been set.
func (o *Price) IsSetPriceUnit() bool {
	if o != nil && !IsNil(o.PriceUnit) {
		return true
	}

	return false
}

// SetPriceUnit gets a reference to the given string and assigns it to the PriceUnit field.
func (o *Price) SetPriceUnit(v string) {
	o.PriceUnit = &v
}

// GetAdditionalPriceUnit returns the AdditionalPriceUnit field value if set, zero value otherwise.
func (o *Price) GetAdditionalPriceUnit() string {
	if o == nil || IsNil(o.AdditionalPriceUnit) {
		var ret string
		return ret
	}
	return *o.AdditionalPriceUnit
}

// GetAdditionalPriceUnitOk returns a tuple with the AdditionalPriceUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetAdditionalPriceUnitOk() (*string, bool) {
	if o == nil || IsNil(o.AdditionalPriceUnit) {
		return nil, false
	}
	return o.AdditionalPriceUnit, true
}

// IsSetAdditionalPriceUnit returns a boolean if a field has been set.
func (o *Price) IsSetAdditionalPriceUnit() bool {
	if o != nil && !IsNil(o.AdditionalPriceUnit) {
		return true
	}

	return false
}

// SetAdditionalPriceUnit gets a reference to the given string and assigns it to the AdditionalPriceUnit field.
func (o *Price) SetAdditionalPriceUnit(v string) {
	o.AdditionalPriceUnit = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Price) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// IsSetPrice returns a boolean if a field has been set.
func (o *Price) IsSetPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *Price) SetPrice(v float32) {
	o.Price = &v
}

// GetCustomPrice returns the CustomPrice field value if set, zero value otherwise.
func (o *Price) GetCustomPrice() float32 {
	if o == nil || IsNil(o.CustomPrice) {
		var ret float32
		return ret
	}
	return *o.CustomPrice
}

// GetCustomPriceOk returns a tuple with the CustomPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetCustomPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.CustomPrice) {
		return nil, false
	}
	return o.CustomPrice, true
}

// IsSetCustomPrice returns a boolean if a field has been set.
func (o *Price) IsSetCustomPrice() bool {
	if o != nil && !IsNil(o.CustomPrice) {
		return true
	}

	return false
}

// SetCustomPrice gets a reference to the given float32 and assigns it to the CustomPrice field.
func (o *Price) SetCustomPrice(v float32) {
	o.CustomPrice = &v
}

// GetMarkupType returns the MarkupType field value if set, zero value otherwise.
func (o *Price) GetMarkupType() string {
	if o == nil || IsNil(o.MarkupType) {
		var ret string
		return ret
	}
	return *o.MarkupType
}

// GetMarkupTypeOk returns a tuple with the MarkupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetMarkupTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MarkupType) {
		return nil, false
	}
	return o.MarkupType, true
}

// IsSetMarkupType returns a boolean if a field has been set.
func (o *Price) IsSetMarkupType() bool {
	if o != nil && !IsNil(o.MarkupType) {
		return true
	}

	return false
}

// SetMarkupType gets a reference to the given string and assigns it to the MarkupType field.
func (o *Price) SetMarkupType(v string) {
	o.MarkupType = &v
}

// GetMarkup returns the Markup field value if set, zero value otherwise.
func (o *Price) GetMarkup() float32 {
	if o == nil || IsNil(o.Markup) {
		var ret float32
		return ret
	}
	return *o.Markup
}

// GetMarkupOk returns a tuple with the Markup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetMarkupOk() (*float32, bool) {
	if o == nil || IsNil(o.Markup) {
		return nil, false
	}
	return o.Markup, true
}

// IsSetMarkup returns a boolean if a field has been set.
func (o *Price) IsSetMarkup() bool {
	if o != nil && !IsNil(o.Markup) {
		return true
	}

	return false
}

// SetMarkup gets a reference to the given float32 and assigns it to the Markup field.
func (o *Price) SetMarkup(v float32) {
	o.Markup = &v
}

// GetMarkupPercent returns the MarkupPercent field value if set, zero value otherwise.
func (o *Price) GetMarkupPercent() float32 {
	if o == nil || IsNil(o.MarkupPercent) {
		var ret float32
		return ret
	}
	return *o.MarkupPercent
}

// GetMarkupPercentOk returns a tuple with the MarkupPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetMarkupPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.MarkupPercent) {
		return nil, false
	}
	return o.MarkupPercent, true
}

// IsSetMarkupPercent returns a boolean if a field has been set.
func (o *Price) IsSetMarkupPercent() bool {
	if o != nil && !IsNil(o.MarkupPercent) {
		return true
	}

	return false
}

// SetMarkupPercent gets a reference to the given float32 and assigns it to the MarkupPercent field.
func (o *Price) SetMarkupPercent(v float32) {
	o.MarkupPercent = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *Price) GetCost() float32 {
	if o == nil || IsNil(o.Cost) {
		var ret float32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetCostOk() (*float32, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// IsSetCost returns a boolean if a field has been set.
func (o *Price) IsSetCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given float32 and assigns it to the Cost field.
func (o *Price) SetCost(v float32) {
	o.Cost = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Price) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// IsSetCurrency returns a boolean if a field has been set.
func (o *Price) IsSetCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Price) SetCurrency(v string) {
	o.Currency = &v
}

// GetIncurCharges returns the IncurCharges field value if set, zero value otherwise.
func (o *Price) GetIncurCharges() string {
	if o == nil || IsNil(o.IncurCharges) {
		var ret string
		return ret
	}
	return *o.IncurCharges
}

// GetIncurChargesOk returns a tuple with the IncurCharges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetIncurChargesOk() (*string, bool) {
	if o == nil || IsNil(o.IncurCharges) {
		return nil, false
	}
	return o.IncurCharges, true
}

// IsSetIncurCharges returns a boolean if a field has been set.
func (o *Price) IsSetIncurCharges() bool {
	if o != nil && !IsNil(o.IncurCharges) {
		return true
	}

	return false
}

// SetIncurCharges gets a reference to the given string and assigns it to the IncurCharges field.
func (o *Price) SetIncurCharges(v string) {
	o.IncurCharges = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *Price) GetPlatform() string {
	if o == nil || IsNil(o.Platform) {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// IsSetPlatform returns a boolean if a field has been set.
func (o *Price) IsSetPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *Price) SetPlatform(v string) {
	o.Platform = &v
}

// GetSoftware returns the Software field value if set, zero value otherwise.
func (o *Price) GetSoftware() string {
	if o == nil || IsNil(o.Software) {
		var ret string
		return ret
	}
	return *o.Software
}

// GetSoftwareOk returns a tuple with the Software field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetSoftwareOk() (*string, bool) {
	if o == nil || IsNil(o.Software) {
		return nil, false
	}
	return o.Software, true
}

// IsSetSoftware returns a boolean if a field has been set.
func (o *Price) IsSetSoftware() bool {
	if o != nil && !IsNil(o.Software) {
		return true
	}

	return false
}

// SetSoftware gets a reference to the given string and assigns it to the Software field.
func (o *Price) SetSoftware(v string) {
	o.Software = &v
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise.
func (o *Price) GetVolumeType() ListPriceSets200ResponseAllOfPriceSetsInnerPricesInnerVolumeType {
	if o == nil || IsNil(o.VolumeType) {
		var ret ListPriceSets200ResponseAllOfPriceSetsInnerPricesInnerVolumeType
		return ret
	}
	return *o.VolumeType
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetVolumeTypeOk() (*ListPriceSets200ResponseAllOfPriceSetsInnerPricesInnerVolumeType, bool) {
	if o == nil || IsNil(o.VolumeType) {
		return nil, false
	}
	return o.VolumeType, true
}

// IsSetVolumeType returns a boolean if a field has been set.
func (o *Price) IsSetVolumeType() bool {
	if o != nil && !IsNil(o.VolumeType) {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given ListPriceSets200ResponseAllOfPriceSetsInnerPricesInnerVolumeType and assigns it to the VolumeType field.
func (o *Price) SetVolumeType(v ListPriceSets200ResponseAllOfPriceSetsInnerPricesInnerVolumeType) {
	o.VolumeType = &v
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *Price) GetDatastore() GetAlerts200ResponseAllOfCheckGroupsInnerInstance {
	if o == nil || IsNil(o.Datastore) {
		var ret GetAlerts200ResponseAllOfCheckGroupsInnerInstance
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetDatastoreOk() (*GetAlerts200ResponseAllOfCheckGroupsInnerInstance, bool) {
	if o == nil || IsNil(o.Datastore) {
		return nil, false
	}
	return o.Datastore, true
}

// IsSetDatastore returns a boolean if a field has been set.
func (o *Price) IsSetDatastore() bool {
	if o != nil && !IsNil(o.Datastore) {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given GetAlerts200ResponseAllOfCheckGroupsInnerInstance and assigns it to the Datastore field.
func (o *Price) SetDatastore(v GetAlerts200ResponseAllOfCheckGroupsInnerInstance) {
	o.Datastore = &v
}

// GetCrossCloudApply returns the CrossCloudApply field value if set, zero value otherwise.
func (o *Price) GetCrossCloudApply() bool {
	if o == nil || IsNil(o.CrossCloudApply) {
		var ret bool
		return ret
	}
	return *o.CrossCloudApply
}

// GetCrossCloudApplyOk returns a tuple with the CrossCloudApply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetCrossCloudApplyOk() (*bool, bool) {
	if o == nil || IsNil(o.CrossCloudApply) {
		return nil, false
	}
	return o.CrossCloudApply, true
}

// IsSetCrossCloudApply returns a boolean if a field has been set.
func (o *Price) IsSetCrossCloudApply() bool {
	if o != nil && !IsNil(o.CrossCloudApply) {
		return true
	}

	return false
}

// SetCrossCloudApply gets a reference to the given bool and assigns it to the CrossCloudApply field.
func (o *Price) SetCrossCloudApply(v bool) {
	o.CrossCloudApply = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Price) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// IsSetAccount returns a boolean if a field has been set.
func (o *Price) IsSetAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *Price) SetAccount(v string) {
	o.Account = &v
}

func (o Price) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Price) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.PriceType) {
		toSerialize["priceType"] = o.PriceType
	}
	if !IsNil(o.PriceUnit) {
		toSerialize["priceUnit"] = o.PriceUnit
	}
	if !IsNil(o.AdditionalPriceUnit) {
		toSerialize["additionalPriceUnit"] = o.AdditionalPriceUnit
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.CustomPrice) {
		toSerialize["customPrice"] = o.CustomPrice
	}
	if !IsNil(o.MarkupType) {
		toSerialize["markupType"] = o.MarkupType
	}
	if !IsNil(o.Markup) {
		toSerialize["markup"] = o.Markup
	}
	if !IsNil(o.MarkupPercent) {
		toSerialize["markupPercent"] = o.MarkupPercent
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.IncurCharges) {
		toSerialize["incurCharges"] = o.IncurCharges
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !IsNil(o.Software) {
		toSerialize["software"] = o.Software
	}
	if !IsNil(o.VolumeType) {
		toSerialize["volumeType"] = o.VolumeType
	}
	if !IsNil(o.Datastore) {
		toSerialize["datastore"] = o.Datastore
	}
	if !IsNil(o.CrossCloudApply) {
		toSerialize["crossCloudApply"] = o.CrossCloudApply
	}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	return toSerialize, nil
}

type NullablePrice struct {
	value *Price
	isSet bool
}

func (v NullablePrice) Get() *Price {
	return v.value
}

func (v *NullablePrice) Set(val *Price) {
	v.value = val
	v.isSet = true
}

func (v NullablePrice) IsSet() bool {
	return v.isSet
}

func (v *NullablePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrice(val *Price) *NullablePrice {
	return &NullablePrice{value: val, isSet: true}
}

func (v NullablePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


