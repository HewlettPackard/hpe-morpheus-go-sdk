/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddPolicies200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddPolicies200Response{}

// AddPolicies200Response struct for AddPolicies200Response
type AddPolicies200Response struct {
	Policy *AddPolicies200ResponseAllOfPolicy `json:"policy,omitempty"`
	Success *bool `json:"success,omitempty"`
}

// NewAddPolicies200Response instantiates a new AddPolicies200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddPolicies200Response() *AddPolicies200Response {
	this := AddPolicies200Response{}
	return &this
}

// NewAddPolicies200ResponseWithDefaults instantiates a new AddPolicies200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddPolicies200ResponseWithDefaults() *AddPolicies200Response {
	this := AddPolicies200Response{}
	return &this
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *AddPolicies200Response) GetPolicy() AddPolicies200ResponseAllOfPolicy {
	if o == nil || IsNil(o.Policy) {
		var ret AddPolicies200ResponseAllOfPolicy
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPolicies200Response) GetPolicyOk() (*AddPolicies200ResponseAllOfPolicy, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// IsSetPolicy returns a boolean if a field has been set.
func (o *AddPolicies200Response) IsSetPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given AddPolicies200ResponseAllOfPolicy and assigns it to the Policy field.
func (o *AddPolicies200Response) SetPolicy(v AddPolicies200ResponseAllOfPolicy) {
	o.Policy = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *AddPolicies200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddPolicies200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// IsSetSuccess returns a boolean if a field has been set.
func (o *AddPolicies200Response) IsSetSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *AddPolicies200Response) SetSuccess(v bool) {
	o.Success = &v
}

func (o AddPolicies200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddPolicies200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return toSerialize, nil
}

type NullableAddPolicies200Response struct {
	value *AddPolicies200Response
	isSet bool
}

func (v NullableAddPolicies200Response) Get() *AddPolicies200Response {
	return v.value
}

func (v *NullableAddPolicies200Response) Set(val *AddPolicies200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddPolicies200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddPolicies200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddPolicies200Response(val *AddPolicies200Response) *NullableAddPolicies200Response {
	return &NullableAddPolicies200Response{value: val, isSet: true}
}

func (v NullableAddPolicies200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddPolicies200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


