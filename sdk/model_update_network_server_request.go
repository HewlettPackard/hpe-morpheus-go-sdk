/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateNetworkServerRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateNetworkServerRequest{}

// UpdateNetworkServerRequest struct for UpdateNetworkServerRequest
type UpdateNetworkServerRequest struct {
	NetworkServer *UpdateNetworkServerRequestNetworkServer `json:"networkServer,omitempty"`
}

// NewUpdateNetworkServerRequest instantiates a new UpdateNetworkServerRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNetworkServerRequest() *UpdateNetworkServerRequest {
	this := UpdateNetworkServerRequest{}
	return &this
}

// NewUpdateNetworkServerRequestWithDefaults instantiates a new UpdateNetworkServerRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNetworkServerRequestWithDefaults() *UpdateNetworkServerRequest {
	this := UpdateNetworkServerRequest{}
	return &this
}

// GetNetworkServer returns the NetworkServer field value if set, zero value otherwise.
func (o *UpdateNetworkServerRequest) GetNetworkServer() UpdateNetworkServerRequestNetworkServer {
	if o == nil || IsNil(o.NetworkServer) {
		var ret UpdateNetworkServerRequestNetworkServer
		return ret
	}
	return *o.NetworkServer
}

// GetNetworkServerOk returns a tuple with the NetworkServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateNetworkServerRequest) GetNetworkServerOk() (*UpdateNetworkServerRequestNetworkServer, bool) {
	if o == nil || IsNil(o.NetworkServer) {
		return nil, false
	}
	return o.NetworkServer, true
}

// IsSetNetworkServer returns a boolean if a field has been set.
func (o *UpdateNetworkServerRequest) IsSetNetworkServer() bool {
	if o != nil && !IsNil(o.NetworkServer) {
		return true
	}

	return false
}

// SetNetworkServer gets a reference to the given UpdateNetworkServerRequestNetworkServer and assigns it to the NetworkServer field.
func (o *UpdateNetworkServerRequest) SetNetworkServer(v UpdateNetworkServerRequestNetworkServer) {
	o.NetworkServer = &v
}

func (o UpdateNetworkServerRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateNetworkServerRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkServer) {
		toSerialize["networkServer"] = o.NetworkServer
	}
	return toSerialize, nil
}

type NullableUpdateNetworkServerRequest struct {
	value *UpdateNetworkServerRequest
	isSet bool
}

func (v NullableUpdateNetworkServerRequest) Get() *UpdateNetworkServerRequest {
	return v.value
}

func (v *NullableUpdateNetworkServerRequest) Set(val *UpdateNetworkServerRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkServerRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkServerRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkServerRequest(val *UpdateNetworkServerRequest) *NullableUpdateNetworkServerRequest {
	return &NullableUpdateNetworkServerRequest{value: val, isSet: true}
}

func (v NullableUpdateNetworkServerRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkServerRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


