/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
)

// checks if the Alert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Alert{}

// Alert struct for Alert
type Alert struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	AllApps *bool `json:"allApps,omitempty"`
	AllChecks *bool `json:"allChecks,omitempty"`
	AllGroups *bool `json:"allGroups,omitempty"`
	Active *bool `json:"active,omitempty"`
	MinSeverity *string `json:"minSeverity,omitempty"`
	MinDuration *int64 `json:"minDuration,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	Checks []int32 `json:"checks,omitempty"`
	CheckGroups []int32 `json:"checkGroups,omitempty"`
	Apps []int32 `json:"apps,omitempty"`
	Contacts []ListAlerts200ResponseAllOfAlertsInnerContactsInner `json:"contacts,omitempty"`
}

// NewAlert instantiates a new Alert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlert() *Alert {
	this := Alert{}
	return &this
}

// NewAlertWithDefaults instantiates a new Alert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertWithDefaults() *Alert {
	this := Alert{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Alert) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *Alert) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Alert) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Alert) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *Alert) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Alert) SetName(v string) {
	o.Name = &v
}

// GetAllApps returns the AllApps field value if set, zero value otherwise.
func (o *Alert) GetAllApps() bool {
	if o == nil || IsNil(o.AllApps) {
		var ret bool
		return ret
	}
	return *o.AllApps
}

// GetAllAppsOk returns a tuple with the AllApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetAllAppsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllApps) {
		return nil, false
	}
	return o.AllApps, true
}

// IsSetAllApps returns a boolean if a field has been set.
func (o *Alert) IsSetAllApps() bool {
	if o != nil && !IsNil(o.AllApps) {
		return true
	}

	return false
}

// SetAllApps gets a reference to the given bool and assigns it to the AllApps field.
func (o *Alert) SetAllApps(v bool) {
	o.AllApps = &v
}

// GetAllChecks returns the AllChecks field value if set, zero value otherwise.
func (o *Alert) GetAllChecks() bool {
	if o == nil || IsNil(o.AllChecks) {
		var ret bool
		return ret
	}
	return *o.AllChecks
}

// GetAllChecksOk returns a tuple with the AllChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetAllChecksOk() (*bool, bool) {
	if o == nil || IsNil(o.AllChecks) {
		return nil, false
	}
	return o.AllChecks, true
}

// IsSetAllChecks returns a boolean if a field has been set.
func (o *Alert) IsSetAllChecks() bool {
	if o != nil && !IsNil(o.AllChecks) {
		return true
	}

	return false
}

// SetAllChecks gets a reference to the given bool and assigns it to the AllChecks field.
func (o *Alert) SetAllChecks(v bool) {
	o.AllChecks = &v
}

// GetAllGroups returns the AllGroups field value if set, zero value otherwise.
func (o *Alert) GetAllGroups() bool {
	if o == nil || IsNil(o.AllGroups) {
		var ret bool
		return ret
	}
	return *o.AllGroups
}

// GetAllGroupsOk returns a tuple with the AllGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetAllGroupsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllGroups) {
		return nil, false
	}
	return o.AllGroups, true
}

// IsSetAllGroups returns a boolean if a field has been set.
func (o *Alert) IsSetAllGroups() bool {
	if o != nil && !IsNil(o.AllGroups) {
		return true
	}

	return false
}

// SetAllGroups gets a reference to the given bool and assigns it to the AllGroups field.
func (o *Alert) SetAllGroups(v bool) {
	o.AllGroups = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Alert) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// IsSetActive returns a boolean if a field has been set.
func (o *Alert) IsSetActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Alert) SetActive(v bool) {
	o.Active = &v
}

// GetMinSeverity returns the MinSeverity field value if set, zero value otherwise.
func (o *Alert) GetMinSeverity() string {
	if o == nil || IsNil(o.MinSeverity) {
		var ret string
		return ret
	}
	return *o.MinSeverity
}

// GetMinSeverityOk returns a tuple with the MinSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetMinSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.MinSeverity) {
		return nil, false
	}
	return o.MinSeverity, true
}

// IsSetMinSeverity returns a boolean if a field has been set.
func (o *Alert) IsSetMinSeverity() bool {
	if o != nil && !IsNil(o.MinSeverity) {
		return true
	}

	return false
}

// SetMinSeverity gets a reference to the given string and assigns it to the MinSeverity field.
func (o *Alert) SetMinSeverity(v string) {
	o.MinSeverity = &v
}

// GetMinDuration returns the MinDuration field value if set, zero value otherwise.
func (o *Alert) GetMinDuration() int64 {
	if o == nil || IsNil(o.MinDuration) {
		var ret int64
		return ret
	}
	return *o.MinDuration
}

// GetMinDurationOk returns a tuple with the MinDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetMinDurationOk() (*int64, bool) {
	if o == nil || IsNil(o.MinDuration) {
		return nil, false
	}
	return o.MinDuration, true
}

// IsSetMinDuration returns a boolean if a field has been set.
func (o *Alert) IsSetMinDuration() bool {
	if o != nil && !IsNil(o.MinDuration) {
		return true
	}

	return false
}

// SetMinDuration gets a reference to the given int64 and assigns it to the MinDuration field.
func (o *Alert) SetMinDuration(v int64) {
	o.MinDuration = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Alert) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// IsSetDateCreated returns a boolean if a field has been set.
func (o *Alert) IsSetDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Alert) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Alert) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// IsSetLastUpdated returns a boolean if a field has been set.
func (o *Alert) IsSetLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Alert) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetChecks returns the Checks field value if set, zero value otherwise.
func (o *Alert) GetChecks() []int32 {
	if o == nil || IsNil(o.Checks) {
		var ret []int32
		return ret
	}
	return o.Checks
}

// GetChecksOk returns a tuple with the Checks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetChecksOk() ([]int32, bool) {
	if o == nil || IsNil(o.Checks) {
		return nil, false
	}
	return o.Checks, true
}

// IsSetChecks returns a boolean if a field has been set.
func (o *Alert) IsSetChecks() bool {
	if o != nil && !IsNil(o.Checks) {
		return true
	}

	return false
}

// SetChecks gets a reference to the given []int32 and assigns it to the Checks field.
func (o *Alert) SetChecks(v []int32) {
	o.Checks = v
}

// GetCheckGroups returns the CheckGroups field value if set, zero value otherwise.
func (o *Alert) GetCheckGroups() []int32 {
	if o == nil || IsNil(o.CheckGroups) {
		var ret []int32
		return ret
	}
	return o.CheckGroups
}

// GetCheckGroupsOk returns a tuple with the CheckGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetCheckGroupsOk() ([]int32, bool) {
	if o == nil || IsNil(o.CheckGroups) {
		return nil, false
	}
	return o.CheckGroups, true
}

// IsSetCheckGroups returns a boolean if a field has been set.
func (o *Alert) IsSetCheckGroups() bool {
	if o != nil && !IsNil(o.CheckGroups) {
		return true
	}

	return false
}

// SetCheckGroups gets a reference to the given []int32 and assigns it to the CheckGroups field.
func (o *Alert) SetCheckGroups(v []int32) {
	o.CheckGroups = v
}

// GetApps returns the Apps field value if set, zero value otherwise.
func (o *Alert) GetApps() []int32 {
	if o == nil || IsNil(o.Apps) {
		var ret []int32
		return ret
	}
	return o.Apps
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetAppsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Apps) {
		return nil, false
	}
	return o.Apps, true
}

// IsSetApps returns a boolean if a field has been set.
func (o *Alert) IsSetApps() bool {
	if o != nil && !IsNil(o.Apps) {
		return true
	}

	return false
}

// SetApps gets a reference to the given []int32 and assigns it to the Apps field.
func (o *Alert) SetApps(v []int32) {
	o.Apps = v
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *Alert) GetContacts() []ListAlerts200ResponseAllOfAlertsInnerContactsInner {
	if o == nil || IsNil(o.Contacts) {
		var ret []ListAlerts200ResponseAllOfAlertsInnerContactsInner
		return ret
	}
	return o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetContactsOk() ([]ListAlerts200ResponseAllOfAlertsInnerContactsInner, bool) {
	if o == nil || IsNil(o.Contacts) {
		return nil, false
	}
	return o.Contacts, true
}

// IsSetContacts returns a boolean if a field has been set.
func (o *Alert) IsSetContacts() bool {
	if o != nil && !IsNil(o.Contacts) {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []ListAlerts200ResponseAllOfAlertsInnerContactsInner and assigns it to the Contacts field.
func (o *Alert) SetContacts(v []ListAlerts200ResponseAllOfAlertsInnerContactsInner) {
	o.Contacts = v
}

func (o Alert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Alert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AllApps) {
		toSerialize["allApps"] = o.AllApps
	}
	if !IsNil(o.AllChecks) {
		toSerialize["allChecks"] = o.AllChecks
	}
	if !IsNil(o.AllGroups) {
		toSerialize["allGroups"] = o.AllGroups
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.MinSeverity) {
		toSerialize["minSeverity"] = o.MinSeverity
	}
	if !IsNil(o.MinDuration) {
		toSerialize["minDuration"] = o.MinDuration
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.Checks) {
		toSerialize["checks"] = o.Checks
	}
	if !IsNil(o.CheckGroups) {
		toSerialize["checkGroups"] = o.CheckGroups
	}
	if !IsNil(o.Apps) {
		toSerialize["apps"] = o.Apps
	}
	if !IsNil(o.Contacts) {
		toSerialize["contacts"] = o.Contacts
	}
	return toSerialize, nil
}

type NullableAlert struct {
	value *Alert
	isSet bool
}

func (v NullableAlert) Get() *Alert {
	return v.value
}

func (v *NullableAlert) Set(val *Alert) {
	v.value = val
	v.isSet = true
}

func (v NullableAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlert(val *Alert) *NullableAlert {
	return &NullableAlert{value: val, isSet: true}
}

func (v NullableAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


