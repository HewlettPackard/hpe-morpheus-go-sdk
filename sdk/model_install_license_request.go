/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InstallLicenseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstallLicenseRequest{}

// InstallLicenseRequest struct for InstallLicenseRequest
type InstallLicenseRequest struct {
	// License Key. This is a long and unique string of your Morpheus license. License keys can be requested from the [Morpheus Hub](https://morpheushub.com).
	License string `json:"license"`
	// Install Action can be passed as 'add' to stack the license. By default all currently installed licenses are removed and replaced by the new one.
	InstallAction *string `json:"installAction,omitempty"`
}

type _InstallLicenseRequest InstallLicenseRequest

// NewInstallLicenseRequest instantiates a new InstallLicenseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallLicenseRequest(license string) *InstallLicenseRequest {
	this := InstallLicenseRequest{}
	this.License = license
	var installAction string = "replace"
	this.InstallAction = &installAction
	return &this
}

// NewInstallLicenseRequestWithDefaults instantiates a new InstallLicenseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallLicenseRequestWithDefaults() *InstallLicenseRequest {
	this := InstallLicenseRequest{}
	var installAction string = "replace"
	this.InstallAction = &installAction
	return &this
}

// GetLicense returns the License field value
func (o *InstallLicenseRequest) GetLicense() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.License
}

// GetLicenseOk returns a tuple with the License field value
// and a boolean to check if the value has been set.
func (o *InstallLicenseRequest) GetLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.License, true
}

// SetLicense sets field value
func (o *InstallLicenseRequest) SetLicense(v string) {
	o.License = v
}

// GetInstallAction returns the InstallAction field value if set, zero value otherwise.
func (o *InstallLicenseRequest) GetInstallAction() string {
	if o == nil || IsNil(o.InstallAction) {
		var ret string
		return ret
	}
	return *o.InstallAction
}

// GetInstallActionOk returns a tuple with the InstallAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallLicenseRequest) GetInstallActionOk() (*string, bool) {
	if o == nil || IsNil(o.InstallAction) {
		return nil, false
	}
	return o.InstallAction, true
}

// IsSetInstallAction returns a boolean if a field has been set.
func (o *InstallLicenseRequest) IsSetInstallAction() bool {
	if o != nil && !IsNil(o.InstallAction) {
		return true
	}

	return false
}

// SetInstallAction gets a reference to the given string and assigns it to the InstallAction field.
func (o *InstallLicenseRequest) SetInstallAction(v string) {
	o.InstallAction = &v
}

func (o InstallLicenseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstallLicenseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["license"] = o.License
	if !IsNil(o.InstallAction) {
		toSerialize["installAction"] = o.InstallAction
	}
	return toSerialize, nil
}

func (o *InstallLicenseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"license",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstallLicenseRequest := _InstallLicenseRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstallLicenseRequest)

	if err != nil {
		return err
	}

	*o = InstallLicenseRequest(varInstallLicenseRequest)

	return err
}

type NullableInstallLicenseRequest struct {
	value *InstallLicenseRequest
	isSet bool
}

func (v NullableInstallLicenseRequest) Get() *InstallLicenseRequest {
	return v.value
}

func (v *NullableInstallLicenseRequest) Set(val *InstallLicenseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallLicenseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallLicenseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallLicenseRequest(val *InstallLicenseRequest) *NullableInstallLicenseRequest {
	return &NullableInstallLicenseRequest{value: val, isSet: true}
}

func (v NullableInstallLicenseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallLicenseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


