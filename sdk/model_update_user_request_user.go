/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateUserRequestUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserRequestUser{}

// UpdateUserRequestUser struct for UpdateUserRequestUser
type UpdateUserRequestUser struct {
	// First Name
	FirstName *string `json:"firstName,omitempty"`
	// Last Name
	LastName *string `json:"lastName,omitempty"`
	// Username (unique per tenant).
	Username *string `json:"username,omitempty"`
	// Email address
	Email *string `json:"email,omitempty"`
	// Password
	Password *string `json:"password,omitempty"`
	// List of Roles
	Roles []UpdateUserRequestUserRolesInner `json:"roles,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UpdateUserRequestUser UpdateUserRequestUser

// NewUpdateUserRequestUser instantiates a new UpdateUserRequestUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserRequestUser() *UpdateUserRequestUser {
	this := UpdateUserRequestUser{}
	return &this
}

// NewUpdateUserRequestUserWithDefaults instantiates a new UpdateUserRequestUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserRequestUserWithDefaults() *UpdateUserRequestUser {
	this := UpdateUserRequestUser{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UpdateUserRequestUser) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUser) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// IsSetFirstName returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UpdateUserRequestUser) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UpdateUserRequestUser) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUser) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// IsSetLastName returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UpdateUserRequestUser) SetLastName(v string) {
	o.LastName = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UpdateUserRequestUser) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUser) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// IsSetUsername returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UpdateUserRequestUser) SetUsername(v string) {
	o.Username = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateUserRequestUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// IsSetEmail returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateUserRequestUser) SetEmail(v string) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UpdateUserRequestUser) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUser) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// IsSetPassword returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UpdateUserRequestUser) SetPassword(v string) {
	o.Password = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UpdateUserRequestUser) GetRoles() []UpdateUserRequestUserRolesInner {
	if o == nil || IsNil(o.Roles) {
		var ret []UpdateUserRequestUserRolesInner
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUser) GetRolesOk() ([]UpdateUserRequestUserRolesInner, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// IsSetRoles returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []UpdateUserRequestUserRolesInner and assigns it to the Roles field.
func (o *UpdateUserRequestUser) SetRoles(v []UpdateUserRequestUserRolesInner) {
	o.Roles = v
}

func (o UpdateUserRequestUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserRequestUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FirstName) {
		toSerialize["firstName"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["lastName"] = o.LastName
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UpdateUserRequestUser) UnmarshalJSON(data []byte) (err error) {
	varUpdateUserRequestUser := _UpdateUserRequestUser{}

	err = json.Unmarshal(data, &varUpdateUserRequestUser)

	if err != nil {
		return err
	}

	*o = UpdateUserRequestUser(varUpdateUserRequestUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "firstName")
		delete(additionalProperties, "lastName")
		delete(additionalProperties, "username")
		delete(additionalProperties, "email")
		delete(additionalProperties, "password")
		delete(additionalProperties, "roles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUpdateUserRequestUser struct {
	value *UpdateUserRequestUser
	isSet bool
}

func (v NullableUpdateUserRequestUser) Get() *UpdateUserRequestUser {
	return v.value
}

func (v *NullableUpdateUserRequestUser) Set(val *UpdateUserRequestUser) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserRequestUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserRequestUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserRequestUser(val *UpdateUserRequestUser) *NullableUpdateUserRequestUser {
	return &NullableUpdateUserRequestUser{value: val, isSet: true}
}

func (v NullableUpdateUserRequestUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserRequestUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


