/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateUserRequestUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserRequestUser{}

// UpdateUserRequestUser struct for UpdateUserRequestUser
type UpdateUserRequestUser struct {
	// First Name
	FirstName NullableString `json:"firstName,omitempty"`
	// Last Name
	LastName NullableString `json:"lastName,omitempty"`
	// Username (unique per tenant).
	Username        *string        `json:"username,omitempty"`
	LinuxUsername   NullableString `json:"linuxUsername,omitempty"`
	LinuxPassword   NullableString `json:"linuxPassword,omitempty"`
	LinuxKeyPairId  NullableString `json:"linuxKeyPairId,omitempty"`
	WindowsUsername NullableString `json:"windowsUsername,omitempty"`
	WindowsPassword NullableString `json:"windowsPassword,omitempty"`
	// Email address
	Email *string `json:"email,omitempty"`
	// Password
	Password *string `json:"password,omitempty"`
	// List of Roles
	Roles                []UpdateUserRequestUserRolesInner `json:"roles,omitempty"`
	AdditionalProperties map[string]interface{}            `json:",remain"`
}

type _UpdateUserRequestUser UpdateUserRequestUser

// NewUpdateUserRequestUser instantiates a new UpdateUserRequestUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserRequestUser() *UpdateUserRequestUser {
	this := UpdateUserRequestUser{}
	return &this
}

// NewUpdateUserRequestUserWithDefaults instantiates a new UpdateUserRequestUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserRequestUserWithDefaults() *UpdateUserRequestUser {
	this := UpdateUserRequestUser{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequestUser) GetFirstName() string {
	if o == nil || IsNil(o.FirstName.Get()) {
		var ret string
		return ret
	}
	return *o.FirstName.Get()
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequestUser) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstName.Get(), o.FirstName.IsSet()
}

// IsSetFirstName returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetFirstName() bool {
	if o != nil && o.FirstName.IsSet() {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given NullableString and assigns it to the FirstName field.
func (o *UpdateUserRequestUser) SetFirstName(v string) {
	o.FirstName.Set(&v)
}

// SetFirstNameNil sets the value for FirstName to be an explicit nil
func (o *UpdateUserRequestUser) SetFirstNameNil() {
	o.FirstName.Set(nil)
}

// UnsetFirstName ensures that no value is present for FirstName, not even an explicit nil
func (o *UpdateUserRequestUser) UnsetFirstName() {
	o.FirstName.Unset()
}

// GetLastName returns the LastName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequestUser) GetLastName() string {
	if o == nil || IsNil(o.LastName.Get()) {
		var ret string
		return ret
	}
	return *o.LastName.Get()
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequestUser) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastName.Get(), o.LastName.IsSet()
}

// IsSetLastName returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetLastName() bool {
	if o != nil && o.LastName.IsSet() {
		return true
	}

	return false
}

// SetLastName gets a reference to the given NullableString and assigns it to the LastName field.
func (o *UpdateUserRequestUser) SetLastName(v string) {
	o.LastName.Set(&v)
}

// SetLastNameNil sets the value for LastName to be an explicit nil
func (o *UpdateUserRequestUser) SetLastNameNil() {
	o.LastName.Set(nil)
}

// UnsetLastName ensures that no value is present for LastName, not even an explicit nil
func (o *UpdateUserRequestUser) UnsetLastName() {
	o.LastName.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UpdateUserRequestUser) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUser) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// IsSetUsername returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UpdateUserRequestUser) SetUsername(v string) {
	o.Username = &v
}

// GetLinuxUsername returns the LinuxUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequestUser) GetLinuxUsername() string {
	if o == nil || IsNil(o.LinuxUsername.Get()) {
		var ret string
		return ret
	}
	return *o.LinuxUsername.Get()
}

// GetLinuxUsernameOk returns a tuple with the LinuxUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequestUser) GetLinuxUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinuxUsername.Get(), o.LinuxUsername.IsSet()
}

// IsSetLinuxUsername returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetLinuxUsername() bool {
	if o != nil && o.LinuxUsername.IsSet() {
		return true
	}

	return false
}

// SetLinuxUsername gets a reference to the given NullableString and assigns it to the LinuxUsername field.
func (o *UpdateUserRequestUser) SetLinuxUsername(v string) {
	o.LinuxUsername.Set(&v)
}

// SetLinuxUsernameNil sets the value for LinuxUsername to be an explicit nil
func (o *UpdateUserRequestUser) SetLinuxUsernameNil() {
	o.LinuxUsername.Set(nil)
}

// UnsetLinuxUsername ensures that no value is present for LinuxUsername, not even an explicit nil
func (o *UpdateUserRequestUser) UnsetLinuxUsername() {
	o.LinuxUsername.Unset()
}

// GetLinuxPassword returns the LinuxPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequestUser) GetLinuxPassword() string {
	if o == nil || IsNil(o.LinuxPassword.Get()) {
		var ret string
		return ret
	}
	return *o.LinuxPassword.Get()
}

// GetLinuxPasswordOk returns a tuple with the LinuxPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequestUser) GetLinuxPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinuxPassword.Get(), o.LinuxPassword.IsSet()
}

// IsSetLinuxPassword returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetLinuxPassword() bool {
	if o != nil && o.LinuxPassword.IsSet() {
		return true
	}

	return false
}

// SetLinuxPassword gets a reference to the given NullableString and assigns it to the LinuxPassword field.
func (o *UpdateUserRequestUser) SetLinuxPassword(v string) {
	o.LinuxPassword.Set(&v)
}

// SetLinuxPasswordNil sets the value for LinuxPassword to be an explicit nil
func (o *UpdateUserRequestUser) SetLinuxPasswordNil() {
	o.LinuxPassword.Set(nil)
}

// UnsetLinuxPassword ensures that no value is present for LinuxPassword, not even an explicit nil
func (o *UpdateUserRequestUser) UnsetLinuxPassword() {
	o.LinuxPassword.Unset()
}

// GetLinuxKeyPairId returns the LinuxKeyPairId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequestUser) GetLinuxKeyPairId() string {
	if o == nil || IsNil(o.LinuxKeyPairId.Get()) {
		var ret string
		return ret
	}
	return *o.LinuxKeyPairId.Get()
}

// GetLinuxKeyPairIdOk returns a tuple with the LinuxKeyPairId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequestUser) GetLinuxKeyPairIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinuxKeyPairId.Get(), o.LinuxKeyPairId.IsSet()
}

// IsSetLinuxKeyPairId returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetLinuxKeyPairId() bool {
	if o != nil && o.LinuxKeyPairId.IsSet() {
		return true
	}

	return false
}

// SetLinuxKeyPairId gets a reference to the given NullableString and assigns it to the LinuxKeyPairId field.
func (o *UpdateUserRequestUser) SetLinuxKeyPairId(v string) {
	o.LinuxKeyPairId.Set(&v)
}

// SetLinuxKeyPairIdNil sets the value for LinuxKeyPairId to be an explicit nil
func (o *UpdateUserRequestUser) SetLinuxKeyPairIdNil() {
	o.LinuxKeyPairId.Set(nil)
}

// UnsetLinuxKeyPairId ensures that no value is present for LinuxKeyPairId, not even an explicit nil
func (o *UpdateUserRequestUser) UnsetLinuxKeyPairId() {
	o.LinuxKeyPairId.Unset()
}

// GetWindowsUsername returns the WindowsUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequestUser) GetWindowsUsername() string {
	if o == nil || IsNil(o.WindowsUsername.Get()) {
		var ret string
		return ret
	}
	return *o.WindowsUsername.Get()
}

// GetWindowsUsernameOk returns a tuple with the WindowsUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequestUser) GetWindowsUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WindowsUsername.Get(), o.WindowsUsername.IsSet()
}

// IsSetWindowsUsername returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetWindowsUsername() bool {
	if o != nil && o.WindowsUsername.IsSet() {
		return true
	}

	return false
}

// SetWindowsUsername gets a reference to the given NullableString and assigns it to the WindowsUsername field.
func (o *UpdateUserRequestUser) SetWindowsUsername(v string) {
	o.WindowsUsername.Set(&v)
}

// SetWindowsUsernameNil sets the value for WindowsUsername to be an explicit nil
func (o *UpdateUserRequestUser) SetWindowsUsernameNil() {
	o.WindowsUsername.Set(nil)
}

// UnsetWindowsUsername ensures that no value is present for WindowsUsername, not even an explicit nil
func (o *UpdateUserRequestUser) UnsetWindowsUsername() {
	o.WindowsUsername.Unset()
}

// GetWindowsPassword returns the WindowsPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequestUser) GetWindowsPassword() string {
	if o == nil || IsNil(o.WindowsPassword.Get()) {
		var ret string
		return ret
	}
	return *o.WindowsPassword.Get()
}

// GetWindowsPasswordOk returns a tuple with the WindowsPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequestUser) GetWindowsPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WindowsPassword.Get(), o.WindowsPassword.IsSet()
}

// IsSetWindowsPassword returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetWindowsPassword() bool {
	if o != nil && o.WindowsPassword.IsSet() {
		return true
	}

	return false
}

// SetWindowsPassword gets a reference to the given NullableString and assigns it to the WindowsPassword field.
func (o *UpdateUserRequestUser) SetWindowsPassword(v string) {
	o.WindowsPassword.Set(&v)
}

// SetWindowsPasswordNil sets the value for WindowsPassword to be an explicit nil
func (o *UpdateUserRequestUser) SetWindowsPasswordNil() {
	o.WindowsPassword.Set(nil)
}

// UnsetWindowsPassword ensures that no value is present for WindowsPassword, not even an explicit nil
func (o *UpdateUserRequestUser) UnsetWindowsPassword() {
	o.WindowsPassword.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateUserRequestUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// IsSetEmail returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateUserRequestUser) SetEmail(v string) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UpdateUserRequestUser) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUser) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// IsSetPassword returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UpdateUserRequestUser) SetPassword(v string) {
	o.Password = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UpdateUserRequestUser) GetRoles() []UpdateUserRequestUserRolesInner {
	if o == nil || IsNil(o.Roles) {
		var ret []UpdateUserRequestUserRolesInner
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequestUser) GetRolesOk() ([]UpdateUserRequestUserRolesInner, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// IsSetRoles returns a boolean if a field has been set.
func (o *UpdateUserRequestUser) IsSetRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []UpdateUserRequestUserRolesInner and assigns it to the Roles field.
func (o *UpdateUserRequestUser) SetRoles(v []UpdateUserRequestUserRolesInner) {
	o.Roles = v
}

func (o UpdateUserRequestUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserRequestUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FirstName.IsSet() {
		toSerialize["firstName"] = o.FirstName.Get()
	}
	if o.LastName.IsSet() {
		toSerialize["lastName"] = o.LastName.Get()
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if o.LinuxUsername.IsSet() {
		toSerialize["linuxUsername"] = o.LinuxUsername.Get()
	}
	if o.LinuxPassword.IsSet() {
		toSerialize["linuxPassword"] = o.LinuxPassword.Get()
	}
	if o.LinuxKeyPairId.IsSet() {
		toSerialize["linuxKeyPairId"] = o.LinuxKeyPairId.Get()
	}
	if o.WindowsUsername.IsSet() {
		toSerialize["windowsUsername"] = o.WindowsUsername.Get()
	}
	if o.WindowsPassword.IsSet() {
		toSerialize["windowsPassword"] = o.WindowsPassword.Get()
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *UpdateUserRequestUser) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
