/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
)

// checks if the Cypher type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cypher{}

// Cypher struct for Cypher
type Cypher struct {
	Id *int32 `json:"id,omitempty"`
	ItemKey *string `json:"itemKey,omitempty"`
	LeaseTimeout *int64 `json:"leaseTimeout,omitempty"`
	ExpireDate *time.Time `json:"expireDate,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	LastAccessed *time.Time `json:"lastAccessed,omitempty"`
	CreatedBy *string `json:"createdBy,omitempty"`
}

// NewCypher instantiates a new Cypher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCypher() *Cypher {
	this := Cypher{}
	return &this
}

// NewCypherWithDefaults instantiates a new Cypher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCypherWithDefaults() *Cypher {
	this := Cypher{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Cypher) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cypher) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *Cypher) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Cypher) SetId(v int32) {
	o.Id = &v
}

// GetItemKey returns the ItemKey field value if set, zero value otherwise.
func (o *Cypher) GetItemKey() string {
	if o == nil || IsNil(o.ItemKey) {
		var ret string
		return ret
	}
	return *o.ItemKey
}

// GetItemKeyOk returns a tuple with the ItemKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cypher) GetItemKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ItemKey) {
		return nil, false
	}
	return o.ItemKey, true
}

// IsSetItemKey returns a boolean if a field has been set.
func (o *Cypher) IsSetItemKey() bool {
	if o != nil && !IsNil(o.ItemKey) {
		return true
	}

	return false
}

// SetItemKey gets a reference to the given string and assigns it to the ItemKey field.
func (o *Cypher) SetItemKey(v string) {
	o.ItemKey = &v
}

// GetLeaseTimeout returns the LeaseTimeout field value if set, zero value otherwise.
func (o *Cypher) GetLeaseTimeout() int64 {
	if o == nil || IsNil(o.LeaseTimeout) {
		var ret int64
		return ret
	}
	return *o.LeaseTimeout
}

// GetLeaseTimeoutOk returns a tuple with the LeaseTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cypher) GetLeaseTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.LeaseTimeout) {
		return nil, false
	}
	return o.LeaseTimeout, true
}

// IsSetLeaseTimeout returns a boolean if a field has been set.
func (o *Cypher) IsSetLeaseTimeout() bool {
	if o != nil && !IsNil(o.LeaseTimeout) {
		return true
	}

	return false
}

// SetLeaseTimeout gets a reference to the given int64 and assigns it to the LeaseTimeout field.
func (o *Cypher) SetLeaseTimeout(v int64) {
	o.LeaseTimeout = &v
}

// GetExpireDate returns the ExpireDate field value if set, zero value otherwise.
func (o *Cypher) GetExpireDate() time.Time {
	if o == nil || IsNil(o.ExpireDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpireDate
}

// GetExpireDateOk returns a tuple with the ExpireDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cypher) GetExpireDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireDate) {
		return nil, false
	}
	return o.ExpireDate, true
}

// IsSetExpireDate returns a boolean if a field has been set.
func (o *Cypher) IsSetExpireDate() bool {
	if o != nil && !IsNil(o.ExpireDate) {
		return true
	}

	return false
}

// SetExpireDate gets a reference to the given time.Time and assigns it to the ExpireDate field.
func (o *Cypher) SetExpireDate(v time.Time) {
	o.ExpireDate = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Cypher) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cypher) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// IsSetDateCreated returns a boolean if a field has been set.
func (o *Cypher) IsSetDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Cypher) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Cypher) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cypher) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// IsSetLastUpdated returns a boolean if a field has been set.
func (o *Cypher) IsSetLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Cypher) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetLastAccessed returns the LastAccessed field value if set, zero value otherwise.
func (o *Cypher) GetLastAccessed() time.Time {
	if o == nil || IsNil(o.LastAccessed) {
		var ret time.Time
		return ret
	}
	return *o.LastAccessed
}

// GetLastAccessedOk returns a tuple with the LastAccessed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cypher) GetLastAccessedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastAccessed) {
		return nil, false
	}
	return o.LastAccessed, true
}

// IsSetLastAccessed returns a boolean if a field has been set.
func (o *Cypher) IsSetLastAccessed() bool {
	if o != nil && !IsNil(o.LastAccessed) {
		return true
	}

	return false
}

// SetLastAccessed gets a reference to the given time.Time and assigns it to the LastAccessed field.
func (o *Cypher) SetLastAccessed(v time.Time) {
	o.LastAccessed = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Cypher) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cypher) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// IsSetCreatedBy returns a boolean if a field has been set.
func (o *Cypher) IsSetCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *Cypher) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

func (o Cypher) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cypher) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ItemKey) {
		toSerialize["itemKey"] = o.ItemKey
	}
	if !IsNil(o.LeaseTimeout) {
		toSerialize["leaseTimeout"] = o.LeaseTimeout
	}
	if !IsNil(o.ExpireDate) {
		toSerialize["expireDate"] = o.ExpireDate
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.LastAccessed) {
		toSerialize["lastAccessed"] = o.LastAccessed
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	return toSerialize, nil
}

type NullableCypher struct {
	value *Cypher
	isSet bool
}

func (v NullableCypher) Get() *Cypher {
	return v.value
}

func (v *NullableCypher) Set(val *Cypher) {
	v.value = val
	v.isSet = true
}

func (v NullableCypher) IsSet() bool {
	return v.isSet
}

func (v *NullableCypher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCypher(val *Cypher) *NullableCypher {
	return &NullableCypher{value: val, isSet: true}
}

func (v NullableCypher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCypher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


