/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddDeploymentVersionRequestVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddDeploymentVersionRequestVersion{}

// AddDeploymentVersionRequestVersion struct for AddDeploymentVersionRequestVersion
type AddDeploymentVersionRequestVersion struct {
	// Version number (userVersion), a unique version identifier for the deployment version.
	Version *string `json:"version,omitempty"`
	// Alias for version
	UserVersion *string `json:"userVersion,omitempty"`
	// Deploy Type, eg. file, git, fetch
	DeployType *string `json:"deployType,omitempty"`
	GitUrl *string `json:"gitUrl,omitempty"`
	GitRef *string `json:"gitRef,omitempty"`
	FetchUrl *string `json:"fetchUrl,omitempty"`
}

// NewAddDeploymentVersionRequestVersion instantiates a new AddDeploymentVersionRequestVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddDeploymentVersionRequestVersion() *AddDeploymentVersionRequestVersion {
	this := AddDeploymentVersionRequestVersion{}
	return &this
}

// NewAddDeploymentVersionRequestVersionWithDefaults instantiates a new AddDeploymentVersionRequestVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddDeploymentVersionRequestVersionWithDefaults() *AddDeploymentVersionRequestVersion {
	this := AddDeploymentVersionRequestVersion{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AddDeploymentVersionRequestVersion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDeploymentVersionRequestVersion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// IsSetVersion returns a boolean if a field has been set.
func (o *AddDeploymentVersionRequestVersion) IsSetVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AddDeploymentVersionRequestVersion) SetVersion(v string) {
	o.Version = &v
}

// GetUserVersion returns the UserVersion field value if set, zero value otherwise.
func (o *AddDeploymentVersionRequestVersion) GetUserVersion() string {
	if o == nil || IsNil(o.UserVersion) {
		var ret string
		return ret
	}
	return *o.UserVersion
}

// GetUserVersionOk returns a tuple with the UserVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDeploymentVersionRequestVersion) GetUserVersionOk() (*string, bool) {
	if o == nil || IsNil(o.UserVersion) {
		return nil, false
	}
	return o.UserVersion, true
}

// IsSetUserVersion returns a boolean if a field has been set.
func (o *AddDeploymentVersionRequestVersion) IsSetUserVersion() bool {
	if o != nil && !IsNil(o.UserVersion) {
		return true
	}

	return false
}

// SetUserVersion gets a reference to the given string and assigns it to the UserVersion field.
func (o *AddDeploymentVersionRequestVersion) SetUserVersion(v string) {
	o.UserVersion = &v
}

// GetDeployType returns the DeployType field value if set, zero value otherwise.
func (o *AddDeploymentVersionRequestVersion) GetDeployType() string {
	if o == nil || IsNil(o.DeployType) {
		var ret string
		return ret
	}
	return *o.DeployType
}

// GetDeployTypeOk returns a tuple with the DeployType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDeploymentVersionRequestVersion) GetDeployTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DeployType) {
		return nil, false
	}
	return o.DeployType, true
}

// IsSetDeployType returns a boolean if a field has been set.
func (o *AddDeploymentVersionRequestVersion) IsSetDeployType() bool {
	if o != nil && !IsNil(o.DeployType) {
		return true
	}

	return false
}

// SetDeployType gets a reference to the given string and assigns it to the DeployType field.
func (o *AddDeploymentVersionRequestVersion) SetDeployType(v string) {
	o.DeployType = &v
}

// GetGitUrl returns the GitUrl field value if set, zero value otherwise.
func (o *AddDeploymentVersionRequestVersion) GetGitUrl() string {
	if o == nil || IsNil(o.GitUrl) {
		var ret string
		return ret
	}
	return *o.GitUrl
}

// GetGitUrlOk returns a tuple with the GitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDeploymentVersionRequestVersion) GetGitUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GitUrl) {
		return nil, false
	}
	return o.GitUrl, true
}

// IsSetGitUrl returns a boolean if a field has been set.
func (o *AddDeploymentVersionRequestVersion) IsSetGitUrl() bool {
	if o != nil && !IsNil(o.GitUrl) {
		return true
	}

	return false
}

// SetGitUrl gets a reference to the given string and assigns it to the GitUrl field.
func (o *AddDeploymentVersionRequestVersion) SetGitUrl(v string) {
	o.GitUrl = &v
}

// GetGitRef returns the GitRef field value if set, zero value otherwise.
func (o *AddDeploymentVersionRequestVersion) GetGitRef() string {
	if o == nil || IsNil(o.GitRef) {
		var ret string
		return ret
	}
	return *o.GitRef
}

// GetGitRefOk returns a tuple with the GitRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDeploymentVersionRequestVersion) GetGitRefOk() (*string, bool) {
	if o == nil || IsNil(o.GitRef) {
		return nil, false
	}
	return o.GitRef, true
}

// IsSetGitRef returns a boolean if a field has been set.
func (o *AddDeploymentVersionRequestVersion) IsSetGitRef() bool {
	if o != nil && !IsNil(o.GitRef) {
		return true
	}

	return false
}

// SetGitRef gets a reference to the given string and assigns it to the GitRef field.
func (o *AddDeploymentVersionRequestVersion) SetGitRef(v string) {
	o.GitRef = &v
}

// GetFetchUrl returns the FetchUrl field value if set, zero value otherwise.
func (o *AddDeploymentVersionRequestVersion) GetFetchUrl() string {
	if o == nil || IsNil(o.FetchUrl) {
		var ret string
		return ret
	}
	return *o.FetchUrl
}

// GetFetchUrlOk returns a tuple with the FetchUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddDeploymentVersionRequestVersion) GetFetchUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FetchUrl) {
		return nil, false
	}
	return o.FetchUrl, true
}

// IsSetFetchUrl returns a boolean if a field has been set.
func (o *AddDeploymentVersionRequestVersion) IsSetFetchUrl() bool {
	if o != nil && !IsNil(o.FetchUrl) {
		return true
	}

	return false
}

// SetFetchUrl gets a reference to the given string and assigns it to the FetchUrl field.
func (o *AddDeploymentVersionRequestVersion) SetFetchUrl(v string) {
	o.FetchUrl = &v
}

func (o AddDeploymentVersionRequestVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddDeploymentVersionRequestVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.UserVersion) {
		toSerialize["userVersion"] = o.UserVersion
	}
	if !IsNil(o.DeployType) {
		toSerialize["deployType"] = o.DeployType
	}
	if !IsNil(o.GitUrl) {
		toSerialize["gitUrl"] = o.GitUrl
	}
	if !IsNil(o.GitRef) {
		toSerialize["gitRef"] = o.GitRef
	}
	if !IsNil(o.FetchUrl) {
		toSerialize["fetchUrl"] = o.FetchUrl
	}
	return toSerialize, nil
}

type NullableAddDeploymentVersionRequestVersion struct {
	value *AddDeploymentVersionRequestVersion
	isSet bool
}

func (v NullableAddDeploymentVersionRequestVersion) Get() *AddDeploymentVersionRequestVersion {
	return v.value
}

func (v *NullableAddDeploymentVersionRequestVersion) Set(val *AddDeploymentVersionRequestVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableAddDeploymentVersionRequestVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableAddDeploymentVersionRequestVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddDeploymentVersionRequestVersion(val *AddDeploymentVersionRequestVersion) *NullableAddDeploymentVersionRequestVersion {
	return &NullableAddDeploymentVersionRequestVersion{value: val, isSet: true}
}

func (v NullableAddDeploymentVersionRequestVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddDeploymentVersionRequestVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


