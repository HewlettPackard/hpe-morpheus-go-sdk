/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AllocateNetworkFloatingIpRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllocateNetworkFloatingIpRequest{}

// AllocateNetworkFloatingIpRequest struct for AllocateNetworkFloatingIpRequest
type AllocateNetworkFloatingIpRequest struct {
	// Id of the network server
	NetworkServerId *int64 `json:"networkServerId,omitempty"`
	// Id of the network floating ip pool
	FloatingIpPoolId *int64 `json:"floatingIpPoolId,omitempty"`
}

// NewAllocateNetworkFloatingIpRequest instantiates a new AllocateNetworkFloatingIpRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocateNetworkFloatingIpRequest() *AllocateNetworkFloatingIpRequest {
	this := AllocateNetworkFloatingIpRequest{}
	return &this
}

// NewAllocateNetworkFloatingIpRequestWithDefaults instantiates a new AllocateNetworkFloatingIpRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocateNetworkFloatingIpRequestWithDefaults() *AllocateNetworkFloatingIpRequest {
	this := AllocateNetworkFloatingIpRequest{}
	return &this
}

// GetNetworkServerId returns the NetworkServerId field value if set, zero value otherwise.
func (o *AllocateNetworkFloatingIpRequest) GetNetworkServerId() int64 {
	if o == nil || IsNil(o.NetworkServerId) {
		var ret int64
		return ret
	}
	return *o.NetworkServerId
}

// GetNetworkServerIdOk returns a tuple with the NetworkServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocateNetworkFloatingIpRequest) GetNetworkServerIdOk() (*int64, bool) {
	if o == nil || IsNil(o.NetworkServerId) {
		return nil, false
	}
	return o.NetworkServerId, true
}

// IsSetNetworkServerId returns a boolean if a field has been set.
func (o *AllocateNetworkFloatingIpRequest) IsSetNetworkServerId() bool {
	if o != nil && !IsNil(o.NetworkServerId) {
		return true
	}

	return false
}

// SetNetworkServerId gets a reference to the given int64 and assigns it to the NetworkServerId field.
func (o *AllocateNetworkFloatingIpRequest) SetNetworkServerId(v int64) {
	o.NetworkServerId = &v
}

// GetFloatingIpPoolId returns the FloatingIpPoolId field value if set, zero value otherwise.
func (o *AllocateNetworkFloatingIpRequest) GetFloatingIpPoolId() int64 {
	if o == nil || IsNil(o.FloatingIpPoolId) {
		var ret int64
		return ret
	}
	return *o.FloatingIpPoolId
}

// GetFloatingIpPoolIdOk returns a tuple with the FloatingIpPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocateNetworkFloatingIpRequest) GetFloatingIpPoolIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FloatingIpPoolId) {
		return nil, false
	}
	return o.FloatingIpPoolId, true
}

// IsSetFloatingIpPoolId returns a boolean if a field has been set.
func (o *AllocateNetworkFloatingIpRequest) IsSetFloatingIpPoolId() bool {
	if o != nil && !IsNil(o.FloatingIpPoolId) {
		return true
	}

	return false
}

// SetFloatingIpPoolId gets a reference to the given int64 and assigns it to the FloatingIpPoolId field.
func (o *AllocateNetworkFloatingIpRequest) SetFloatingIpPoolId(v int64) {
	o.FloatingIpPoolId = &v
}

func (o AllocateNetworkFloatingIpRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllocateNetworkFloatingIpRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkServerId) {
		toSerialize["networkServerId"] = o.NetworkServerId
	}
	if !IsNil(o.FloatingIpPoolId) {
		toSerialize["floatingIpPoolId"] = o.FloatingIpPoolId
	}
	return toSerialize, nil
}

type NullableAllocateNetworkFloatingIpRequest struct {
	value *AllocateNetworkFloatingIpRequest
	isSet bool
}

func (v NullableAllocateNetworkFloatingIpRequest) Get() *AllocateNetworkFloatingIpRequest {
	return v.value
}

func (v *NullableAllocateNetworkFloatingIpRequest) Set(val *AllocateNetworkFloatingIpRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocateNetworkFloatingIpRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocateNetworkFloatingIpRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocateNetworkFloatingIpRequest(val *AllocateNetworkFloatingIpRequest) *NullableAllocateNetworkFloatingIpRequest {
	return &NullableAllocateNetworkFloatingIpRequest{value: val, isSet: true}
}

func (v NullableAllocateNetworkFloatingIpRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocateNetworkFloatingIpRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


