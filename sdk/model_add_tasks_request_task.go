/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddTasksRequestTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddTasksRequestTask{}

// AddTasksRequestTask struct for AddTasksRequestTask
type AddTasksRequestTask struct {
	// A unique name for the task
	Name string `json:"name"`
	// A unique code for the task
	Code *string `json:"code,omitempty"`
	// private or public
	Visibility *string `json:"visibility,omitempty"`
	TaskType AddTasksRequestTaskTaskType `json:"taskType"`
	// An array of Category labels for filtering
	Labels []string `json:"labels,omitempty"`
	// Map of options specific to each `task type`. eg. script
	TaskOptions map[string]interface{} `json:"taskOptions,omitempty"`
	ResultType *string `json:"resultType,omitempty"`
	// The execution target. eg. local,remote,resource. The default value varies by task type. 
	ExecuteTarget string `json:"executeTarget"`
	// If the task should be retried or not.
	Retryable *bool `json:"retryable,omitempty"`
	// The number of times to retry.
	RetryCount *int32 `json:"retryCount,omitempty"`
	// The delay, between retries.
	RetryDelaySeconds *float32 `json:"retryDelaySeconds,omitempty"`
	File *AddTasksRequestTaskFile `json:"file,omitempty"`
	Credential *AddTasksRequestTaskCredential `json:"credential,omitempty"`
}

type _AddTasksRequestTask AddTasksRequestTask

// NewAddTasksRequestTask instantiates a new AddTasksRequestTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddTasksRequestTask(name string, taskType AddTasksRequestTaskTaskType, executeTarget string) *AddTasksRequestTask {
	this := AddTasksRequestTask{}
	this.Name = name
	var visibility string = "private"
	this.Visibility = &visibility
	this.TaskType = taskType
	this.ExecuteTarget = executeTarget
	var retryable bool = false
	this.Retryable = &retryable
	return &this
}

// NewAddTasksRequestTaskWithDefaults instantiates a new AddTasksRequestTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddTasksRequestTaskWithDefaults() *AddTasksRequestTask {
	this := AddTasksRequestTask{}
	var visibility string = "private"
	this.Visibility = &visibility
	var retryable bool = false
	this.Retryable = &retryable
	return &this
}

// GetName returns the Name field value
func (o *AddTasksRequestTask) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddTasksRequestTask) SetName(v string) {
	o.Name = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AddTasksRequestTask) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// IsSetCode returns a boolean if a field has been set.
func (o *AddTasksRequestTask) IsSetCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AddTasksRequestTask) SetCode(v string) {
	o.Code = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *AddTasksRequestTask) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// IsSetVisibility returns a boolean if a field has been set.
func (o *AddTasksRequestTask) IsSetVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *AddTasksRequestTask) SetVisibility(v string) {
	o.Visibility = &v
}

// GetTaskType returns the TaskType field value
func (o *AddTasksRequestTask) GetTaskType() AddTasksRequestTaskTaskType {
	if o == nil {
		var ret AddTasksRequestTaskTaskType
		return ret
	}

	return o.TaskType
}

// GetTaskTypeOk returns a tuple with the TaskType field value
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetTaskTypeOk() (*AddTasksRequestTaskTaskType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaskType, true
}

// SetTaskType sets field value
func (o *AddTasksRequestTask) SetTaskType(v AddTasksRequestTaskTaskType) {
	o.TaskType = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *AddTasksRequestTask) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// IsSetLabels returns a boolean if a field has been set.
func (o *AddTasksRequestTask) IsSetLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *AddTasksRequestTask) SetLabels(v []string) {
	o.Labels = v
}

// GetTaskOptions returns the TaskOptions field value if set, zero value otherwise.
func (o *AddTasksRequestTask) GetTaskOptions() map[string]interface{} {
	if o == nil || IsNil(o.TaskOptions) {
		var ret map[string]interface{}
		return ret
	}
	return o.TaskOptions
}

// GetTaskOptionsOk returns a tuple with the TaskOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetTaskOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TaskOptions) {
		return map[string]interface{}{}, false
	}
	return o.TaskOptions, true
}

// IsSetTaskOptions returns a boolean if a field has been set.
func (o *AddTasksRequestTask) IsSetTaskOptions() bool {
	if o != nil && !IsNil(o.TaskOptions) {
		return true
	}

	return false
}

// SetTaskOptions gets a reference to the given map[string]interface{} and assigns it to the TaskOptions field.
func (o *AddTasksRequestTask) SetTaskOptions(v map[string]interface{}) {
	o.TaskOptions = v
}

// GetResultType returns the ResultType field value if set, zero value otherwise.
func (o *AddTasksRequestTask) GetResultType() string {
	if o == nil || IsNil(o.ResultType) {
		var ret string
		return ret
	}
	return *o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetResultTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResultType) {
		return nil, false
	}
	return o.ResultType, true
}

// IsSetResultType returns a boolean if a field has been set.
func (o *AddTasksRequestTask) IsSetResultType() bool {
	if o != nil && !IsNil(o.ResultType) {
		return true
	}

	return false
}

// SetResultType gets a reference to the given string and assigns it to the ResultType field.
func (o *AddTasksRequestTask) SetResultType(v string) {
	o.ResultType = &v
}

// GetExecuteTarget returns the ExecuteTarget field value
func (o *AddTasksRequestTask) GetExecuteTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecuteTarget
}

// GetExecuteTargetOk returns a tuple with the ExecuteTarget field value
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetExecuteTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecuteTarget, true
}

// SetExecuteTarget sets field value
func (o *AddTasksRequestTask) SetExecuteTarget(v string) {
	o.ExecuteTarget = v
}

// GetRetryable returns the Retryable field value if set, zero value otherwise.
func (o *AddTasksRequestTask) GetRetryable() bool {
	if o == nil || IsNil(o.Retryable) {
		var ret bool
		return ret
	}
	return *o.Retryable
}

// GetRetryableOk returns a tuple with the Retryable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetRetryableOk() (*bool, bool) {
	if o == nil || IsNil(o.Retryable) {
		return nil, false
	}
	return o.Retryable, true
}

// IsSetRetryable returns a boolean if a field has been set.
func (o *AddTasksRequestTask) IsSetRetryable() bool {
	if o != nil && !IsNil(o.Retryable) {
		return true
	}

	return false
}

// SetRetryable gets a reference to the given bool and assigns it to the Retryable field.
func (o *AddTasksRequestTask) SetRetryable(v bool) {
	o.Retryable = &v
}

// GetRetryCount returns the RetryCount field value if set, zero value otherwise.
func (o *AddTasksRequestTask) GetRetryCount() int32 {
	if o == nil || IsNil(o.RetryCount) {
		var ret int32
		return ret
	}
	return *o.RetryCount
}

// GetRetryCountOk returns a tuple with the RetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetRetryCountOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryCount) {
		return nil, false
	}
	return o.RetryCount, true
}

// IsSetRetryCount returns a boolean if a field has been set.
func (o *AddTasksRequestTask) IsSetRetryCount() bool {
	if o != nil && !IsNil(o.RetryCount) {
		return true
	}

	return false
}

// SetRetryCount gets a reference to the given int32 and assigns it to the RetryCount field.
func (o *AddTasksRequestTask) SetRetryCount(v int32) {
	o.RetryCount = &v
}

// GetRetryDelaySeconds returns the RetryDelaySeconds field value if set, zero value otherwise.
func (o *AddTasksRequestTask) GetRetryDelaySeconds() float32 {
	if o == nil || IsNil(o.RetryDelaySeconds) {
		var ret float32
		return ret
	}
	return *o.RetryDelaySeconds
}

// GetRetryDelaySecondsOk returns a tuple with the RetryDelaySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetRetryDelaySecondsOk() (*float32, bool) {
	if o == nil || IsNil(o.RetryDelaySeconds) {
		return nil, false
	}
	return o.RetryDelaySeconds, true
}

// IsSetRetryDelaySeconds returns a boolean if a field has been set.
func (o *AddTasksRequestTask) IsSetRetryDelaySeconds() bool {
	if o != nil && !IsNil(o.RetryDelaySeconds) {
		return true
	}

	return false
}

// SetRetryDelaySeconds gets a reference to the given float32 and assigns it to the RetryDelaySeconds field.
func (o *AddTasksRequestTask) SetRetryDelaySeconds(v float32) {
	o.RetryDelaySeconds = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *AddTasksRequestTask) GetFile() AddTasksRequestTaskFile {
	if o == nil || IsNil(o.File) {
		var ret AddTasksRequestTaskFile
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetFileOk() (*AddTasksRequestTaskFile, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// IsSetFile returns a boolean if a field has been set.
func (o *AddTasksRequestTask) IsSetFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given AddTasksRequestTaskFile and assigns it to the File field.
func (o *AddTasksRequestTask) SetFile(v AddTasksRequestTaskFile) {
	o.File = &v
}

// GetCredential returns the Credential field value if set, zero value otherwise.
func (o *AddTasksRequestTask) GetCredential() AddTasksRequestTaskCredential {
	if o == nil || IsNil(o.Credential) {
		var ret AddTasksRequestTaskCredential
		return ret
	}
	return *o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddTasksRequestTask) GetCredentialOk() (*AddTasksRequestTaskCredential, bool) {
	if o == nil || IsNil(o.Credential) {
		return nil, false
	}
	return o.Credential, true
}

// IsSetCredential returns a boolean if a field has been set.
func (o *AddTasksRequestTask) IsSetCredential() bool {
	if o != nil && !IsNil(o.Credential) {
		return true
	}

	return false
}

// SetCredential gets a reference to the given AddTasksRequestTaskCredential and assigns it to the Credential field.
func (o *AddTasksRequestTask) SetCredential(v AddTasksRequestTaskCredential) {
	o.Credential = &v
}

func (o AddTasksRequestTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddTasksRequestTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	toSerialize["taskType"] = o.TaskType
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.TaskOptions) {
		toSerialize["taskOptions"] = o.TaskOptions
	}
	if !IsNil(o.ResultType) {
		toSerialize["resultType"] = o.ResultType
	}
	toSerialize["executeTarget"] = o.ExecuteTarget
	if !IsNil(o.Retryable) {
		toSerialize["retryable"] = o.Retryable
	}
	if !IsNil(o.RetryCount) {
		toSerialize["retryCount"] = o.RetryCount
	}
	if !IsNil(o.RetryDelaySeconds) {
		toSerialize["retryDelaySeconds"] = o.RetryDelaySeconds
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.Credential) {
		toSerialize["credential"] = o.Credential
	}
	return toSerialize, nil
}

func (o *AddTasksRequestTask) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"taskType",
		"executeTarget",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddTasksRequestTask := _AddTasksRequestTask{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddTasksRequestTask)

	if err != nil {
		return err
	}

	*o = AddTasksRequestTask(varAddTasksRequestTask)

	return err
}

type NullableAddTasksRequestTask struct {
	value *AddTasksRequestTask
	isSet bool
}

func (v NullableAddTasksRequestTask) Get() *AddTasksRequestTask {
	return v.value
}

func (v *NullableAddTasksRequestTask) Set(val *AddTasksRequestTask) {
	v.value = val
	v.isSet = true
}

func (v NullableAddTasksRequestTask) IsSet() bool {
	return v.isSet
}

func (v *NullableAddTasksRequestTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddTasksRequestTask(val *AddTasksRequestTask) *NullableAddTasksRequestTask {
	return &NullableAddTasksRequestTask{value: val, isSet: true}
}

func (v NullableAddTasksRequestTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddTasksRequestTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


