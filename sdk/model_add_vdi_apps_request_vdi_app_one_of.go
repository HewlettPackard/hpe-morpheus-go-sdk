/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"os"
	"bytes"
	"fmt"
)

// checks if the AddVDIAppsRequestVdiAppOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddVDIAppsRequestVdiAppOneOf{}

// AddVDIAppsRequestVdiAppOneOf struct for AddVDIAppsRequestVdiAppOneOf
type AddVDIAppsRequestVdiAppOneOf struct {
	// VDI App name
	Name string `json:"name"`
	// Description
	Description *string `json:"description,omitempty"`
	// Icon Path. A relative location of an icon image
	IconPath **os.File `json:"iconPath,omitempty"`
	// The RDS App Name Prefix.  Must start with '||'
	LaunchPrefix *string `json:"launchPrefix,omitempty"`
}

type _AddVDIAppsRequestVdiAppOneOf AddVDIAppsRequestVdiAppOneOf

// NewAddVDIAppsRequestVdiAppOneOf instantiates a new AddVDIAppsRequestVdiAppOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddVDIAppsRequestVdiAppOneOf(name string) *AddVDIAppsRequestVdiAppOneOf {
	this := AddVDIAppsRequestVdiAppOneOf{}
	this.Name = name
	return &this
}

// NewAddVDIAppsRequestVdiAppOneOfWithDefaults instantiates a new AddVDIAppsRequestVdiAppOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddVDIAppsRequestVdiAppOneOfWithDefaults() *AddVDIAppsRequestVdiAppOneOf {
	this := AddVDIAppsRequestVdiAppOneOf{}
	return &this
}

// GetName returns the Name field value
func (o *AddVDIAppsRequestVdiAppOneOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AddVDIAppsRequestVdiAppOneOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AddVDIAppsRequestVdiAppOneOf) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddVDIAppsRequestVdiAppOneOf) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVDIAppsRequestVdiAppOneOf) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *AddVDIAppsRequestVdiAppOneOf) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddVDIAppsRequestVdiAppOneOf) SetDescription(v string) {
	o.Description = &v
}

// GetIconPath returns the IconPath field value if set, zero value otherwise.
func (o *AddVDIAppsRequestVdiAppOneOf) GetIconPath() *os.File {
	if o == nil || IsNil(o.IconPath) {
		var ret *os.File
		return ret
	}
	return *o.IconPath
}

// GetIconPathOk returns a tuple with the IconPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVDIAppsRequestVdiAppOneOf) GetIconPathOk() (**os.File, bool) {
	if o == nil || IsNil(o.IconPath) {
		return nil, false
	}
	return o.IconPath, true
}

// IsSetIconPath returns a boolean if a field has been set.
func (o *AddVDIAppsRequestVdiAppOneOf) IsSetIconPath() bool {
	if o != nil && !IsNil(o.IconPath) {
		return true
	}

	return false
}

// SetIconPath gets a reference to the given *os.File and assigns it to the IconPath field.
func (o *AddVDIAppsRequestVdiAppOneOf) SetIconPath(v *os.File) {
	o.IconPath = &v
}

// GetLaunchPrefix returns the LaunchPrefix field value if set, zero value otherwise.
func (o *AddVDIAppsRequestVdiAppOneOf) GetLaunchPrefix() string {
	if o == nil || IsNil(o.LaunchPrefix) {
		var ret string
		return ret
	}
	return *o.LaunchPrefix
}

// GetLaunchPrefixOk returns a tuple with the LaunchPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddVDIAppsRequestVdiAppOneOf) GetLaunchPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.LaunchPrefix) {
		return nil, false
	}
	return o.LaunchPrefix, true
}

// IsSetLaunchPrefix returns a boolean if a field has been set.
func (o *AddVDIAppsRequestVdiAppOneOf) IsSetLaunchPrefix() bool {
	if o != nil && !IsNil(o.LaunchPrefix) {
		return true
	}

	return false
}

// SetLaunchPrefix gets a reference to the given string and assigns it to the LaunchPrefix field.
func (o *AddVDIAppsRequestVdiAppOneOf) SetLaunchPrefix(v string) {
	o.LaunchPrefix = &v
}

func (o AddVDIAppsRequestVdiAppOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddVDIAppsRequestVdiAppOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IconPath) {
		toSerialize["iconPath"] = o.IconPath
	}
	if !IsNil(o.LaunchPrefix) {
		toSerialize["launchPrefix"] = o.LaunchPrefix
	}
	return toSerialize, nil
}

func (o *AddVDIAppsRequestVdiAppOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddVDIAppsRequestVdiAppOneOf := _AddVDIAppsRequestVdiAppOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddVDIAppsRequestVdiAppOneOf)

	if err != nil {
		return err
	}

	*o = AddVDIAppsRequestVdiAppOneOf(varAddVDIAppsRequestVdiAppOneOf)

	return err
}

type NullableAddVDIAppsRequestVdiAppOneOf struct {
	value *AddVDIAppsRequestVdiAppOneOf
	isSet bool
}

func (v NullableAddVDIAppsRequestVdiAppOneOf) Get() *AddVDIAppsRequestVdiAppOneOf {
	return v.value
}

func (v *NullableAddVDIAppsRequestVdiAppOneOf) Set(val *AddVDIAppsRequestVdiAppOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAddVDIAppsRequestVdiAppOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAddVDIAppsRequestVdiAppOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddVDIAppsRequestVdiAppOneOf(val *AddVDIAppsRequestVdiAppOneOf) *NullableAddVDIAppsRequestVdiAppOneOf {
	return &NullableAddVDIAppsRequestVdiAppOneOf{value: val, isSet: true}
}

func (v NullableAddVDIAppsRequestVdiAppOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddVDIAppsRequestVdiAppOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


