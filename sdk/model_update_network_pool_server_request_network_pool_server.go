/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UpdateNetworkPoolServerRequestNetworkPoolServer - Payload for creating a new Network Pool Server
type UpdateNetworkPoolServerRequestNetworkPoolServer struct {
	BluecatNetworkPoolServerUpdate *BluecatNetworkPoolServerUpdate
	InfobloxNetworkPoolServerUpdate *InfobloxNetworkPoolServerUpdate
	PhpIPAMNetworkPoolServerUpdate *PhpIPAMNetworkPoolServerUpdate
	SolarWindsNetworkPoolServerUpdate *SolarWindsNetworkPoolServerUpdate
}

// BluecatNetworkPoolServerUpdateAsUpdateNetworkPoolServerRequestNetworkPoolServer is a convenience function that returns BluecatNetworkPoolServerUpdate wrapped in UpdateNetworkPoolServerRequestNetworkPoolServer
func BluecatNetworkPoolServerUpdateAsUpdateNetworkPoolServerRequestNetworkPoolServer(v *BluecatNetworkPoolServerUpdate) UpdateNetworkPoolServerRequestNetworkPoolServer {
	return UpdateNetworkPoolServerRequestNetworkPoolServer{
		BluecatNetworkPoolServerUpdate: v,
	}
}

// InfobloxNetworkPoolServerUpdateAsUpdateNetworkPoolServerRequestNetworkPoolServer is a convenience function that returns InfobloxNetworkPoolServerUpdate wrapped in UpdateNetworkPoolServerRequestNetworkPoolServer
func InfobloxNetworkPoolServerUpdateAsUpdateNetworkPoolServerRequestNetworkPoolServer(v *InfobloxNetworkPoolServerUpdate) UpdateNetworkPoolServerRequestNetworkPoolServer {
	return UpdateNetworkPoolServerRequestNetworkPoolServer{
		InfobloxNetworkPoolServerUpdate: v,
	}
}

// PhpIPAMNetworkPoolServerUpdateAsUpdateNetworkPoolServerRequestNetworkPoolServer is a convenience function that returns PhpIPAMNetworkPoolServerUpdate wrapped in UpdateNetworkPoolServerRequestNetworkPoolServer
func PhpIPAMNetworkPoolServerUpdateAsUpdateNetworkPoolServerRequestNetworkPoolServer(v *PhpIPAMNetworkPoolServerUpdate) UpdateNetworkPoolServerRequestNetworkPoolServer {
	return UpdateNetworkPoolServerRequestNetworkPoolServer{
		PhpIPAMNetworkPoolServerUpdate: v,
	}
}

// SolarWindsNetworkPoolServerUpdateAsUpdateNetworkPoolServerRequestNetworkPoolServer is a convenience function that returns SolarWindsNetworkPoolServerUpdate wrapped in UpdateNetworkPoolServerRequestNetworkPoolServer
func SolarWindsNetworkPoolServerUpdateAsUpdateNetworkPoolServerRequestNetworkPoolServer(v *SolarWindsNetworkPoolServerUpdate) UpdateNetworkPoolServerRequestNetworkPoolServer {
	return UpdateNetworkPoolServerRequestNetworkPoolServer{
		SolarWindsNetworkPoolServerUpdate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateNetworkPoolServerRequestNetworkPoolServer) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BluecatNetworkPoolServerUpdate
	err = newStrictDecoder(data).Decode(&dst.BluecatNetworkPoolServerUpdate)
	if err == nil {
		jsonBluecatNetworkPoolServerUpdate, _ := json.Marshal(dst.BluecatNetworkPoolServerUpdate)
		if string(jsonBluecatNetworkPoolServerUpdate) == "{}" { // empty struct
			dst.BluecatNetworkPoolServerUpdate = nil
		} else {
			if err = validator.Validate(dst.BluecatNetworkPoolServerUpdate); err != nil {
				dst.BluecatNetworkPoolServerUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.BluecatNetworkPoolServerUpdate = nil
	}

	// try to unmarshal data into InfobloxNetworkPoolServerUpdate
	err = newStrictDecoder(data).Decode(&dst.InfobloxNetworkPoolServerUpdate)
	if err == nil {
		jsonInfobloxNetworkPoolServerUpdate, _ := json.Marshal(dst.InfobloxNetworkPoolServerUpdate)
		if string(jsonInfobloxNetworkPoolServerUpdate) == "{}" { // empty struct
			dst.InfobloxNetworkPoolServerUpdate = nil
		} else {
			if err = validator.Validate(dst.InfobloxNetworkPoolServerUpdate); err != nil {
				dst.InfobloxNetworkPoolServerUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.InfobloxNetworkPoolServerUpdate = nil
	}

	// try to unmarshal data into PhpIPAMNetworkPoolServerUpdate
	err = newStrictDecoder(data).Decode(&dst.PhpIPAMNetworkPoolServerUpdate)
	if err == nil {
		jsonPhpIPAMNetworkPoolServerUpdate, _ := json.Marshal(dst.PhpIPAMNetworkPoolServerUpdate)
		if string(jsonPhpIPAMNetworkPoolServerUpdate) == "{}" { // empty struct
			dst.PhpIPAMNetworkPoolServerUpdate = nil
		} else {
			if err = validator.Validate(dst.PhpIPAMNetworkPoolServerUpdate); err != nil {
				dst.PhpIPAMNetworkPoolServerUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.PhpIPAMNetworkPoolServerUpdate = nil
	}

	// try to unmarshal data into SolarWindsNetworkPoolServerUpdate
	err = newStrictDecoder(data).Decode(&dst.SolarWindsNetworkPoolServerUpdate)
	if err == nil {
		jsonSolarWindsNetworkPoolServerUpdate, _ := json.Marshal(dst.SolarWindsNetworkPoolServerUpdate)
		if string(jsonSolarWindsNetworkPoolServerUpdate) == "{}" { // empty struct
			dst.SolarWindsNetworkPoolServerUpdate = nil
		} else {
			if err = validator.Validate(dst.SolarWindsNetworkPoolServerUpdate); err != nil {
				dst.SolarWindsNetworkPoolServerUpdate = nil
			} else {
				match++
			}
		}
	} else {
		dst.SolarWindsNetworkPoolServerUpdate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BluecatNetworkPoolServerUpdate = nil
		dst.InfobloxNetworkPoolServerUpdate = nil
		dst.PhpIPAMNetworkPoolServerUpdate = nil
		dst.SolarWindsNetworkPoolServerUpdate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateNetworkPoolServerRequestNetworkPoolServer)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateNetworkPoolServerRequestNetworkPoolServer)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateNetworkPoolServerRequestNetworkPoolServer) MarshalJSON() ([]byte, error) {
	if src.BluecatNetworkPoolServerUpdate != nil {
		return json.Marshal(&src.BluecatNetworkPoolServerUpdate)
	}

	if src.InfobloxNetworkPoolServerUpdate != nil {
		return json.Marshal(&src.InfobloxNetworkPoolServerUpdate)
	}

	if src.PhpIPAMNetworkPoolServerUpdate != nil {
		return json.Marshal(&src.PhpIPAMNetworkPoolServerUpdate)
	}

	if src.SolarWindsNetworkPoolServerUpdate != nil {
		return json.Marshal(&src.SolarWindsNetworkPoolServerUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateNetworkPoolServerRequestNetworkPoolServer) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BluecatNetworkPoolServerUpdate != nil {
		return obj.BluecatNetworkPoolServerUpdate
	}

	if obj.InfobloxNetworkPoolServerUpdate != nil {
		return obj.InfobloxNetworkPoolServerUpdate
	}

	if obj.PhpIPAMNetworkPoolServerUpdate != nil {
		return obj.PhpIPAMNetworkPoolServerUpdate
	}

	if obj.SolarWindsNetworkPoolServerUpdate != nil {
		return obj.SolarWindsNetworkPoolServerUpdate
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateNetworkPoolServerRequestNetworkPoolServer) GetActualInstanceValue() (interface{}) {
	if obj.BluecatNetworkPoolServerUpdate != nil {
		return *obj.BluecatNetworkPoolServerUpdate
	}

	if obj.InfobloxNetworkPoolServerUpdate != nil {
		return *obj.InfobloxNetworkPoolServerUpdate
	}

	if obj.PhpIPAMNetworkPoolServerUpdate != nil {
		return *obj.PhpIPAMNetworkPoolServerUpdate
	}

	if obj.SolarWindsNetworkPoolServerUpdate != nil {
		return *obj.SolarWindsNetworkPoolServerUpdate
	}

	// all schemas are nil
	return nil
}

type NullableUpdateNetworkPoolServerRequestNetworkPoolServer struct {
	value *UpdateNetworkPoolServerRequestNetworkPoolServer
	isSet bool
}

func (v NullableUpdateNetworkPoolServerRequestNetworkPoolServer) Get() *UpdateNetworkPoolServerRequestNetworkPoolServer {
	return v.value
}

func (v *NullableUpdateNetworkPoolServerRequestNetworkPoolServer) Set(val *UpdateNetworkPoolServerRequestNetworkPoolServer) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNetworkPoolServerRequestNetworkPoolServer) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNetworkPoolServerRequestNetworkPoolServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNetworkPoolServerRequestNetworkPoolServer(val *UpdateNetworkPoolServerRequestNetworkPoolServer) *NullableUpdateNetworkPoolServerRequestNetworkPoolServer {
	return &NullableUpdateNetworkPoolServerRequestNetworkPoolServer{value: val, isSet: true}
}

func (v NullableUpdateNetworkPoolServerRequestNetworkPoolServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNetworkPoolServerRequestNetworkPoolServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


