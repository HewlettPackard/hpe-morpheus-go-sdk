/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UserSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSettings{}

// UserSettings struct for UserSettings
type UserSettings struct {
	User *ListUserSettings200ResponseAllOfUser `json:"user,omitempty"`
	AccessTokens []ListUserSettings200ResponseAllOfAccessTokensInner `json:"accessTokens,omitempty"`
}

// NewUserSettings instantiates a new UserSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettings() *UserSettings {
	this := UserSettings{}
	return &this
}

// NewUserSettingsWithDefaults instantiates a new UserSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsWithDefaults() *UserSettings {
	this := UserSettings{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *UserSettings) GetUser() ListUserSettings200ResponseAllOfUser {
	if o == nil || IsNil(o.User) {
		var ret ListUserSettings200ResponseAllOfUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetUserOk() (*ListUserSettings200ResponseAllOfUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// IsSetUser returns a boolean if a field has been set.
func (o *UserSettings) IsSetUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given ListUserSettings200ResponseAllOfUser and assigns it to the User field.
func (o *UserSettings) SetUser(v ListUserSettings200ResponseAllOfUser) {
	o.User = &v
}

// GetAccessTokens returns the AccessTokens field value if set, zero value otherwise.
func (o *UserSettings) GetAccessTokens() []ListUserSettings200ResponseAllOfAccessTokensInner {
	if o == nil || IsNil(o.AccessTokens) {
		var ret []ListUserSettings200ResponseAllOfAccessTokensInner
		return ret
	}
	return o.AccessTokens
}

// GetAccessTokensOk returns a tuple with the AccessTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettings) GetAccessTokensOk() ([]ListUserSettings200ResponseAllOfAccessTokensInner, bool) {
	if o == nil || IsNil(o.AccessTokens) {
		return nil, false
	}
	return o.AccessTokens, true
}

// IsSetAccessTokens returns a boolean if a field has been set.
func (o *UserSettings) IsSetAccessTokens() bool {
	if o != nil && !IsNil(o.AccessTokens) {
		return true
	}

	return false
}

// SetAccessTokens gets a reference to the given []ListUserSettings200ResponseAllOfAccessTokensInner and assigns it to the AccessTokens field.
func (o *UserSettings) SetAccessTokens(v []ListUserSettings200ResponseAllOfAccessTokensInner) {
	o.AccessTokens = v
}

func (o UserSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.AccessTokens) {
		toSerialize["accessTokens"] = o.AccessTokens
	}
	return toSerialize, nil
}

type NullableUserSettings struct {
	value *UserSettings
	isSet bool
}

func (v NullableUserSettings) Get() *UserSettings {
	return v.value
}

func (v *NullableUserSettings) Set(val *UserSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettings(val *UserSettings) *NullableUserSettings {
	return &NullableUserSettings{value: val, isSet: true}
}

func (v NullableUserSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


