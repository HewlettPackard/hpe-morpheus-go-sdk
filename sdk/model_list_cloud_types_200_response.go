/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ListCloudTypes200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListCloudTypes200Response{}

// ListCloudTypes200Response struct for ListCloudTypes200Response
type ListCloudTypes200Response struct {
	ZoneTypes            []ListCloudTypes200ResponseAllOfZoneTypesInner `json:"zoneTypes,omitempty"`
	Meta                 *ListActivity200ResponseAllOfMeta              `json:"meta,omitempty"`
	AdditionalProperties map[string]interface{}                         `json:",remain"`
}

type _ListCloudTypes200Response ListCloudTypes200Response

// NewListCloudTypes200Response instantiates a new ListCloudTypes200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListCloudTypes200Response() *ListCloudTypes200Response {
	this := ListCloudTypes200Response{}
	return &this
}

// NewListCloudTypes200ResponseWithDefaults instantiates a new ListCloudTypes200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListCloudTypes200ResponseWithDefaults() *ListCloudTypes200Response {
	this := ListCloudTypes200Response{}
	return &this
}

// GetZoneTypes returns the ZoneTypes field value if set, zero value otherwise.
func (o *ListCloudTypes200Response) GetZoneTypes() []ListCloudTypes200ResponseAllOfZoneTypesInner {
	if o == nil || IsNil(o.ZoneTypes) {
		var ret []ListCloudTypes200ResponseAllOfZoneTypesInner
		return ret
	}
	return o.ZoneTypes
}

// GetZoneTypesOk returns a tuple with the ZoneTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCloudTypes200Response) GetZoneTypesOk() ([]ListCloudTypes200ResponseAllOfZoneTypesInner, bool) {
	if o == nil || IsNil(o.ZoneTypes) {
		return nil, false
	}
	return o.ZoneTypes, true
}

// IsSetZoneTypes returns a boolean if a field has been set.
func (o *ListCloudTypes200Response) IsSetZoneTypes() bool {
	if o != nil && !IsNil(o.ZoneTypes) {
		return true
	}

	return false
}

// SetZoneTypes gets a reference to the given []ListCloudTypes200ResponseAllOfZoneTypesInner and assigns it to the ZoneTypes field.
func (o *ListCloudTypes200Response) SetZoneTypes(v []ListCloudTypes200ResponseAllOfZoneTypesInner) {
	o.ZoneTypes = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ListCloudTypes200Response) GetMeta() ListActivity200ResponseAllOfMeta {
	if o == nil || IsNil(o.Meta) {
		var ret ListActivity200ResponseAllOfMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListCloudTypes200Response) GetMetaOk() (*ListActivity200ResponseAllOfMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// IsSetMeta returns a boolean if a field has been set.
func (o *ListCloudTypes200Response) IsSetMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ListActivity200ResponseAllOfMeta and assigns it to the Meta field.
func (o *ListCloudTypes200Response) SetMeta(v ListActivity200ResponseAllOfMeta) {
	o.Meta = &v
}

func (o ListCloudTypes200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListCloudTypes200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ZoneTypes) {
		toSerialize["zoneTypes"] = o.ZoneTypes
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *ListCloudTypes200Response) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
