/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the PolicyCloudCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyCloudCreate{}

// PolicyCloudCreate struct for PolicyCloudCreate
type PolicyCloudCreate struct {
	// A name for the policy
	Name string `json:"name"`
	// A description for the policy
	Description          *string                                 `json:"description,omitempty"`
	PolicyType           AddPoliciesCloudRequestPolicyPolicyType `json:"policyType"`
	AdditionalProperties map[string]interface{}                  `json:",remain"`
}

type _PolicyCloudCreate PolicyCloudCreate

// NewPolicyCloudCreate instantiates a new PolicyCloudCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyCloudCreate(name string, policyType AddPoliciesCloudRequestPolicyPolicyType) *PolicyCloudCreate {
	this := PolicyCloudCreate{}
	this.Name = name
	this.PolicyType = policyType
	return &this
}

// NewPolicyCloudCreateWithDefaults instantiates a new PolicyCloudCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyCloudCreateWithDefaults() *PolicyCloudCreate {
	this := PolicyCloudCreate{}
	return &this
}

// GetName returns the Name field value
func (o *PolicyCloudCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PolicyCloudCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PolicyCloudCreate) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PolicyCloudCreate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyCloudCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *PolicyCloudCreate) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PolicyCloudCreate) SetDescription(v string) {
	o.Description = &v
}

// GetPolicyType returns the PolicyType field value
func (o *PolicyCloudCreate) GetPolicyType() AddPoliciesCloudRequestPolicyPolicyType {
	if o == nil {
		var ret AddPoliciesCloudRequestPolicyPolicyType
		return ret
	}

	return o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value
// and a boolean to check if the value has been set.
func (o *PolicyCloudCreate) GetPolicyTypeOk() (*AddPoliciesCloudRequestPolicyPolicyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyType, true
}

// SetPolicyType sets field value
func (o *PolicyCloudCreate) SetPolicyType(v AddPoliciesCloudRequestPolicyPolicyType) {
	o.PolicyType = v
}

func (o PolicyCloudCreate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyCloudCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["policyType"] = o.PolicyType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *PolicyCloudCreate) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
