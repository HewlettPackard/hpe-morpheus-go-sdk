/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SaveClusterDatastoreRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaveClusterDatastoreRequest{}

// SaveClusterDatastoreRequest struct for SaveClusterDatastoreRequest
type SaveClusterDatastoreRequest struct {
	Datastore *SaveClusterDatastoreRequestDatastore `json:"datastore,omitempty"`
}

// NewSaveClusterDatastoreRequest instantiates a new SaveClusterDatastoreRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaveClusterDatastoreRequest() *SaveClusterDatastoreRequest {
	this := SaveClusterDatastoreRequest{}
	return &this
}

// NewSaveClusterDatastoreRequestWithDefaults instantiates a new SaveClusterDatastoreRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaveClusterDatastoreRequestWithDefaults() *SaveClusterDatastoreRequest {
	this := SaveClusterDatastoreRequest{}
	return &this
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *SaveClusterDatastoreRequest) GetDatastore() SaveClusterDatastoreRequestDatastore {
	if o == nil || IsNil(o.Datastore) {
		var ret SaveClusterDatastoreRequestDatastore
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaveClusterDatastoreRequest) GetDatastoreOk() (*SaveClusterDatastoreRequestDatastore, bool) {
	if o == nil || IsNil(o.Datastore) {
		return nil, false
	}
	return o.Datastore, true
}

// IsSetDatastore returns a boolean if a field has been set.
func (o *SaveClusterDatastoreRequest) IsSetDatastore() bool {
	if o != nil && !IsNil(o.Datastore) {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given SaveClusterDatastoreRequestDatastore and assigns it to the Datastore field.
func (o *SaveClusterDatastoreRequest) SetDatastore(v SaveClusterDatastoreRequestDatastore) {
	o.Datastore = &v
}

func (o SaveClusterDatastoreRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaveClusterDatastoreRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datastore) {
		toSerialize["datastore"] = o.Datastore
	}
	return toSerialize, nil
}

type NullableSaveClusterDatastoreRequest struct {
	value *SaveClusterDatastoreRequest
	isSet bool
}

func (v NullableSaveClusterDatastoreRequest) Get() *SaveClusterDatastoreRequest {
	return v.value
}

func (v *NullableSaveClusterDatastoreRequest) Set(val *SaveClusterDatastoreRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSaveClusterDatastoreRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSaveClusterDatastoreRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaveClusterDatastoreRequest(val *SaveClusterDatastoreRequest) *NullableSaveClusterDatastoreRequest {
	return &NullableSaveClusterDatastoreRequest{value: val, isSet: true}
}

func (v NullableSaveClusterDatastoreRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaveClusterDatastoreRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


