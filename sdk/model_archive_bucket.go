/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
)

// checks if the ArchiveBucket type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchiveBucket{}

// ArchiveBucket struct for ArchiveBucket
type ArchiveBucket struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	StorageProvider *ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner `json:"storageProvider,omitempty"`
	Owner *ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner `json:"owner,omitempty"`
	CreatedBy *ListArchiveBuckets200ResponseAllOfArchiveBucketsInnerCreatedBy `json:"createdBy,omitempty"`
	IsPublic *bool `json:"isPublic,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Code *string `json:"code,omitempty"`
	FilePath *string `json:"filePath,omitempty"`
	RawSize *int64 `json:"rawSize,omitempty"`
	FileCount *int64 `json:"fileCount,omitempty"`
	Accounts []map[string]interface{} `json:"accounts,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
}

// NewArchiveBucket instantiates a new ArchiveBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchiveBucket() *ArchiveBucket {
	this := ArchiveBucket{}
	return &this
}

// NewArchiveBucketWithDefaults instantiates a new ArchiveBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchiveBucketWithDefaults() *ArchiveBucket {
	this := ArchiveBucket{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArchiveBucket) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ArchiveBucket) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ArchiveBucket) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ArchiveBucket) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ArchiveBucket) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ArchiveBucket) SetDescription(v string) {
	o.Description = &v
}

// GetStorageProvider returns the StorageProvider field value if set, zero value otherwise.
func (o *ArchiveBucket) GetStorageProvider() ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner {
	if o == nil || IsNil(o.StorageProvider) {
		var ret ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner
		return ret
	}
	return *o.StorageProvider
}

// GetStorageProviderOk returns a tuple with the StorageProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetStorageProviderOk() (*ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner, bool) {
	if o == nil || IsNil(o.StorageProvider) {
		return nil, false
	}
	return o.StorageProvider, true
}

// IsSetStorageProvider returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetStorageProvider() bool {
	if o != nil && !IsNil(o.StorageProvider) {
		return true
	}

	return false
}

// SetStorageProvider gets a reference to the given ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner and assigns it to the StorageProvider field.
func (o *ArchiveBucket) SetStorageProvider(v ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner) {
	o.StorageProvider = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *ArchiveBucket) GetOwner() ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner {
	if o == nil || IsNil(o.Owner) {
		var ret ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetOwnerOk() (*ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// IsSetOwner returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner and assigns it to the Owner field.
func (o *ArchiveBucket) SetOwner(v ListApplianceSettings200ResponseApplianceSettingsEnabledZoneTypesInner) {
	o.Owner = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *ArchiveBucket) GetCreatedBy() ListArchiveBuckets200ResponseAllOfArchiveBucketsInnerCreatedBy {
	if o == nil || IsNil(o.CreatedBy) {
		var ret ListArchiveBuckets200ResponseAllOfArchiveBucketsInnerCreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetCreatedByOk() (*ListArchiveBuckets200ResponseAllOfArchiveBucketsInnerCreatedBy, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// IsSetCreatedBy returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given ListArchiveBuckets200ResponseAllOfArchiveBucketsInnerCreatedBy and assigns it to the CreatedBy field.
func (o *ArchiveBucket) SetCreatedBy(v ListArchiveBuckets200ResponseAllOfArchiveBucketsInnerCreatedBy) {
	o.CreatedBy = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *ArchiveBucket) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// IsSetIsPublic returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *ArchiveBucket) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *ArchiveBucket) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// IsSetVisibility returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *ArchiveBucket) SetVisibility(v string) {
	o.Visibility = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ArchiveBucket) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// IsSetCode returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ArchiveBucket) SetCode(v string) {
	o.Code = &v
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *ArchiveBucket) GetFilePath() string {
	if o == nil || IsNil(o.FilePath) {
		var ret string
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.FilePath) {
		return nil, false
	}
	return o.FilePath, true
}

// IsSetFilePath returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetFilePath() bool {
	if o != nil && !IsNil(o.FilePath) {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given string and assigns it to the FilePath field.
func (o *ArchiveBucket) SetFilePath(v string) {
	o.FilePath = &v
}

// GetRawSize returns the RawSize field value if set, zero value otherwise.
func (o *ArchiveBucket) GetRawSize() int64 {
	if o == nil || IsNil(o.RawSize) {
		var ret int64
		return ret
	}
	return *o.RawSize
}

// GetRawSizeOk returns a tuple with the RawSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetRawSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.RawSize) {
		return nil, false
	}
	return o.RawSize, true
}

// IsSetRawSize returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetRawSize() bool {
	if o != nil && !IsNil(o.RawSize) {
		return true
	}

	return false
}

// SetRawSize gets a reference to the given int64 and assigns it to the RawSize field.
func (o *ArchiveBucket) SetRawSize(v int64) {
	o.RawSize = &v
}

// GetFileCount returns the FileCount field value if set, zero value otherwise.
func (o *ArchiveBucket) GetFileCount() int64 {
	if o == nil || IsNil(o.FileCount) {
		var ret int64
		return ret
	}
	return *o.FileCount
}

// GetFileCountOk returns a tuple with the FileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetFileCountOk() (*int64, bool) {
	if o == nil || IsNil(o.FileCount) {
		return nil, false
	}
	return o.FileCount, true
}

// IsSetFileCount returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetFileCount() bool {
	if o != nil && !IsNil(o.FileCount) {
		return true
	}

	return false
}

// SetFileCount gets a reference to the given int64 and assigns it to the FileCount field.
func (o *ArchiveBucket) SetFileCount(v int64) {
	o.FileCount = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *ArchiveBucket) GetAccounts() []map[string]interface{} {
	if o == nil || IsNil(o.Accounts) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetAccountsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// IsSetAccounts returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []map[string]interface{} and assigns it to the Accounts field.
func (o *ArchiveBucket) SetAccounts(v []map[string]interface{}) {
	o.Accounts = v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *ArchiveBucket) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// IsSetDateCreated returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *ArchiveBucket) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *ArchiveBucket) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveBucket) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// IsSetLastUpdated returns a boolean if a field has been set.
func (o *ArchiveBucket) IsSetLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *ArchiveBucket) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

func (o ArchiveBucket) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchiveBucket) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.StorageProvider) {
		toSerialize["storageProvider"] = o.StorageProvider
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.IsPublic) {
		toSerialize["isPublic"] = o.IsPublic
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.FilePath) {
		toSerialize["filePath"] = o.FilePath
	}
	if !IsNil(o.RawSize) {
		toSerialize["rawSize"] = o.RawSize
	}
	if !IsNil(o.FileCount) {
		toSerialize["fileCount"] = o.FileCount
	}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	return toSerialize, nil
}

type NullableArchiveBucket struct {
	value *ArchiveBucket
	isSet bool
}

func (v NullableArchiveBucket) Get() *ArchiveBucket {
	return v.value
}

func (v *NullableArchiveBucket) Set(val *ArchiveBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableArchiveBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableArchiveBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchiveBucket(val *ArchiveBucket) *NullableArchiveBucket {
	return &NullableArchiveBucket{value: val, isSet: true}
}

func (v NullableArchiveBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchiveBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


