/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddCertificate200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddCertificate200Response{}

// AddCertificate200Response struct for AddCertificate200Response
type AddCertificate200Response struct {
	Certificate *ListCertificates200ResponseCertificatesInner `json:"certificate,omitempty"`
	Success *bool `json:"success,omitempty"`
}

// NewAddCertificate200Response instantiates a new AddCertificate200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCertificate200Response() *AddCertificate200Response {
	this := AddCertificate200Response{}
	return &this
}

// NewAddCertificate200ResponseWithDefaults instantiates a new AddCertificate200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCertificate200ResponseWithDefaults() *AddCertificate200Response {
	this := AddCertificate200Response{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *AddCertificate200Response) GetCertificate() ListCertificates200ResponseCertificatesInner {
	if o == nil || IsNil(o.Certificate) {
		var ret ListCertificates200ResponseCertificatesInner
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificate200Response) GetCertificateOk() (*ListCertificates200ResponseCertificatesInner, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// IsSetCertificate returns a boolean if a field has been set.
func (o *AddCertificate200Response) IsSetCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given ListCertificates200ResponseCertificatesInner and assigns it to the Certificate field.
func (o *AddCertificate200Response) SetCertificate(v ListCertificates200ResponseCertificatesInner) {
	o.Certificate = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *AddCertificate200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificate200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// IsSetSuccess returns a boolean if a field has been set.
func (o *AddCertificate200Response) IsSetSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *AddCertificate200Response) SetSuccess(v bool) {
	o.Success = &v
}

func (o AddCertificate200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddCertificate200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	return toSerialize, nil
}

type NullableAddCertificate200Response struct {
	value *AddCertificate200Response
	isSet bool
}

func (v NullableAddCertificate200Response) Get() *AddCertificate200Response {
	return v.value
}

func (v *NullableAddCertificate200Response) Set(val *AddCertificate200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCertificate200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCertificate200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCertificate200Response(val *AddCertificate200Response) *NullableAddCertificate200Response {
	return &NullableAddCertificate200Response{value: val, isSet: true}
}

func (v NullableAddCertificate200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCertificate200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


