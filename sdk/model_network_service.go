/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the NetworkService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkService{}

// NetworkService struct for NetworkService
type NetworkService struct {
	ServiceType *string `json:"serviceType,omitempty"`
	ServiceTypeName *string `json:"serviceTypeName,omitempty"`
	Type *string `json:"type,omitempty"`
	TypeName *string `json:"typeName,omitempty"`
	Name *string `json:"name,omitempty"`
	Id *int64 `json:"id,omitempty"`
	IntegrationId *int64 `json:"integrationId,omitempty"`
}

// NewNetworkService instantiates a new NetworkService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkService() *NetworkService {
	this := NetworkService{}
	return &this
}

// NewNetworkServiceWithDefaults instantiates a new NetworkService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkServiceWithDefaults() *NetworkService {
	this := NetworkService{}
	return &this
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *NetworkService) GetServiceType() string {
	if o == nil || IsNil(o.ServiceType) {
		var ret string
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkService) GetServiceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceType) {
		return nil, false
	}
	return o.ServiceType, true
}

// IsSetServiceType returns a boolean if a field has been set.
func (o *NetworkService) IsSetServiceType() bool {
	if o != nil && !IsNil(o.ServiceType) {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given string and assigns it to the ServiceType field.
func (o *NetworkService) SetServiceType(v string) {
	o.ServiceType = &v
}

// GetServiceTypeName returns the ServiceTypeName field value if set, zero value otherwise.
func (o *NetworkService) GetServiceTypeName() string {
	if o == nil || IsNil(o.ServiceTypeName) {
		var ret string
		return ret
	}
	return *o.ServiceTypeName
}

// GetServiceTypeNameOk returns a tuple with the ServiceTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkService) GetServiceTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceTypeName) {
		return nil, false
	}
	return o.ServiceTypeName, true
}

// IsSetServiceTypeName returns a boolean if a field has been set.
func (o *NetworkService) IsSetServiceTypeName() bool {
	if o != nil && !IsNil(o.ServiceTypeName) {
		return true
	}

	return false
}

// SetServiceTypeName gets a reference to the given string and assigns it to the ServiceTypeName field.
func (o *NetworkService) SetServiceTypeName(v string) {
	o.ServiceTypeName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkService) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkService) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// IsSetType returns a boolean if a field has been set.
func (o *NetworkService) IsSetType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NetworkService) SetType(v string) {
	o.Type = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *NetworkService) GetTypeName() string {
	if o == nil || IsNil(o.TypeName) {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkService) GetTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.TypeName) {
		return nil, false
	}
	return o.TypeName, true
}

// IsSetTypeName returns a boolean if a field has been set.
func (o *NetworkService) IsSetTypeName() bool {
	if o != nil && !IsNil(o.TypeName) {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *NetworkService) SetTypeName(v string) {
	o.TypeName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkService) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkService) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *NetworkService) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkService) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NetworkService) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkService) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *NetworkService) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *NetworkService) SetId(v int64) {
	o.Id = &v
}

// GetIntegrationId returns the IntegrationId field value if set, zero value otherwise.
func (o *NetworkService) GetIntegrationId() int64 {
	if o == nil || IsNil(o.IntegrationId) {
		var ret int64
		return ret
	}
	return *o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkService) GetIntegrationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.IntegrationId) {
		return nil, false
	}
	return o.IntegrationId, true
}

// IsSetIntegrationId returns a boolean if a field has been set.
func (o *NetworkService) IsSetIntegrationId() bool {
	if o != nil && !IsNil(o.IntegrationId) {
		return true
	}

	return false
}

// SetIntegrationId gets a reference to the given int64 and assigns it to the IntegrationId field.
func (o *NetworkService) SetIntegrationId(v int64) {
	o.IntegrationId = &v
}

func (o NetworkService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServiceType) {
		toSerialize["serviceType"] = o.ServiceType
	}
	if !IsNil(o.ServiceTypeName) {
		toSerialize["serviceTypeName"] = o.ServiceTypeName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TypeName) {
		toSerialize["typeName"] = o.TypeName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IntegrationId) {
		toSerialize["integrationId"] = o.IntegrationId
	}
	return toSerialize, nil
}

type NullableNetworkService struct {
	value *NetworkService
	isSet bool
}

func (v NullableNetworkService) Get() *NetworkService {
	return v.value
}

func (v *NullableNetworkService) Set(val *NetworkService) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkService) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkService(val *NetworkService) *NullableNetworkService {
	return &NullableNetworkService{value: val, isSet: true}
}

func (v NullableNetworkService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


