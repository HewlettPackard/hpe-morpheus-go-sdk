/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// UpdateRolePermissionRequest - struct for UpdateRolePermissionRequest
type UpdateRolePermissionRequest struct {
	DefaultBlueprintPermission *DefaultBlueprintPermission
	DefaultCatalogItemTypePermission *DefaultCatalogItemTypePermission
	DefaultCloudPermission *DefaultCloudPermission
	DefaultGroupPermission *DefaultGroupPermission
	DefaultInstanceTypePermission *DefaultInstanceTypePermission
	DefaultPersonaPermission *DefaultPersonaPermission
	DefaultReportTypePermission *DefaultReportTypePermission
	DefaultTaskPermission *DefaultTaskPermission
	DefaultVDIPoolPermission *DefaultVDIPoolPermission
	DefaultWorkflowPermission *DefaultWorkflowPermission
	FeaturePermission *FeaturePermission
}

// DefaultBlueprintPermissionAsUpdateRolePermissionRequest is a convenience function that returns DefaultBlueprintPermission wrapped in UpdateRolePermissionRequest
func DefaultBlueprintPermissionAsUpdateRolePermissionRequest(v *DefaultBlueprintPermission) UpdateRolePermissionRequest {
	return UpdateRolePermissionRequest{
		DefaultBlueprintPermission: v,
	}
}

// DefaultCatalogItemTypePermissionAsUpdateRolePermissionRequest is a convenience function that returns DefaultCatalogItemTypePermission wrapped in UpdateRolePermissionRequest
func DefaultCatalogItemTypePermissionAsUpdateRolePermissionRequest(v *DefaultCatalogItemTypePermission) UpdateRolePermissionRequest {
	return UpdateRolePermissionRequest{
		DefaultCatalogItemTypePermission: v,
	}
}

// DefaultCloudPermissionAsUpdateRolePermissionRequest is a convenience function that returns DefaultCloudPermission wrapped in UpdateRolePermissionRequest
func DefaultCloudPermissionAsUpdateRolePermissionRequest(v *DefaultCloudPermission) UpdateRolePermissionRequest {
	return UpdateRolePermissionRequest{
		DefaultCloudPermission: v,
	}
}

// DefaultGroupPermissionAsUpdateRolePermissionRequest is a convenience function that returns DefaultGroupPermission wrapped in UpdateRolePermissionRequest
func DefaultGroupPermissionAsUpdateRolePermissionRequest(v *DefaultGroupPermission) UpdateRolePermissionRequest {
	return UpdateRolePermissionRequest{
		DefaultGroupPermission: v,
	}
}

// DefaultInstanceTypePermissionAsUpdateRolePermissionRequest is a convenience function that returns DefaultInstanceTypePermission wrapped in UpdateRolePermissionRequest
func DefaultInstanceTypePermissionAsUpdateRolePermissionRequest(v *DefaultInstanceTypePermission) UpdateRolePermissionRequest {
	return UpdateRolePermissionRequest{
		DefaultInstanceTypePermission: v,
	}
}

// DefaultPersonaPermissionAsUpdateRolePermissionRequest is a convenience function that returns DefaultPersonaPermission wrapped in UpdateRolePermissionRequest
func DefaultPersonaPermissionAsUpdateRolePermissionRequest(v *DefaultPersonaPermission) UpdateRolePermissionRequest {
	return UpdateRolePermissionRequest{
		DefaultPersonaPermission: v,
	}
}

// DefaultReportTypePermissionAsUpdateRolePermissionRequest is a convenience function that returns DefaultReportTypePermission wrapped in UpdateRolePermissionRequest
func DefaultReportTypePermissionAsUpdateRolePermissionRequest(v *DefaultReportTypePermission) UpdateRolePermissionRequest {
	return UpdateRolePermissionRequest{
		DefaultReportTypePermission: v,
	}
}

// DefaultTaskPermissionAsUpdateRolePermissionRequest is a convenience function that returns DefaultTaskPermission wrapped in UpdateRolePermissionRequest
func DefaultTaskPermissionAsUpdateRolePermissionRequest(v *DefaultTaskPermission) UpdateRolePermissionRequest {
	return UpdateRolePermissionRequest{
		DefaultTaskPermission: v,
	}
}

// DefaultVDIPoolPermissionAsUpdateRolePermissionRequest is a convenience function that returns DefaultVDIPoolPermission wrapped in UpdateRolePermissionRequest
func DefaultVDIPoolPermissionAsUpdateRolePermissionRequest(v *DefaultVDIPoolPermission) UpdateRolePermissionRequest {
	return UpdateRolePermissionRequest{
		DefaultVDIPoolPermission: v,
	}
}

// DefaultWorkflowPermissionAsUpdateRolePermissionRequest is a convenience function that returns DefaultWorkflowPermission wrapped in UpdateRolePermissionRequest
func DefaultWorkflowPermissionAsUpdateRolePermissionRequest(v *DefaultWorkflowPermission) UpdateRolePermissionRequest {
	return UpdateRolePermissionRequest{
		DefaultWorkflowPermission: v,
	}
}

// FeaturePermissionAsUpdateRolePermissionRequest is a convenience function that returns FeaturePermission wrapped in UpdateRolePermissionRequest
func FeaturePermissionAsUpdateRolePermissionRequest(v *FeaturePermission) UpdateRolePermissionRequest {
	return UpdateRolePermissionRequest{
		FeaturePermission: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateRolePermissionRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DefaultBlueprintPermission
	err = newStrictDecoder(data).Decode(&dst.DefaultBlueprintPermission)
	if err == nil {
		jsonDefaultBlueprintPermission, _ := json.Marshal(dst.DefaultBlueprintPermission)
		if string(jsonDefaultBlueprintPermission) == "{}" { // empty struct
			dst.DefaultBlueprintPermission = nil
		} else {
			if err = validator.Validate(dst.DefaultBlueprintPermission); err != nil {
				dst.DefaultBlueprintPermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultBlueprintPermission = nil
	}

	// try to unmarshal data into DefaultCatalogItemTypePermission
	err = newStrictDecoder(data).Decode(&dst.DefaultCatalogItemTypePermission)
	if err == nil {
		jsonDefaultCatalogItemTypePermission, _ := json.Marshal(dst.DefaultCatalogItemTypePermission)
		if string(jsonDefaultCatalogItemTypePermission) == "{}" { // empty struct
			dst.DefaultCatalogItemTypePermission = nil
		} else {
			if err = validator.Validate(dst.DefaultCatalogItemTypePermission); err != nil {
				dst.DefaultCatalogItemTypePermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultCatalogItemTypePermission = nil
	}

	// try to unmarshal data into DefaultCloudPermission
	err = newStrictDecoder(data).Decode(&dst.DefaultCloudPermission)
	if err == nil {
		jsonDefaultCloudPermission, _ := json.Marshal(dst.DefaultCloudPermission)
		if string(jsonDefaultCloudPermission) == "{}" { // empty struct
			dst.DefaultCloudPermission = nil
		} else {
			if err = validator.Validate(dst.DefaultCloudPermission); err != nil {
				dst.DefaultCloudPermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultCloudPermission = nil
	}

	// try to unmarshal data into DefaultGroupPermission
	err = newStrictDecoder(data).Decode(&dst.DefaultGroupPermission)
	if err == nil {
		jsonDefaultGroupPermission, _ := json.Marshal(dst.DefaultGroupPermission)
		if string(jsonDefaultGroupPermission) == "{}" { // empty struct
			dst.DefaultGroupPermission = nil
		} else {
			if err = validator.Validate(dst.DefaultGroupPermission); err != nil {
				dst.DefaultGroupPermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultGroupPermission = nil
	}

	// try to unmarshal data into DefaultInstanceTypePermission
	err = newStrictDecoder(data).Decode(&dst.DefaultInstanceTypePermission)
	if err == nil {
		jsonDefaultInstanceTypePermission, _ := json.Marshal(dst.DefaultInstanceTypePermission)
		if string(jsonDefaultInstanceTypePermission) == "{}" { // empty struct
			dst.DefaultInstanceTypePermission = nil
		} else {
			if err = validator.Validate(dst.DefaultInstanceTypePermission); err != nil {
				dst.DefaultInstanceTypePermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultInstanceTypePermission = nil
	}

	// try to unmarshal data into DefaultPersonaPermission
	err = newStrictDecoder(data).Decode(&dst.DefaultPersonaPermission)
	if err == nil {
		jsonDefaultPersonaPermission, _ := json.Marshal(dst.DefaultPersonaPermission)
		if string(jsonDefaultPersonaPermission) == "{}" { // empty struct
			dst.DefaultPersonaPermission = nil
		} else {
			if err = validator.Validate(dst.DefaultPersonaPermission); err != nil {
				dst.DefaultPersonaPermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultPersonaPermission = nil
	}

	// try to unmarshal data into DefaultReportTypePermission
	err = newStrictDecoder(data).Decode(&dst.DefaultReportTypePermission)
	if err == nil {
		jsonDefaultReportTypePermission, _ := json.Marshal(dst.DefaultReportTypePermission)
		if string(jsonDefaultReportTypePermission) == "{}" { // empty struct
			dst.DefaultReportTypePermission = nil
		} else {
			if err = validator.Validate(dst.DefaultReportTypePermission); err != nil {
				dst.DefaultReportTypePermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultReportTypePermission = nil
	}

	// try to unmarshal data into DefaultTaskPermission
	err = newStrictDecoder(data).Decode(&dst.DefaultTaskPermission)
	if err == nil {
		jsonDefaultTaskPermission, _ := json.Marshal(dst.DefaultTaskPermission)
		if string(jsonDefaultTaskPermission) == "{}" { // empty struct
			dst.DefaultTaskPermission = nil
		} else {
			if err = validator.Validate(dst.DefaultTaskPermission); err != nil {
				dst.DefaultTaskPermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultTaskPermission = nil
	}

	// try to unmarshal data into DefaultVDIPoolPermission
	err = newStrictDecoder(data).Decode(&dst.DefaultVDIPoolPermission)
	if err == nil {
		jsonDefaultVDIPoolPermission, _ := json.Marshal(dst.DefaultVDIPoolPermission)
		if string(jsonDefaultVDIPoolPermission) == "{}" { // empty struct
			dst.DefaultVDIPoolPermission = nil
		} else {
			if err = validator.Validate(dst.DefaultVDIPoolPermission); err != nil {
				dst.DefaultVDIPoolPermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultVDIPoolPermission = nil
	}

	// try to unmarshal data into DefaultWorkflowPermission
	err = newStrictDecoder(data).Decode(&dst.DefaultWorkflowPermission)
	if err == nil {
		jsonDefaultWorkflowPermission, _ := json.Marshal(dst.DefaultWorkflowPermission)
		if string(jsonDefaultWorkflowPermission) == "{}" { // empty struct
			dst.DefaultWorkflowPermission = nil
		} else {
			if err = validator.Validate(dst.DefaultWorkflowPermission); err != nil {
				dst.DefaultWorkflowPermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefaultWorkflowPermission = nil
	}

	// try to unmarshal data into FeaturePermission
	err = newStrictDecoder(data).Decode(&dst.FeaturePermission)
	if err == nil {
		jsonFeaturePermission, _ := json.Marshal(dst.FeaturePermission)
		if string(jsonFeaturePermission) == "{}" { // empty struct
			dst.FeaturePermission = nil
		} else {
			if err = validator.Validate(dst.FeaturePermission); err != nil {
				dst.FeaturePermission = nil
			} else {
				match++
			}
		}
	} else {
		dst.FeaturePermission = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DefaultBlueprintPermission = nil
		dst.DefaultCatalogItemTypePermission = nil
		dst.DefaultCloudPermission = nil
		dst.DefaultGroupPermission = nil
		dst.DefaultInstanceTypePermission = nil
		dst.DefaultPersonaPermission = nil
		dst.DefaultReportTypePermission = nil
		dst.DefaultTaskPermission = nil
		dst.DefaultVDIPoolPermission = nil
		dst.DefaultWorkflowPermission = nil
		dst.FeaturePermission = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UpdateRolePermissionRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UpdateRolePermissionRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateRolePermissionRequest) MarshalJSON() ([]byte, error) {
	if src.DefaultBlueprintPermission != nil {
		return json.Marshal(&src.DefaultBlueprintPermission)
	}

	if src.DefaultCatalogItemTypePermission != nil {
		return json.Marshal(&src.DefaultCatalogItemTypePermission)
	}

	if src.DefaultCloudPermission != nil {
		return json.Marshal(&src.DefaultCloudPermission)
	}

	if src.DefaultGroupPermission != nil {
		return json.Marshal(&src.DefaultGroupPermission)
	}

	if src.DefaultInstanceTypePermission != nil {
		return json.Marshal(&src.DefaultInstanceTypePermission)
	}

	if src.DefaultPersonaPermission != nil {
		return json.Marshal(&src.DefaultPersonaPermission)
	}

	if src.DefaultReportTypePermission != nil {
		return json.Marshal(&src.DefaultReportTypePermission)
	}

	if src.DefaultTaskPermission != nil {
		return json.Marshal(&src.DefaultTaskPermission)
	}

	if src.DefaultVDIPoolPermission != nil {
		return json.Marshal(&src.DefaultVDIPoolPermission)
	}

	if src.DefaultWorkflowPermission != nil {
		return json.Marshal(&src.DefaultWorkflowPermission)
	}

	if src.FeaturePermission != nil {
		return json.Marshal(&src.FeaturePermission)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateRolePermissionRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DefaultBlueprintPermission != nil {
		return obj.DefaultBlueprintPermission
	}

	if obj.DefaultCatalogItemTypePermission != nil {
		return obj.DefaultCatalogItemTypePermission
	}

	if obj.DefaultCloudPermission != nil {
		return obj.DefaultCloudPermission
	}

	if obj.DefaultGroupPermission != nil {
		return obj.DefaultGroupPermission
	}

	if obj.DefaultInstanceTypePermission != nil {
		return obj.DefaultInstanceTypePermission
	}

	if obj.DefaultPersonaPermission != nil {
		return obj.DefaultPersonaPermission
	}

	if obj.DefaultReportTypePermission != nil {
		return obj.DefaultReportTypePermission
	}

	if obj.DefaultTaskPermission != nil {
		return obj.DefaultTaskPermission
	}

	if obj.DefaultVDIPoolPermission != nil {
		return obj.DefaultVDIPoolPermission
	}

	if obj.DefaultWorkflowPermission != nil {
		return obj.DefaultWorkflowPermission
	}

	if obj.FeaturePermission != nil {
		return obj.FeaturePermission
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UpdateRolePermissionRequest) GetActualInstanceValue() (interface{}) {
	if obj.DefaultBlueprintPermission != nil {
		return *obj.DefaultBlueprintPermission
	}

	if obj.DefaultCatalogItemTypePermission != nil {
		return *obj.DefaultCatalogItemTypePermission
	}

	if obj.DefaultCloudPermission != nil {
		return *obj.DefaultCloudPermission
	}

	if obj.DefaultGroupPermission != nil {
		return *obj.DefaultGroupPermission
	}

	if obj.DefaultInstanceTypePermission != nil {
		return *obj.DefaultInstanceTypePermission
	}

	if obj.DefaultPersonaPermission != nil {
		return *obj.DefaultPersonaPermission
	}

	if obj.DefaultReportTypePermission != nil {
		return *obj.DefaultReportTypePermission
	}

	if obj.DefaultTaskPermission != nil {
		return *obj.DefaultTaskPermission
	}

	if obj.DefaultVDIPoolPermission != nil {
		return *obj.DefaultVDIPoolPermission
	}

	if obj.DefaultWorkflowPermission != nil {
		return *obj.DefaultWorkflowPermission
	}

	if obj.FeaturePermission != nil {
		return *obj.FeaturePermission
	}

	// all schemas are nil
	return nil
}

type NullableUpdateRolePermissionRequest struct {
	value *UpdateRolePermissionRequest
	isSet bool
}

func (v NullableUpdateRolePermissionRequest) Get() *UpdateRolePermissionRequest {
	return v.value
}

func (v *NullableUpdateRolePermissionRequest) Set(val *UpdateRolePermissionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRolePermissionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRolePermissionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRolePermissionRequest(val *UpdateRolePermissionRequest) *NullableUpdateRolePermissionRequest {
	return &NullableUpdateRolePermissionRequest{value: val, isSet: true}
}

func (v NullableUpdateRolePermissionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRolePermissionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


