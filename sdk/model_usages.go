/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the Usages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Usages{}

// Usages struct for Usages
type Usages struct {
	Activity []ListUsages200ResponseActivityInner `json:"activity,omitempty"`
	Meta *ListUsages200ResponseMeta `json:"meta,omitempty"`
}

// NewUsages instantiates a new Usages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsages() *Usages {
	this := Usages{}
	return &this
}

// NewUsagesWithDefaults instantiates a new Usages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsagesWithDefaults() *Usages {
	this := Usages{}
	return &this
}

// GetActivity returns the Activity field value if set, zero value otherwise.
func (o *Usages) GetActivity() []ListUsages200ResponseActivityInner {
	if o == nil || IsNil(o.Activity) {
		var ret []ListUsages200ResponseActivityInner
		return ret
	}
	return o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usages) GetActivityOk() ([]ListUsages200ResponseActivityInner, bool) {
	if o == nil || IsNil(o.Activity) {
		return nil, false
	}
	return o.Activity, true
}

// IsSetActivity returns a boolean if a field has been set.
func (o *Usages) IsSetActivity() bool {
	if o != nil && !IsNil(o.Activity) {
		return true
	}

	return false
}

// SetActivity gets a reference to the given []ListUsages200ResponseActivityInner and assigns it to the Activity field.
func (o *Usages) SetActivity(v []ListUsages200ResponseActivityInner) {
	o.Activity = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Usages) GetMeta() ListUsages200ResponseMeta {
	if o == nil || IsNil(o.Meta) {
		var ret ListUsages200ResponseMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Usages) GetMetaOk() (*ListUsages200ResponseMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// IsSetMeta returns a boolean if a field has been set.
func (o *Usages) IsSetMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ListUsages200ResponseMeta and assigns it to the Meta field.
func (o *Usages) SetMeta(v ListUsages200ResponseMeta) {
	o.Meta = &v
}

func (o Usages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Usages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Activity) {
		toSerialize["activity"] = o.Activity
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableUsages struct {
	value *Usages
	isSet bool
}

func (v NullableUsages) Get() *Usages {
	return v.value
}

func (v *NullableUsages) Set(val *Usages) {
	v.value = val
	v.isSet = true
}

func (v NullableUsages) IsSet() bool {
	return v.isSet
}

func (v *NullableUsages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsages(val *Usages) *NullableUsages {
	return &NullableUsages{value: val, isSet: true}
}

func (v NullableUsages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


