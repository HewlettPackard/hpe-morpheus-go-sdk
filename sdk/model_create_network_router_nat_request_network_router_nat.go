/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateNetworkRouterNatRequestNetworkRouterNAT type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNetworkRouterNatRequestNetworkRouterNAT{}

// CreateNetworkRouterNatRequestNetworkRouterNAT For a full list of available NAT options, see natOptionTypes in the specific Network Router Type
type CreateNetworkRouterNatRequestNetworkRouterNAT struct {
	Name interface{} `json:"name"`
}

type _CreateNetworkRouterNatRequestNetworkRouterNAT CreateNetworkRouterNatRequestNetworkRouterNAT

// NewCreateNetworkRouterNatRequestNetworkRouterNAT instantiates a new CreateNetworkRouterNatRequestNetworkRouterNAT object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNetworkRouterNatRequestNetworkRouterNAT(name interface{}) *CreateNetworkRouterNatRequestNetworkRouterNAT {
	this := CreateNetworkRouterNatRequestNetworkRouterNAT{}
	this.Name = name
	return &this
}

// NewCreateNetworkRouterNatRequestNetworkRouterNATWithDefaults instantiates a new CreateNetworkRouterNatRequestNetworkRouterNAT object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNetworkRouterNatRequestNetworkRouterNATWithDefaults() *CreateNetworkRouterNatRequestNetworkRouterNAT {
	this := CreateNetworkRouterNatRequestNetworkRouterNAT{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CreateNetworkRouterNatRequestNetworkRouterNAT) GetName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateNetworkRouterNatRequestNetworkRouterNAT) GetNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateNetworkRouterNatRequestNetworkRouterNAT) SetName(v interface{}) {
	o.Name = v
}

func (o CreateNetworkRouterNatRequestNetworkRouterNAT) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNetworkRouterNatRequestNetworkRouterNAT) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

func (o *CreateNetworkRouterNatRequestNetworkRouterNAT) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateNetworkRouterNatRequestNetworkRouterNAT := _CreateNetworkRouterNatRequestNetworkRouterNAT{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateNetworkRouterNatRequestNetworkRouterNAT)

	if err != nil {
		return err
	}

	*o = CreateNetworkRouterNatRequestNetworkRouterNAT(varCreateNetworkRouterNatRequestNetworkRouterNAT)

	return err
}

type NullableCreateNetworkRouterNatRequestNetworkRouterNAT struct {
	value *CreateNetworkRouterNatRequestNetworkRouterNAT
	isSet bool
}

func (v NullableCreateNetworkRouterNatRequestNetworkRouterNAT) Get() *CreateNetworkRouterNatRequestNetworkRouterNAT {
	return v.value
}

func (v *NullableCreateNetworkRouterNatRequestNetworkRouterNAT) Set(val *CreateNetworkRouterNatRequestNetworkRouterNAT) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNetworkRouterNatRequestNetworkRouterNAT) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNetworkRouterNatRequestNetworkRouterNAT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNetworkRouterNatRequestNetworkRouterNAT(val *CreateNetworkRouterNatRequestNetworkRouterNAT) *NullableCreateNetworkRouterNatRequestNetworkRouterNAT {
	return &NullableCreateNetworkRouterNatRequestNetworkRouterNAT{value: val, isSet: true}
}

func (v NullableCreateNetworkRouterNatRequestNetworkRouterNAT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNetworkRouterNatRequestNetworkRouterNAT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


