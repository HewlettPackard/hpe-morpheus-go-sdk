/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)


// ListJobs200ResponseAllOfJobsInner struct for ListJobs200ResponseAllOfJobsInner
type ListJobs200ResponseAllOfJobsInner struct {
	ListJobs200ResponseAllOfJobsInnerAnyOf *ListJobs200ResponseAllOfJobsInnerAnyOf
	ListJobs200ResponseAllOfJobsInnerAnyOf1 *ListJobs200ResponseAllOfJobsInnerAnyOf1
	ListJobs200ResponseAllOfJobsInnerAnyOf2 *ListJobs200ResponseAllOfJobsInnerAnyOf2
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ListJobs200ResponseAllOfJobsInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ListJobs200ResponseAllOfJobsInnerAnyOf
	err = json.Unmarshal(data, &dst.ListJobs200ResponseAllOfJobsInnerAnyOf);
	if err == nil {
		jsonListJobs200ResponseAllOfJobsInnerAnyOf, _ := json.Marshal(dst.ListJobs200ResponseAllOfJobsInnerAnyOf)
		if string(jsonListJobs200ResponseAllOfJobsInnerAnyOf) == "{}" { // empty struct
			dst.ListJobs200ResponseAllOfJobsInnerAnyOf = nil
		} else {
			return nil // data stored in dst.ListJobs200ResponseAllOfJobsInnerAnyOf, return on the first match
		}
	} else {
		dst.ListJobs200ResponseAllOfJobsInnerAnyOf = nil
	}

	// try to unmarshal JSON data into ListJobs200ResponseAllOfJobsInnerAnyOf1
	err = json.Unmarshal(data, &dst.ListJobs200ResponseAllOfJobsInnerAnyOf1);
	if err == nil {
		jsonListJobs200ResponseAllOfJobsInnerAnyOf1, _ := json.Marshal(dst.ListJobs200ResponseAllOfJobsInnerAnyOf1)
		if string(jsonListJobs200ResponseAllOfJobsInnerAnyOf1) == "{}" { // empty struct
			dst.ListJobs200ResponseAllOfJobsInnerAnyOf1 = nil
		} else {
			return nil // data stored in dst.ListJobs200ResponseAllOfJobsInnerAnyOf1, return on the first match
		}
	} else {
		dst.ListJobs200ResponseAllOfJobsInnerAnyOf1 = nil
	}

	// try to unmarshal JSON data into ListJobs200ResponseAllOfJobsInnerAnyOf2
	err = json.Unmarshal(data, &dst.ListJobs200ResponseAllOfJobsInnerAnyOf2);
	if err == nil {
		jsonListJobs200ResponseAllOfJobsInnerAnyOf2, _ := json.Marshal(dst.ListJobs200ResponseAllOfJobsInnerAnyOf2)
		if string(jsonListJobs200ResponseAllOfJobsInnerAnyOf2) == "{}" { // empty struct
			dst.ListJobs200ResponseAllOfJobsInnerAnyOf2 = nil
		} else {
			return nil // data stored in dst.ListJobs200ResponseAllOfJobsInnerAnyOf2, return on the first match
		}
	} else {
		dst.ListJobs200ResponseAllOfJobsInnerAnyOf2 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ListJobs200ResponseAllOfJobsInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ListJobs200ResponseAllOfJobsInner) MarshalJSON() ([]byte, error) {
	if src.ListJobs200ResponseAllOfJobsInnerAnyOf != nil {
		return json.Marshal(&src.ListJobs200ResponseAllOfJobsInnerAnyOf)
	}

	if src.ListJobs200ResponseAllOfJobsInnerAnyOf1 != nil {
		return json.Marshal(&src.ListJobs200ResponseAllOfJobsInnerAnyOf1)
	}

	if src.ListJobs200ResponseAllOfJobsInnerAnyOf2 != nil {
		return json.Marshal(&src.ListJobs200ResponseAllOfJobsInnerAnyOf2)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableListJobs200ResponseAllOfJobsInner struct {
	value *ListJobs200ResponseAllOfJobsInner
	isSet bool
}

func (v NullableListJobs200ResponseAllOfJobsInner) Get() *ListJobs200ResponseAllOfJobsInner {
	return v.value
}

func (v *NullableListJobs200ResponseAllOfJobsInner) Set(val *ListJobs200ResponseAllOfJobsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableListJobs200ResponseAllOfJobsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableListJobs200ResponseAllOfJobsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListJobs200ResponseAllOfJobsInner(val *ListJobs200ResponseAllOfJobsInner) *NullableListJobs200ResponseAllOfJobsInner {
	return &NullableListJobs200ResponseAllOfJobsInner{value: val, isSet: true}
}

func (v NullableListJobs200ResponseAllOfJobsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListJobs200ResponseAllOfJobsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


