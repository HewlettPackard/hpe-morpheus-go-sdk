/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
)

// checks if the GetLicense200ResponseLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetLicense200ResponseLicense{}

// GetLicense200ResponseLicense Current License settings and limits which are the result of stacking all the installed licenses
type GetLicense200ResponseLicense struct {
	// ID
	Id *int64 `json:"id,omitempty"`
	// Key ID (only the first 8 characters are required to identify license to uninstall)
	KeyId *string `json:"keyId,omitempty"`
	// Hash of the license content which can be used as a fingerprint identifier
	Hash *string `json:"hash,omitempty"`
	// Product Tier
	ProductTier *string `json:"productTier,omitempty"`
	// The start date of the applied license.
	StartDate *time.Time `json:"startDate,omitempty"`
	// The expiration date of the applied license.
	EndDate *time.Time `json:"endDate,omitempty"`
	// Workload Limit. 0 is used for unlimited.
	MaxInstances *int64 `json:"maxInstances,omitempty"`
	// Memory Limit. 0 is used for unlimited.
	MaxMemory *int64 `json:"maxMemory,omitempty"`
	// Storage Limit. 0 is used for unlimited.
	MaxStorage *int64 `json:"maxStorage,omitempty"`
	// The limit type determines which limits apply to the license, the new 'standard' or legacy 'workload'.
	LimitType *string `json:"limitType,omitempty"`
	// Managed Servers Limit. 0 is enforced and null is used for unlimited.
	MaxManagedServers *int64 `json:"maxManagedServers,omitempty"`
	// Discovered Servers Limit. 0 is enforced and null is used for unlimited.
	MaxDiscoveredServers *int64 `json:"maxDiscoveredServers,omitempty"`
	// Host Limit. 0 is enforced and null is used for unlimited.
	MaxHosts *int64 `json:"maxHosts,omitempty"`
	// HPE VM Host Limit. 0 is enforced and null is used for unlimited.
	MaxMvm *int64 `json:"maxMvm,omitempty"`
	// HPE VM Host Limit. 0 is enforced and null is used for unlimited.
	MaxMvmSockets *int64 `json:"maxMvmSockets,omitempty"`
	// IAC Deployments Limit. 0 is enforced and null is used for unlimited.
	MaxIac *int64 `json:"maxIac,omitempty"`
	// Xaas Instances Limit. 0 is enforced and null is used for unlimited.
	MaxXaas *int64 `json:"maxXaas,omitempty"`
	// Execution Limit. 0 is enforced and null is used for unlimited.
	MaxExecutions *int64 `json:"maxExecutions,omitempty"`
	// Distributed Workers Limit. 0 is enforced and null is used for unlimited.
	MaxDistributedWorkers *int64 `json:"maxDistributedWorkers,omitempty"`
	// Discovered Objects Limit. Not yet enforced.
	MaxDiscoveredObjects *int64 `json:"maxDiscoveredObjects,omitempty"`
	// Hard Limit
	HardLimit *bool `json:"hardLimit,omitempty"`
	// Free Trial (Community License)
	FreeTrial *bool `json:"freeTrial,omitempty"`
	// Multi-Tenant Enabled
	MultiTenant *bool `json:"multiTenant,omitempty"`
	// White Label Enabled
	Whitelabel *bool `json:"whitelabel,omitempty"`
	// Stats Reporting. This is true when the appliance registers and sends usage stats to the hub.
	ReportStatus *bool `json:"reportStatus,omitempty"`
	// Support Level
	SupportLevel *string `json:"supportLevel,omitempty"`
	// Account Name
	AccountName *string `json:"accountName,omitempty"`
	// License Configuration Object
	Config map[string]interface{} `json:"config,omitempty"`
	AmazonProductCodes *string `json:"amazonProductCodes,omitempty"`
	Features *GetLicense200ResponseLicenseFeatures `json:"features,omitempty"`
	ZoneTypes *string `json:"zoneTypes,omitempty"`
	LastUpdated *time.Time `json:"lastUpdated,omitempty"`
	DateCreated *time.Time `json:"dateCreated,omitempty"`
	RecalculationDate *time.Time `json:"recalculationDate,omitempty"`
}

// NewGetLicense200ResponseLicense instantiates a new GetLicense200ResponseLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetLicense200ResponseLicense() *GetLicense200ResponseLicense {
	this := GetLicense200ResponseLicense{}
	return &this
}

// NewGetLicense200ResponseLicenseWithDefaults instantiates a new GetLicense200ResponseLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetLicense200ResponseLicenseWithDefaults() *GetLicense200ResponseLicense {
	this := GetLicense200ResponseLicense{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *GetLicense200ResponseLicense) SetId(v int64) {
	o.Id = &v
}

// GetKeyId returns the KeyId field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetKeyId() string {
	if o == nil || IsNil(o.KeyId) {
		var ret string
		return ret
	}
	return *o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.KeyId) {
		return nil, false
	}
	return o.KeyId, true
}

// IsSetKeyId returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetKeyId() bool {
	if o != nil && !IsNil(o.KeyId) {
		return true
	}

	return false
}

// SetKeyId gets a reference to the given string and assigns it to the KeyId field.
func (o *GetLicense200ResponseLicense) SetKeyId(v string) {
	o.KeyId = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// IsSetHash returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *GetLicense200ResponseLicense) SetHash(v string) {
	o.Hash = &v
}

// GetProductTier returns the ProductTier field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetProductTier() string {
	if o == nil || IsNil(o.ProductTier) {
		var ret string
		return ret
	}
	return *o.ProductTier
}

// GetProductTierOk returns a tuple with the ProductTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetProductTierOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTier) {
		return nil, false
	}
	return o.ProductTier, true
}

// IsSetProductTier returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetProductTier() bool {
	if o != nil && !IsNil(o.ProductTier) {
		return true
	}

	return false
}

// SetProductTier gets a reference to the given string and assigns it to the ProductTier field.
func (o *GetLicense200ResponseLicense) SetProductTier(v string) {
	o.ProductTier = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// IsSetStartDate returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *GetLicense200ResponseLicense) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// IsSetEndDate returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *GetLicense200ResponseLicense) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetMaxInstances returns the MaxInstances field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxInstances() int64 {
	if o == nil || IsNil(o.MaxInstances) {
		var ret int64
		return ret
	}
	return *o.MaxInstances
}

// GetMaxInstancesOk returns a tuple with the MaxInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxInstancesOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxInstances) {
		return nil, false
	}
	return o.MaxInstances, true
}

// IsSetMaxInstances returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxInstances() bool {
	if o != nil && !IsNil(o.MaxInstances) {
		return true
	}

	return false
}

// SetMaxInstances gets a reference to the given int64 and assigns it to the MaxInstances field.
func (o *GetLicense200ResponseLicense) SetMaxInstances(v int64) {
	o.MaxInstances = &v
}

// GetMaxMemory returns the MaxMemory field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxMemory() int64 {
	if o == nil || IsNil(o.MaxMemory) {
		var ret int64
		return ret
	}
	return *o.MaxMemory
}

// GetMaxMemoryOk returns a tuple with the MaxMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxMemoryOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxMemory) {
		return nil, false
	}
	return o.MaxMemory, true
}

// IsSetMaxMemory returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxMemory() bool {
	if o != nil && !IsNil(o.MaxMemory) {
		return true
	}

	return false
}

// SetMaxMemory gets a reference to the given int64 and assigns it to the MaxMemory field.
func (o *GetLicense200ResponseLicense) SetMaxMemory(v int64) {
	o.MaxMemory = &v
}

// GetMaxStorage returns the MaxStorage field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxStorage() int64 {
	if o == nil || IsNil(o.MaxStorage) {
		var ret int64
		return ret
	}
	return *o.MaxStorage
}

// GetMaxStorageOk returns a tuple with the MaxStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxStorage) {
		return nil, false
	}
	return o.MaxStorage, true
}

// IsSetMaxStorage returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxStorage() bool {
	if o != nil && !IsNil(o.MaxStorage) {
		return true
	}

	return false
}

// SetMaxStorage gets a reference to the given int64 and assigns it to the MaxStorage field.
func (o *GetLicense200ResponseLicense) SetMaxStorage(v int64) {
	o.MaxStorage = &v
}

// GetLimitType returns the LimitType field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetLimitType() string {
	if o == nil || IsNil(o.LimitType) {
		var ret string
		return ret
	}
	return *o.LimitType
}

// GetLimitTypeOk returns a tuple with the LimitType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetLimitTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LimitType) {
		return nil, false
	}
	return o.LimitType, true
}

// IsSetLimitType returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetLimitType() bool {
	if o != nil && !IsNil(o.LimitType) {
		return true
	}

	return false
}

// SetLimitType gets a reference to the given string and assigns it to the LimitType field.
func (o *GetLicense200ResponseLicense) SetLimitType(v string) {
	o.LimitType = &v
}

// GetMaxManagedServers returns the MaxManagedServers field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxManagedServers() int64 {
	if o == nil || IsNil(o.MaxManagedServers) {
		var ret int64
		return ret
	}
	return *o.MaxManagedServers
}

// GetMaxManagedServersOk returns a tuple with the MaxManagedServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxManagedServersOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxManagedServers) {
		return nil, false
	}
	return o.MaxManagedServers, true
}

// IsSetMaxManagedServers returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxManagedServers() bool {
	if o != nil && !IsNil(o.MaxManagedServers) {
		return true
	}

	return false
}

// SetMaxManagedServers gets a reference to the given int64 and assigns it to the MaxManagedServers field.
func (o *GetLicense200ResponseLicense) SetMaxManagedServers(v int64) {
	o.MaxManagedServers = &v
}

// GetMaxDiscoveredServers returns the MaxDiscoveredServers field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxDiscoveredServers() int64 {
	if o == nil || IsNil(o.MaxDiscoveredServers) {
		var ret int64
		return ret
	}
	return *o.MaxDiscoveredServers
}

// GetMaxDiscoveredServersOk returns a tuple with the MaxDiscoveredServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxDiscoveredServersOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxDiscoveredServers) {
		return nil, false
	}
	return o.MaxDiscoveredServers, true
}

// IsSetMaxDiscoveredServers returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxDiscoveredServers() bool {
	if o != nil && !IsNil(o.MaxDiscoveredServers) {
		return true
	}

	return false
}

// SetMaxDiscoveredServers gets a reference to the given int64 and assigns it to the MaxDiscoveredServers field.
func (o *GetLicense200ResponseLicense) SetMaxDiscoveredServers(v int64) {
	o.MaxDiscoveredServers = &v
}

// GetMaxHosts returns the MaxHosts field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxHosts() int64 {
	if o == nil || IsNil(o.MaxHosts) {
		var ret int64
		return ret
	}
	return *o.MaxHosts
}

// GetMaxHostsOk returns a tuple with the MaxHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxHostsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxHosts) {
		return nil, false
	}
	return o.MaxHosts, true
}

// IsSetMaxHosts returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxHosts() bool {
	if o != nil && !IsNil(o.MaxHosts) {
		return true
	}

	return false
}

// SetMaxHosts gets a reference to the given int64 and assigns it to the MaxHosts field.
func (o *GetLicense200ResponseLicense) SetMaxHosts(v int64) {
	o.MaxHosts = &v
}

// GetMaxMvm returns the MaxMvm field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxMvm() int64 {
	if o == nil || IsNil(o.MaxMvm) {
		var ret int64
		return ret
	}
	return *o.MaxMvm
}

// GetMaxMvmOk returns a tuple with the MaxMvm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxMvmOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxMvm) {
		return nil, false
	}
	return o.MaxMvm, true
}

// IsSetMaxMvm returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxMvm() bool {
	if o != nil && !IsNil(o.MaxMvm) {
		return true
	}

	return false
}

// SetMaxMvm gets a reference to the given int64 and assigns it to the MaxMvm field.
func (o *GetLicense200ResponseLicense) SetMaxMvm(v int64) {
	o.MaxMvm = &v
}

// GetMaxMvmSockets returns the MaxMvmSockets field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxMvmSockets() int64 {
	if o == nil || IsNil(o.MaxMvmSockets) {
		var ret int64
		return ret
	}
	return *o.MaxMvmSockets
}

// GetMaxMvmSocketsOk returns a tuple with the MaxMvmSockets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxMvmSocketsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxMvmSockets) {
		return nil, false
	}
	return o.MaxMvmSockets, true
}

// IsSetMaxMvmSockets returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxMvmSockets() bool {
	if o != nil && !IsNil(o.MaxMvmSockets) {
		return true
	}

	return false
}

// SetMaxMvmSockets gets a reference to the given int64 and assigns it to the MaxMvmSockets field.
func (o *GetLicense200ResponseLicense) SetMaxMvmSockets(v int64) {
	o.MaxMvmSockets = &v
}

// GetMaxIac returns the MaxIac field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxIac() int64 {
	if o == nil || IsNil(o.MaxIac) {
		var ret int64
		return ret
	}
	return *o.MaxIac
}

// GetMaxIacOk returns a tuple with the MaxIac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxIacOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxIac) {
		return nil, false
	}
	return o.MaxIac, true
}

// IsSetMaxIac returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxIac() bool {
	if o != nil && !IsNil(o.MaxIac) {
		return true
	}

	return false
}

// SetMaxIac gets a reference to the given int64 and assigns it to the MaxIac field.
func (o *GetLicense200ResponseLicense) SetMaxIac(v int64) {
	o.MaxIac = &v
}

// GetMaxXaas returns the MaxXaas field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxXaas() int64 {
	if o == nil || IsNil(o.MaxXaas) {
		var ret int64
		return ret
	}
	return *o.MaxXaas
}

// GetMaxXaasOk returns a tuple with the MaxXaas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxXaasOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxXaas) {
		return nil, false
	}
	return o.MaxXaas, true
}

// IsSetMaxXaas returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxXaas() bool {
	if o != nil && !IsNil(o.MaxXaas) {
		return true
	}

	return false
}

// SetMaxXaas gets a reference to the given int64 and assigns it to the MaxXaas field.
func (o *GetLicense200ResponseLicense) SetMaxXaas(v int64) {
	o.MaxXaas = &v
}

// GetMaxExecutions returns the MaxExecutions field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxExecutions() int64 {
	if o == nil || IsNil(o.MaxExecutions) {
		var ret int64
		return ret
	}
	return *o.MaxExecutions
}

// GetMaxExecutionsOk returns a tuple with the MaxExecutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxExecutionsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxExecutions) {
		return nil, false
	}
	return o.MaxExecutions, true
}

// IsSetMaxExecutions returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxExecutions() bool {
	if o != nil && !IsNil(o.MaxExecutions) {
		return true
	}

	return false
}

// SetMaxExecutions gets a reference to the given int64 and assigns it to the MaxExecutions field.
func (o *GetLicense200ResponseLicense) SetMaxExecutions(v int64) {
	o.MaxExecutions = &v
}

// GetMaxDistributedWorkers returns the MaxDistributedWorkers field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxDistributedWorkers() int64 {
	if o == nil || IsNil(o.MaxDistributedWorkers) {
		var ret int64
		return ret
	}
	return *o.MaxDistributedWorkers
}

// GetMaxDistributedWorkersOk returns a tuple with the MaxDistributedWorkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxDistributedWorkersOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxDistributedWorkers) {
		return nil, false
	}
	return o.MaxDistributedWorkers, true
}

// IsSetMaxDistributedWorkers returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxDistributedWorkers() bool {
	if o != nil && !IsNil(o.MaxDistributedWorkers) {
		return true
	}

	return false
}

// SetMaxDistributedWorkers gets a reference to the given int64 and assigns it to the MaxDistributedWorkers field.
func (o *GetLicense200ResponseLicense) SetMaxDistributedWorkers(v int64) {
	o.MaxDistributedWorkers = &v
}

// GetMaxDiscoveredObjects returns the MaxDiscoveredObjects field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMaxDiscoveredObjects() int64 {
	if o == nil || IsNil(o.MaxDiscoveredObjects) {
		var ret int64
		return ret
	}
	return *o.MaxDiscoveredObjects
}

// GetMaxDiscoveredObjectsOk returns a tuple with the MaxDiscoveredObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMaxDiscoveredObjectsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxDiscoveredObjects) {
		return nil, false
	}
	return o.MaxDiscoveredObjects, true
}

// IsSetMaxDiscoveredObjects returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMaxDiscoveredObjects() bool {
	if o != nil && !IsNil(o.MaxDiscoveredObjects) {
		return true
	}

	return false
}

// SetMaxDiscoveredObjects gets a reference to the given int64 and assigns it to the MaxDiscoveredObjects field.
func (o *GetLicense200ResponseLicense) SetMaxDiscoveredObjects(v int64) {
	o.MaxDiscoveredObjects = &v
}

// GetHardLimit returns the HardLimit field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetHardLimit() bool {
	if o == nil || IsNil(o.HardLimit) {
		var ret bool
		return ret
	}
	return *o.HardLimit
}

// GetHardLimitOk returns a tuple with the HardLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetHardLimitOk() (*bool, bool) {
	if o == nil || IsNil(o.HardLimit) {
		return nil, false
	}
	return o.HardLimit, true
}

// IsSetHardLimit returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetHardLimit() bool {
	if o != nil && !IsNil(o.HardLimit) {
		return true
	}

	return false
}

// SetHardLimit gets a reference to the given bool and assigns it to the HardLimit field.
func (o *GetLicense200ResponseLicense) SetHardLimit(v bool) {
	o.HardLimit = &v
}

// GetFreeTrial returns the FreeTrial field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetFreeTrial() bool {
	if o == nil || IsNil(o.FreeTrial) {
		var ret bool
		return ret
	}
	return *o.FreeTrial
}

// GetFreeTrialOk returns a tuple with the FreeTrial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetFreeTrialOk() (*bool, bool) {
	if o == nil || IsNil(o.FreeTrial) {
		return nil, false
	}
	return o.FreeTrial, true
}

// IsSetFreeTrial returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetFreeTrial() bool {
	if o != nil && !IsNil(o.FreeTrial) {
		return true
	}

	return false
}

// SetFreeTrial gets a reference to the given bool and assigns it to the FreeTrial field.
func (o *GetLicense200ResponseLicense) SetFreeTrial(v bool) {
	o.FreeTrial = &v
}

// GetMultiTenant returns the MultiTenant field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetMultiTenant() bool {
	if o == nil || IsNil(o.MultiTenant) {
		var ret bool
		return ret
	}
	return *o.MultiTenant
}

// GetMultiTenantOk returns a tuple with the MultiTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetMultiTenantOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiTenant) {
		return nil, false
	}
	return o.MultiTenant, true
}

// IsSetMultiTenant returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetMultiTenant() bool {
	if o != nil && !IsNil(o.MultiTenant) {
		return true
	}

	return false
}

// SetMultiTenant gets a reference to the given bool and assigns it to the MultiTenant field.
func (o *GetLicense200ResponseLicense) SetMultiTenant(v bool) {
	o.MultiTenant = &v
}

// GetWhitelabel returns the Whitelabel field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetWhitelabel() bool {
	if o == nil || IsNil(o.Whitelabel) {
		var ret bool
		return ret
	}
	return *o.Whitelabel
}

// GetWhitelabelOk returns a tuple with the Whitelabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetWhitelabelOk() (*bool, bool) {
	if o == nil || IsNil(o.Whitelabel) {
		return nil, false
	}
	return o.Whitelabel, true
}

// IsSetWhitelabel returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetWhitelabel() bool {
	if o != nil && !IsNil(o.Whitelabel) {
		return true
	}

	return false
}

// SetWhitelabel gets a reference to the given bool and assigns it to the Whitelabel field.
func (o *GetLicense200ResponseLicense) SetWhitelabel(v bool) {
	o.Whitelabel = &v
}

// GetReportStatus returns the ReportStatus field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetReportStatus() bool {
	if o == nil || IsNil(o.ReportStatus) {
		var ret bool
		return ret
	}
	return *o.ReportStatus
}

// GetReportStatusOk returns a tuple with the ReportStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetReportStatusOk() (*bool, bool) {
	if o == nil || IsNil(o.ReportStatus) {
		return nil, false
	}
	return o.ReportStatus, true
}

// IsSetReportStatus returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetReportStatus() bool {
	if o != nil && !IsNil(o.ReportStatus) {
		return true
	}

	return false
}

// SetReportStatus gets a reference to the given bool and assigns it to the ReportStatus field.
func (o *GetLicense200ResponseLicense) SetReportStatus(v bool) {
	o.ReportStatus = &v
}

// GetSupportLevel returns the SupportLevel field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetSupportLevel() string {
	if o == nil || IsNil(o.SupportLevel) {
		var ret string
		return ret
	}
	return *o.SupportLevel
}

// GetSupportLevelOk returns a tuple with the SupportLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetSupportLevelOk() (*string, bool) {
	if o == nil || IsNil(o.SupportLevel) {
		return nil, false
	}
	return o.SupportLevel, true
}

// IsSetSupportLevel returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetSupportLevel() bool {
	if o != nil && !IsNil(o.SupportLevel) {
		return true
	}

	return false
}

// SetSupportLevel gets a reference to the given string and assigns it to the SupportLevel field.
func (o *GetLicense200ResponseLicense) SetSupportLevel(v string) {
	o.SupportLevel = &v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// IsSetAccountName returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *GetLicense200ResponseLicense) SetAccountName(v string) {
	o.AccountName = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// IsSetConfig returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *GetLicense200ResponseLicense) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetAmazonProductCodes returns the AmazonProductCodes field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetAmazonProductCodes() string {
	if o == nil || IsNil(o.AmazonProductCodes) {
		var ret string
		return ret
	}
	return *o.AmazonProductCodes
}

// GetAmazonProductCodesOk returns a tuple with the AmazonProductCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetAmazonProductCodesOk() (*string, bool) {
	if o == nil || IsNil(o.AmazonProductCodes) {
		return nil, false
	}
	return o.AmazonProductCodes, true
}

// IsSetAmazonProductCodes returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetAmazonProductCodes() bool {
	if o != nil && !IsNil(o.AmazonProductCodes) {
		return true
	}

	return false
}

// SetAmazonProductCodes gets a reference to the given string and assigns it to the AmazonProductCodes field.
func (o *GetLicense200ResponseLicense) SetAmazonProductCodes(v string) {
	o.AmazonProductCodes = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetFeatures() GetLicense200ResponseLicenseFeatures {
	if o == nil || IsNil(o.Features) {
		var ret GetLicense200ResponseLicenseFeatures
		return ret
	}
	return *o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetFeaturesOk() (*GetLicense200ResponseLicenseFeatures, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// IsSetFeatures returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given GetLicense200ResponseLicenseFeatures and assigns it to the Features field.
func (o *GetLicense200ResponseLicense) SetFeatures(v GetLicense200ResponseLicenseFeatures) {
	o.Features = &v
}

// GetZoneTypes returns the ZoneTypes field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetZoneTypes() string {
	if o == nil || IsNil(o.ZoneTypes) {
		var ret string
		return ret
	}
	return *o.ZoneTypes
}

// GetZoneTypesOk returns a tuple with the ZoneTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetZoneTypesOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneTypes) {
		return nil, false
	}
	return o.ZoneTypes, true
}

// IsSetZoneTypes returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetZoneTypes() bool {
	if o != nil && !IsNil(o.ZoneTypes) {
		return true
	}

	return false
}

// SetZoneTypes gets a reference to the given string and assigns it to the ZoneTypes field.
func (o *GetLicense200ResponseLicense) SetZoneTypes(v string) {
	o.ZoneTypes = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// IsSetLastUpdated returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *GetLicense200ResponseLicense) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// IsSetDateCreated returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *GetLicense200ResponseLicense) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetRecalculationDate returns the RecalculationDate field value if set, zero value otherwise.
func (o *GetLicense200ResponseLicense) GetRecalculationDate() time.Time {
	if o == nil || IsNil(o.RecalculationDate) {
		var ret time.Time
		return ret
	}
	return *o.RecalculationDate
}

// GetRecalculationDateOk returns a tuple with the RecalculationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetLicense200ResponseLicense) GetRecalculationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RecalculationDate) {
		return nil, false
	}
	return o.RecalculationDate, true
}

// IsSetRecalculationDate returns a boolean if a field has been set.
func (o *GetLicense200ResponseLicense) IsSetRecalculationDate() bool {
	if o != nil && !IsNil(o.RecalculationDate) {
		return true
	}

	return false
}

// SetRecalculationDate gets a reference to the given time.Time and assigns it to the RecalculationDate field.
func (o *GetLicense200ResponseLicense) SetRecalculationDate(v time.Time) {
	o.RecalculationDate = &v
}

func (o GetLicense200ResponseLicense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetLicense200ResponseLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.KeyId) {
		toSerialize["keyId"] = o.KeyId
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.ProductTier) {
		toSerialize["productTier"] = o.ProductTier
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.MaxInstances) {
		toSerialize["maxInstances"] = o.MaxInstances
	}
	if !IsNil(o.MaxMemory) {
		toSerialize["maxMemory"] = o.MaxMemory
	}
	if !IsNil(o.MaxStorage) {
		toSerialize["maxStorage"] = o.MaxStorage
	}
	if !IsNil(o.LimitType) {
		toSerialize["limitType"] = o.LimitType
	}
	if !IsNil(o.MaxManagedServers) {
		toSerialize["maxManagedServers"] = o.MaxManagedServers
	}
	if !IsNil(o.MaxDiscoveredServers) {
		toSerialize["maxDiscoveredServers"] = o.MaxDiscoveredServers
	}
	if !IsNil(o.MaxHosts) {
		toSerialize["maxHosts"] = o.MaxHosts
	}
	if !IsNil(o.MaxMvm) {
		toSerialize["maxMvm"] = o.MaxMvm
	}
	if !IsNil(o.MaxMvmSockets) {
		toSerialize["maxMvmSockets"] = o.MaxMvmSockets
	}
	if !IsNil(o.MaxIac) {
		toSerialize["maxIac"] = o.MaxIac
	}
	if !IsNil(o.MaxXaas) {
		toSerialize["maxXaas"] = o.MaxXaas
	}
	if !IsNil(o.MaxExecutions) {
		toSerialize["maxExecutions"] = o.MaxExecutions
	}
	if !IsNil(o.MaxDistributedWorkers) {
		toSerialize["maxDistributedWorkers"] = o.MaxDistributedWorkers
	}
	if !IsNil(o.MaxDiscoveredObjects) {
		toSerialize["maxDiscoveredObjects"] = o.MaxDiscoveredObjects
	}
	if !IsNil(o.HardLimit) {
		toSerialize["hardLimit"] = o.HardLimit
	}
	if !IsNil(o.FreeTrial) {
		toSerialize["freeTrial"] = o.FreeTrial
	}
	if !IsNil(o.MultiTenant) {
		toSerialize["multiTenant"] = o.MultiTenant
	}
	if !IsNil(o.Whitelabel) {
		toSerialize["whitelabel"] = o.Whitelabel
	}
	if !IsNil(o.ReportStatus) {
		toSerialize["reportStatus"] = o.ReportStatus
	}
	if !IsNil(o.SupportLevel) {
		toSerialize["supportLevel"] = o.SupportLevel
	}
	if !IsNil(o.AccountName) {
		toSerialize["accountName"] = o.AccountName
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.AmazonProductCodes) {
		toSerialize["amazonProductCodes"] = o.AmazonProductCodes
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.ZoneTypes) {
		toSerialize["zoneTypes"] = o.ZoneTypes
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.RecalculationDate) {
		toSerialize["recalculationDate"] = o.RecalculationDate
	}
	return toSerialize, nil
}

type NullableGetLicense200ResponseLicense struct {
	value *GetLicense200ResponseLicense
	isSet bool
}

func (v NullableGetLicense200ResponseLicense) Get() *GetLicense200ResponseLicense {
	return v.value
}

func (v *NullableGetLicense200ResponseLicense) Set(val *GetLicense200ResponseLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableGetLicense200ResponseLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableGetLicense200ResponseLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetLicense200ResponseLicense(val *GetLicense200ResponseLicense) *NullableGetLicense200ResponseLicense {
	return &NullableGetLicense200ResponseLicense{value: val, isSet: true}
}

func (v NullableGetLicense200ResponseLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetLicense200ResponseLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


