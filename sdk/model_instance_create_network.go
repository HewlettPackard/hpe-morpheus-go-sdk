/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InstanceCreateNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceCreateNetwork{}

// InstanceCreateNetwork struct for InstanceCreateNetwork
type InstanceCreateNetwork struct {
	Network AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigNetworkInterfacesInnerNetwork `json:"network"`
	// The id of type of the network interface.
	NetworkInterfaceTypeId *int64 `json:"networkInterfaceTypeId,omitempty"`
	// The mode for determining ip address. Use 'static' when specifying an ipAddress, otherwise 'dhcp' is used.
	IpMode *string `json:"ipMode,omitempty"`
	// The ip address. Not applicable when using DHCP or IP Pools.
	IpAddress *string `json:"ipAddress,omitempty"`
	// The interface id. Applicable when resizing and you want to identify an interface to update that already exists.
	Id *int64 `json:"id,omitempty"`
}

type _InstanceCreateNetwork InstanceCreateNetwork

// NewInstanceCreateNetwork instantiates a new InstanceCreateNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceCreateNetwork(network AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigNetworkInterfacesInnerNetwork) *InstanceCreateNetwork {
	this := InstanceCreateNetwork{}
	this.Network = network
	var ipMode string = "dhcp"
	this.IpMode = &ipMode
	return &this
}

// NewInstanceCreateNetworkWithDefaults instantiates a new InstanceCreateNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceCreateNetworkWithDefaults() *InstanceCreateNetwork {
	this := InstanceCreateNetwork{}
	var ipMode string = "dhcp"
	this.IpMode = &ipMode
	return &this
}

// GetNetwork returns the Network field value
func (o *InstanceCreateNetwork) GetNetwork() AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigNetworkInterfacesInnerNetwork {
	if o == nil {
		var ret AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigNetworkInterfacesInnerNetwork
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *InstanceCreateNetwork) GetNetworkOk() (*AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigNetworkInterfacesInnerNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *InstanceCreateNetwork) SetNetwork(v AddCatalogItemTypeRequestCatalogItemTypeOneOfConfigNetworkInterfacesInnerNetwork) {
	o.Network = v
}

// GetNetworkInterfaceTypeId returns the NetworkInterfaceTypeId field value if set, zero value otherwise.
func (o *InstanceCreateNetwork) GetNetworkInterfaceTypeId() int64 {
	if o == nil || IsNil(o.NetworkInterfaceTypeId) {
		var ret int64
		return ret
	}
	return *o.NetworkInterfaceTypeId
}

// GetNetworkInterfaceTypeIdOk returns a tuple with the NetworkInterfaceTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceCreateNetwork) GetNetworkInterfaceTypeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.NetworkInterfaceTypeId) {
		return nil, false
	}
	return o.NetworkInterfaceTypeId, true
}

// IsSetNetworkInterfaceTypeId returns a boolean if a field has been set.
func (o *InstanceCreateNetwork) IsSetNetworkInterfaceTypeId() bool {
	if o != nil && !IsNil(o.NetworkInterfaceTypeId) {
		return true
	}

	return false
}

// SetNetworkInterfaceTypeId gets a reference to the given int64 and assigns it to the NetworkInterfaceTypeId field.
func (o *InstanceCreateNetwork) SetNetworkInterfaceTypeId(v int64) {
	o.NetworkInterfaceTypeId = &v
}

// GetIpMode returns the IpMode field value if set, zero value otherwise.
func (o *InstanceCreateNetwork) GetIpMode() string {
	if o == nil || IsNil(o.IpMode) {
		var ret string
		return ret
	}
	return *o.IpMode
}

// GetIpModeOk returns a tuple with the IpMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceCreateNetwork) GetIpModeOk() (*string, bool) {
	if o == nil || IsNil(o.IpMode) {
		return nil, false
	}
	return o.IpMode, true
}

// IsSetIpMode returns a boolean if a field has been set.
func (o *InstanceCreateNetwork) IsSetIpMode() bool {
	if o != nil && !IsNil(o.IpMode) {
		return true
	}

	return false
}

// SetIpMode gets a reference to the given string and assigns it to the IpMode field.
func (o *InstanceCreateNetwork) SetIpMode(v string) {
	o.IpMode = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *InstanceCreateNetwork) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceCreateNetwork) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// IsSetIpAddress returns a boolean if a field has been set.
func (o *InstanceCreateNetwork) IsSetIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *InstanceCreateNetwork) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InstanceCreateNetwork) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceCreateNetwork) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *InstanceCreateNetwork) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *InstanceCreateNetwork) SetId(v int64) {
	o.Id = &v
}

func (o InstanceCreateNetwork) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceCreateNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network"] = o.Network
	if !IsNil(o.NetworkInterfaceTypeId) {
		toSerialize["networkInterfaceTypeId"] = o.NetworkInterfaceTypeId
	}
	if !IsNil(o.IpMode) {
		toSerialize["ipMode"] = o.IpMode
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

func (o *InstanceCreateNetwork) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstanceCreateNetwork := _InstanceCreateNetwork{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInstanceCreateNetwork)

	if err != nil {
		return err
	}

	*o = InstanceCreateNetwork(varInstanceCreateNetwork)

	return err
}

type NullableInstanceCreateNetwork struct {
	value *InstanceCreateNetwork
	isSet bool
}

func (v NullableInstanceCreateNetwork) Get() *InstanceCreateNetwork {
	return v.value
}

func (v *NullableInstanceCreateNetwork) Set(val *InstanceCreateNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceCreateNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceCreateNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceCreateNetwork(val *InstanceCreateNetwork) *NullableInstanceCreateNetwork {
	return &NullableInstanceCreateNetwork{value: val, isSet: true}
}

func (v NullableInstanceCreateNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceCreateNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


