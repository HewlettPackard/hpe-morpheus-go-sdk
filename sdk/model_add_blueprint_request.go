/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// AddBlueprintRequest - struct for AddBlueprintRequest
type AddBlueprintRequest struct {
	AddBlueprintRequestOneOf *AddBlueprintRequestOneOf
	AddBlueprintRequestOneOf1 *AddBlueprintRequestOneOf1
	AddBlueprintRequestOneOf2 *AddBlueprintRequestOneOf2
	AddBlueprintRequestOneOf3 *AddBlueprintRequestOneOf3
	AddBlueprintRequestOneOf4 *AddBlueprintRequestOneOf4
	AddBlueprintRequestOneOf5 *AddBlueprintRequestOneOf5
}

// AddBlueprintRequestOneOfAsAddBlueprintRequest is a convenience function that returns AddBlueprintRequestOneOf wrapped in AddBlueprintRequest
func AddBlueprintRequestOneOfAsAddBlueprintRequest(v *AddBlueprintRequestOneOf) AddBlueprintRequest {
	return AddBlueprintRequest{
		AddBlueprintRequestOneOf: v,
	}
}

// AddBlueprintRequestOneOf1AsAddBlueprintRequest is a convenience function that returns AddBlueprintRequestOneOf1 wrapped in AddBlueprintRequest
func AddBlueprintRequestOneOf1AsAddBlueprintRequest(v *AddBlueprintRequestOneOf1) AddBlueprintRequest {
	return AddBlueprintRequest{
		AddBlueprintRequestOneOf1: v,
	}
}

// AddBlueprintRequestOneOf2AsAddBlueprintRequest is a convenience function that returns AddBlueprintRequestOneOf2 wrapped in AddBlueprintRequest
func AddBlueprintRequestOneOf2AsAddBlueprintRequest(v *AddBlueprintRequestOneOf2) AddBlueprintRequest {
	return AddBlueprintRequest{
		AddBlueprintRequestOneOf2: v,
	}
}

// AddBlueprintRequestOneOf3AsAddBlueprintRequest is a convenience function that returns AddBlueprintRequestOneOf3 wrapped in AddBlueprintRequest
func AddBlueprintRequestOneOf3AsAddBlueprintRequest(v *AddBlueprintRequestOneOf3) AddBlueprintRequest {
	return AddBlueprintRequest{
		AddBlueprintRequestOneOf3: v,
	}
}

// AddBlueprintRequestOneOf4AsAddBlueprintRequest is a convenience function that returns AddBlueprintRequestOneOf4 wrapped in AddBlueprintRequest
func AddBlueprintRequestOneOf4AsAddBlueprintRequest(v *AddBlueprintRequestOneOf4) AddBlueprintRequest {
	return AddBlueprintRequest{
		AddBlueprintRequestOneOf4: v,
	}
}

// AddBlueprintRequestOneOf5AsAddBlueprintRequest is a convenience function that returns AddBlueprintRequestOneOf5 wrapped in AddBlueprintRequest
func AddBlueprintRequestOneOf5AsAddBlueprintRequest(v *AddBlueprintRequestOneOf5) AddBlueprintRequest {
	return AddBlueprintRequest{
		AddBlueprintRequestOneOf5: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AddBlueprintRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddBlueprintRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.AddBlueprintRequestOneOf)
	if err == nil {
		jsonAddBlueprintRequestOneOf, _ := json.Marshal(dst.AddBlueprintRequestOneOf)
		if string(jsonAddBlueprintRequestOneOf) == "{}" { // empty struct
			dst.AddBlueprintRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.AddBlueprintRequestOneOf); err != nil {
				dst.AddBlueprintRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddBlueprintRequestOneOf = nil
	}

	// try to unmarshal data into AddBlueprintRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.AddBlueprintRequestOneOf1)
	if err == nil {
		jsonAddBlueprintRequestOneOf1, _ := json.Marshal(dst.AddBlueprintRequestOneOf1)
		if string(jsonAddBlueprintRequestOneOf1) == "{}" { // empty struct
			dst.AddBlueprintRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.AddBlueprintRequestOneOf1); err != nil {
				dst.AddBlueprintRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddBlueprintRequestOneOf1 = nil
	}

	// try to unmarshal data into AddBlueprintRequestOneOf2
	err = newStrictDecoder(data).Decode(&dst.AddBlueprintRequestOneOf2)
	if err == nil {
		jsonAddBlueprintRequestOneOf2, _ := json.Marshal(dst.AddBlueprintRequestOneOf2)
		if string(jsonAddBlueprintRequestOneOf2) == "{}" { // empty struct
			dst.AddBlueprintRequestOneOf2 = nil
		} else {
			if err = validator.Validate(dst.AddBlueprintRequestOneOf2); err != nil {
				dst.AddBlueprintRequestOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddBlueprintRequestOneOf2 = nil
	}

	// try to unmarshal data into AddBlueprintRequestOneOf3
	err = newStrictDecoder(data).Decode(&dst.AddBlueprintRequestOneOf3)
	if err == nil {
		jsonAddBlueprintRequestOneOf3, _ := json.Marshal(dst.AddBlueprintRequestOneOf3)
		if string(jsonAddBlueprintRequestOneOf3) == "{}" { // empty struct
			dst.AddBlueprintRequestOneOf3 = nil
		} else {
			if err = validator.Validate(dst.AddBlueprintRequestOneOf3); err != nil {
				dst.AddBlueprintRequestOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddBlueprintRequestOneOf3 = nil
	}

	// try to unmarshal data into AddBlueprintRequestOneOf4
	err = newStrictDecoder(data).Decode(&dst.AddBlueprintRequestOneOf4)
	if err == nil {
		jsonAddBlueprintRequestOneOf4, _ := json.Marshal(dst.AddBlueprintRequestOneOf4)
		if string(jsonAddBlueprintRequestOneOf4) == "{}" { // empty struct
			dst.AddBlueprintRequestOneOf4 = nil
		} else {
			if err = validator.Validate(dst.AddBlueprintRequestOneOf4); err != nil {
				dst.AddBlueprintRequestOneOf4 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddBlueprintRequestOneOf4 = nil
	}

	// try to unmarshal data into AddBlueprintRequestOneOf5
	err = newStrictDecoder(data).Decode(&dst.AddBlueprintRequestOneOf5)
	if err == nil {
		jsonAddBlueprintRequestOneOf5, _ := json.Marshal(dst.AddBlueprintRequestOneOf5)
		if string(jsonAddBlueprintRequestOneOf5) == "{}" { // empty struct
			dst.AddBlueprintRequestOneOf5 = nil
		} else {
			if err = validator.Validate(dst.AddBlueprintRequestOneOf5); err != nil {
				dst.AddBlueprintRequestOneOf5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddBlueprintRequestOneOf5 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddBlueprintRequestOneOf = nil
		dst.AddBlueprintRequestOneOf1 = nil
		dst.AddBlueprintRequestOneOf2 = nil
		dst.AddBlueprintRequestOneOf3 = nil
		dst.AddBlueprintRequestOneOf4 = nil
		dst.AddBlueprintRequestOneOf5 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AddBlueprintRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AddBlueprintRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddBlueprintRequest) MarshalJSON() ([]byte, error) {
	if src.AddBlueprintRequestOneOf != nil {
		return json.Marshal(&src.AddBlueprintRequestOneOf)
	}

	if src.AddBlueprintRequestOneOf1 != nil {
		return json.Marshal(&src.AddBlueprintRequestOneOf1)
	}

	if src.AddBlueprintRequestOneOf2 != nil {
		return json.Marshal(&src.AddBlueprintRequestOneOf2)
	}

	if src.AddBlueprintRequestOneOf3 != nil {
		return json.Marshal(&src.AddBlueprintRequestOneOf3)
	}

	if src.AddBlueprintRequestOneOf4 != nil {
		return json.Marshal(&src.AddBlueprintRequestOneOf4)
	}

	if src.AddBlueprintRequestOneOf5 != nil {
		return json.Marshal(&src.AddBlueprintRequestOneOf5)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AddBlueprintRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddBlueprintRequestOneOf != nil {
		return obj.AddBlueprintRequestOneOf
	}

	if obj.AddBlueprintRequestOneOf1 != nil {
		return obj.AddBlueprintRequestOneOf1
	}

	if obj.AddBlueprintRequestOneOf2 != nil {
		return obj.AddBlueprintRequestOneOf2
	}

	if obj.AddBlueprintRequestOneOf3 != nil {
		return obj.AddBlueprintRequestOneOf3
	}

	if obj.AddBlueprintRequestOneOf4 != nil {
		return obj.AddBlueprintRequestOneOf4
	}

	if obj.AddBlueprintRequestOneOf5 != nil {
		return obj.AddBlueprintRequestOneOf5
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj AddBlueprintRequest) GetActualInstanceValue() (interface{}) {
	if obj.AddBlueprintRequestOneOf != nil {
		return *obj.AddBlueprintRequestOneOf
	}

	if obj.AddBlueprintRequestOneOf1 != nil {
		return *obj.AddBlueprintRequestOneOf1
	}

	if obj.AddBlueprintRequestOneOf2 != nil {
		return *obj.AddBlueprintRequestOneOf2
	}

	if obj.AddBlueprintRequestOneOf3 != nil {
		return *obj.AddBlueprintRequestOneOf3
	}

	if obj.AddBlueprintRequestOneOf4 != nil {
		return *obj.AddBlueprintRequestOneOf4
	}

	if obj.AddBlueprintRequestOneOf5 != nil {
		return *obj.AddBlueprintRequestOneOf5
	}

	// all schemas are nil
	return nil
}

type NullableAddBlueprintRequest struct {
	value *AddBlueprintRequest
	isSet bool
}

func (v NullableAddBlueprintRequest) Get() *AddBlueprintRequest {
	return v.value
}

func (v *NullableAddBlueprintRequest) Set(val *AddBlueprintRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddBlueprintRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddBlueprintRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddBlueprintRequest(val *AddBlueprintRequest) *NullableAddBlueprintRequest {
	return &NullableAddBlueprintRequest{value: val, isSet: true}
}

func (v NullableAddBlueprintRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddBlueprintRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


