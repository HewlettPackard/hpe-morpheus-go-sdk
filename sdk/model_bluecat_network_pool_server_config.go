/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the BluecatNetworkPoolServerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BluecatNetworkPoolServerConfig{}

// BluecatNetworkPoolServerConfig struct for BluecatNetworkPoolServerConfig
type BluecatNetworkPoolServerConfig struct {
	// Inventory Existing
	InventoryExisting *string `json:"inventoryExisting,omitempty"`
}

// NewBluecatNetworkPoolServerConfig instantiates a new BluecatNetworkPoolServerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBluecatNetworkPoolServerConfig() *BluecatNetworkPoolServerConfig {
	this := BluecatNetworkPoolServerConfig{}
	var inventoryExisting string = "off"
	this.InventoryExisting = &inventoryExisting
	return &this
}

// NewBluecatNetworkPoolServerConfigWithDefaults instantiates a new BluecatNetworkPoolServerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBluecatNetworkPoolServerConfigWithDefaults() *BluecatNetworkPoolServerConfig {
	this := BluecatNetworkPoolServerConfig{}
	var inventoryExisting string = "off"
	this.InventoryExisting = &inventoryExisting
	return &this
}

// GetInventoryExisting returns the InventoryExisting field value if set, zero value otherwise.
func (o *BluecatNetworkPoolServerConfig) GetInventoryExisting() string {
	if o == nil || IsNil(o.InventoryExisting) {
		var ret string
		return ret
	}
	return *o.InventoryExisting
}

// GetInventoryExistingOk returns a tuple with the InventoryExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BluecatNetworkPoolServerConfig) GetInventoryExistingOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryExisting) {
		return nil, false
	}
	return o.InventoryExisting, true
}

// IsSetInventoryExisting returns a boolean if a field has been set.
func (o *BluecatNetworkPoolServerConfig) IsSetInventoryExisting() bool {
	if o != nil && !IsNil(o.InventoryExisting) {
		return true
	}

	return false
}

// SetInventoryExisting gets a reference to the given string and assigns it to the InventoryExisting field.
func (o *BluecatNetworkPoolServerConfig) SetInventoryExisting(v string) {
	o.InventoryExisting = &v
}

func (o BluecatNetworkPoolServerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BluecatNetworkPoolServerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InventoryExisting) {
		toSerialize["inventoryExisting"] = o.InventoryExisting
	}
	return toSerialize, nil
}

type NullableBluecatNetworkPoolServerConfig struct {
	value *BluecatNetworkPoolServerConfig
	isSet bool
}

func (v NullableBluecatNetworkPoolServerConfig) Get() *BluecatNetworkPoolServerConfig {
	return v.value
}

func (v *NullableBluecatNetworkPoolServerConfig) Set(val *BluecatNetworkPoolServerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBluecatNetworkPoolServerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBluecatNetworkPoolServerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBluecatNetworkPoolServerConfig(val *BluecatNetworkPoolServerConfig) *NullableBluecatNetworkPoolServerConfig {
	return &NullableBluecatNetworkPoolServerConfig{value: val, isSet: true}
}

func (v NullableBluecatNetworkPoolServerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBluecatNetworkPoolServerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


