/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2{}

// UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2 struct for UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2
type UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2 struct {
	// Catalog Item Type name
	Name *string `json:"name,omitempty"`
	// Useful shortcode for provisioning naming schemes and export reference.
	Code *string `json:"code,omitempty"`
	// Catalog Item Type category
	Category *string `json:"category,omitempty"`
	// Catalog Item Type description
	Description *string `json:"description,omitempty"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
	// Type, `instance`, `blueprint` or `workflow`. This determines whether an Instance or App will be provisioned. Instance types require a config and blueprint requires a blueprint and appSpec, while workflow types requires a workflow and context.
	Type *string `json:"type,omitempty"`
	// Visibility - Set to public to allow all tenants
	Visibility *string `json:"visibility,omitempty"`
	// Identifier primarily used for Plugin Catalog Item Types
	LayoutCode *string `json:"layoutCode,omitempty"`
	// Icon Path, relative location of an icon image, eg. /assets/containers-png/nginx.png.
	IconPath *string `json:"iconPath,omitempty"`
	// Can be used to enable / disable the catalog item type.
	Enabled *bool `json:"enabled,omitempty"`
	// Can be used to feature the catalog item type.
	Featured *bool `json:"featured,omitempty"`
	// Can users order more than one of this item at a time.
	AllowQuantity *bool `json:"allowQuantity,omitempty"`
	Workflow *GetAlerts200ResponseAllOfChecksInnerAccount `json:"workflow,omitempty"`
	// Context for running the workflow, determines if a target resource must be selected.
	Context *string `json:"context,omitempty"`
	// Configuration object that contains settings for the workflow.
	WorkflowConfig *string `json:"workflowConfig,omitempty"`
	// Form Type determines if the configuration options come from a Form (form) or a list of Inputs (optionTypes).
	FormType *string `json:"formType,omitempty"`
	Form *AddCatalogItemTypeRequestCatalogItemTypeOneOfForm `json:"form,omitempty"`
	// Array of option type IDs. Only applies to formType 'optionTypes'.
	OptionTypes []int64 `json:"optionTypes,omitempty"`
	// Documentation content for this Catalog Item. Markdown-formatted text is accepted and displayed appropriately when the item is ordered from the Service Catalog. A new Catalog Item-type Wiki entry will also be added containing this information.
	Content *string `json:"content,omitempty"`
}

// NewUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2 instantiates a new UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2() *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2 {
	this := UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2{}
	var visibility string = "private"
	this.Visibility = &visibility
	var enabled bool = true
	this.Enabled = &enabled
	var featured bool = false
	this.Featured = &featured
	var allowQuantity bool = false
	this.AllowQuantity = &allowQuantity
	var formType string = "optionTypes"
	this.FormType = &formType
	return &this
}

// NewUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2WithDefaults instantiates a new UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2WithDefaults() *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2 {
	this := UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2{}
	var visibility string = "private"
	this.Visibility = &visibility
	var enabled bool = true
	this.Enabled = &enabled
	var featured bool = false
	this.Featured = &featured
	var allowQuantity bool = false
	this.AllowQuantity = &allowQuantity
	var formType string = "optionTypes"
	this.FormType = &formType
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetName(v string) {
	o.Name = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// IsSetCode returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetCode(v string) {
	o.Code = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// IsSetCategory returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetCategory(v string) {
	o.Category = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetDescription(v string) {
	o.Description = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// IsSetLabels returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetLabels(v []string) {
	o.Labels = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// IsSetType returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetType(v string) {
	o.Type = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// IsSetVisibility returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetVisibility(v string) {
	o.Visibility = &v
}

// GetLayoutCode returns the LayoutCode field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetLayoutCode() string {
	if o == nil || IsNil(o.LayoutCode) {
		var ret string
		return ret
	}
	return *o.LayoutCode
}

// GetLayoutCodeOk returns a tuple with the LayoutCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetLayoutCodeOk() (*string, bool) {
	if o == nil || IsNil(o.LayoutCode) {
		return nil, false
	}
	return o.LayoutCode, true
}

// IsSetLayoutCode returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetLayoutCode() bool {
	if o != nil && !IsNil(o.LayoutCode) {
		return true
	}

	return false
}

// SetLayoutCode gets a reference to the given string and assigns it to the LayoutCode field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetLayoutCode(v string) {
	o.LayoutCode = &v
}

// GetIconPath returns the IconPath field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetIconPath() string {
	if o == nil || IsNil(o.IconPath) {
		var ret string
		return ret
	}
	return *o.IconPath
}

// GetIconPathOk returns a tuple with the IconPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetIconPathOk() (*string, bool) {
	if o == nil || IsNil(o.IconPath) {
		return nil, false
	}
	return o.IconPath, true
}

// IsSetIconPath returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetIconPath() bool {
	if o != nil && !IsNil(o.IconPath) {
		return true
	}

	return false
}

// SetIconPath gets a reference to the given string and assigns it to the IconPath field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetIconPath(v string) {
	o.IconPath = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// IsSetEnabled returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFeatured returns the Featured field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetFeatured() bool {
	if o == nil || IsNil(o.Featured) {
		var ret bool
		return ret
	}
	return *o.Featured
}

// GetFeaturedOk returns a tuple with the Featured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetFeaturedOk() (*bool, bool) {
	if o == nil || IsNil(o.Featured) {
		return nil, false
	}
	return o.Featured, true
}

// IsSetFeatured returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetFeatured() bool {
	if o != nil && !IsNil(o.Featured) {
		return true
	}

	return false
}

// SetFeatured gets a reference to the given bool and assigns it to the Featured field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetFeatured(v bool) {
	o.Featured = &v
}

// GetAllowQuantity returns the AllowQuantity field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetAllowQuantity() bool {
	if o == nil || IsNil(o.AllowQuantity) {
		var ret bool
		return ret
	}
	return *o.AllowQuantity
}

// GetAllowQuantityOk returns a tuple with the AllowQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetAllowQuantityOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowQuantity) {
		return nil, false
	}
	return o.AllowQuantity, true
}

// IsSetAllowQuantity returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetAllowQuantity() bool {
	if o != nil && !IsNil(o.AllowQuantity) {
		return true
	}

	return false
}

// SetAllowQuantity gets a reference to the given bool and assigns it to the AllowQuantity field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetAllowQuantity(v bool) {
	o.AllowQuantity = &v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetWorkflow() GetAlerts200ResponseAllOfChecksInnerAccount {
	if o == nil || IsNil(o.Workflow) {
		var ret GetAlerts200ResponseAllOfChecksInnerAccount
		return ret
	}
	return *o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetWorkflowOk() (*GetAlerts200ResponseAllOfChecksInnerAccount, bool) {
	if o == nil || IsNil(o.Workflow) {
		return nil, false
	}
	return o.Workflow, true
}

// IsSetWorkflow returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetWorkflow() bool {
	if o != nil && !IsNil(o.Workflow) {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given GetAlerts200ResponseAllOfChecksInnerAccount and assigns it to the Workflow field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetWorkflow(v GetAlerts200ResponseAllOfChecksInnerAccount) {
	o.Workflow = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// IsSetContext returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetContext(v string) {
	o.Context = &v
}

// GetWorkflowConfig returns the WorkflowConfig field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetWorkflowConfig() string {
	if o == nil || IsNil(o.WorkflowConfig) {
		var ret string
		return ret
	}
	return *o.WorkflowConfig
}

// GetWorkflowConfigOk returns a tuple with the WorkflowConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetWorkflowConfigOk() (*string, bool) {
	if o == nil || IsNil(o.WorkflowConfig) {
		return nil, false
	}
	return o.WorkflowConfig, true
}

// IsSetWorkflowConfig returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetWorkflowConfig() bool {
	if o != nil && !IsNil(o.WorkflowConfig) {
		return true
	}

	return false
}

// SetWorkflowConfig gets a reference to the given string and assigns it to the WorkflowConfig field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetWorkflowConfig(v string) {
	o.WorkflowConfig = &v
}

// GetFormType returns the FormType field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetFormType() string {
	if o == nil || IsNil(o.FormType) {
		var ret string
		return ret
	}
	return *o.FormType
}

// GetFormTypeOk returns a tuple with the FormType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetFormTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FormType) {
		return nil, false
	}
	return o.FormType, true
}

// IsSetFormType returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetFormType() bool {
	if o != nil && !IsNil(o.FormType) {
		return true
	}

	return false
}

// SetFormType gets a reference to the given string and assigns it to the FormType field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetFormType(v string) {
	o.FormType = &v
}

// GetForm returns the Form field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetForm() AddCatalogItemTypeRequestCatalogItemTypeOneOfForm {
	if o == nil || IsNil(o.Form) {
		var ret AddCatalogItemTypeRequestCatalogItemTypeOneOfForm
		return ret
	}
	return *o.Form
}

// GetFormOk returns a tuple with the Form field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetFormOk() (*AddCatalogItemTypeRequestCatalogItemTypeOneOfForm, bool) {
	if o == nil || IsNil(o.Form) {
		return nil, false
	}
	return o.Form, true
}

// IsSetForm returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetForm() bool {
	if o != nil && !IsNil(o.Form) {
		return true
	}

	return false
}

// SetForm gets a reference to the given AddCatalogItemTypeRequestCatalogItemTypeOneOfForm and assigns it to the Form field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetForm(v AddCatalogItemTypeRequestCatalogItemTypeOneOfForm) {
	o.Form = &v
}

// GetOptionTypes returns the OptionTypes field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetOptionTypes() []int64 {
	if o == nil || IsNil(o.OptionTypes) {
		var ret []int64
		return ret
	}
	return o.OptionTypes
}

// GetOptionTypesOk returns a tuple with the OptionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetOptionTypesOk() ([]int64, bool) {
	if o == nil || IsNil(o.OptionTypes) {
		return nil, false
	}
	return o.OptionTypes, true
}

// IsSetOptionTypes returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetOptionTypes() bool {
	if o != nil && !IsNil(o.OptionTypes) {
		return true
	}

	return false
}

// SetOptionTypes gets a reference to the given []int64 and assigns it to the OptionTypes field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetOptionTypes(v []int64) {
	o.OptionTypes = v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// IsSetContent returns a boolean if a field has been set.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSetContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) SetContent(v string) {
	o.Content = &v
}

func (o UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.LayoutCode) {
		toSerialize["layoutCode"] = o.LayoutCode
	}
	if !IsNil(o.IconPath) {
		toSerialize["iconPath"] = o.IconPath
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Featured) {
		toSerialize["featured"] = o.Featured
	}
	if !IsNil(o.AllowQuantity) {
		toSerialize["allowQuantity"] = o.AllowQuantity
	}
	if !IsNil(o.Workflow) {
		toSerialize["workflow"] = o.Workflow
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.WorkflowConfig) {
		toSerialize["workflowConfig"] = o.WorkflowConfig
	}
	if !IsNil(o.FormType) {
		toSerialize["formType"] = o.FormType
	}
	if !IsNil(o.Form) {
		toSerialize["form"] = o.Form
	}
	if !IsNil(o.OptionTypes) {
		toSerialize["optionTypes"] = o.OptionTypes
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

type NullableUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2 struct {
	value *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2
	isSet bool
}

func (v NullableUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) Get() *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2 {
	return v.value
}

func (v *NullableUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) Set(val *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2(val *UpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) *NullableUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2 {
	return &NullableUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2{value: val, isSet: true}
}

func (v NullableUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCatalogItemTypeRequestCatalogItemTypeAnyOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


