/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NetworkServerCreateNSX type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkServerCreateNSX{}

// NetworkServerCreateNSX struct for NetworkServerCreateNSX
type NetworkServerCreateNSX struct {
	// Type Code (nsx-t)
	Type string `json:"type"`
	// Name
	Name string `json:"name"`
	// Can be used to enable / disable the network server.
	Enabled *bool `json:"enabled,omitempty"`
	// URL
	ServiceUrl string `json:"serviceUrl"`
	// Username
	ServiceUsername *string `json:"serviceUsername,omitempty"`
	// Password
	ServicePassword *string `json:"servicePassword,omitempty"`
	Config *NSXNetworkServerConfig `json:"config,omitempty"`
	// Visibility - Set to public to allow all tenants
	Visibility *string `json:"visibility,omitempty"`
	// ID of the Cloud that the NSX network server integration should be attached to.
	ZoneId int64 `json:"zoneId"`
	Credential *NSXNetworkServerCredential `json:"credential,omitempty"`
	// Array of tenant account ids that are allowed access
	Tenants []GetAlerts200ResponseAllOfChecksInnerAccount `json:"tenants,omitempty"`
}

type _NetworkServerCreateNSX NetworkServerCreateNSX

// NewNetworkServerCreateNSX instantiates a new NetworkServerCreateNSX object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkServerCreateNSX(type_ string, name string, serviceUrl string, zoneId int64) *NetworkServerCreateNSX {
	this := NetworkServerCreateNSX{}
	this.Type = type_
	this.Name = name
	var enabled bool = true
	this.Enabled = &enabled
	this.ServiceUrl = serviceUrl
	var visibility string = "private"
	this.Visibility = &visibility
	this.ZoneId = zoneId
	return &this
}

// NewNetworkServerCreateNSXWithDefaults instantiates a new NetworkServerCreateNSX object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkServerCreateNSXWithDefaults() *NetworkServerCreateNSX {
	this := NetworkServerCreateNSX{}
	var enabled bool = true
	this.Enabled = &enabled
	var visibility string = "private"
	this.Visibility = &visibility
	return &this
}

// GetType returns the Type field value
func (o *NetworkServerCreateNSX) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NetworkServerCreateNSX) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NetworkServerCreateNSX) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *NetworkServerCreateNSX) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NetworkServerCreateNSX) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NetworkServerCreateNSX) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NetworkServerCreateNSX) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkServerCreateNSX) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// IsSetEnabled returns a boolean if a field has been set.
func (o *NetworkServerCreateNSX) IsSetEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NetworkServerCreateNSX) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetServiceUrl returns the ServiceUrl field value
func (o *NetworkServerCreateNSX) GetServiceUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceUrl
}

// GetServiceUrlOk returns a tuple with the ServiceUrl field value
// and a boolean to check if the value has been set.
func (o *NetworkServerCreateNSX) GetServiceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceUrl, true
}

// SetServiceUrl sets field value
func (o *NetworkServerCreateNSX) SetServiceUrl(v string) {
	o.ServiceUrl = v
}

// GetServiceUsername returns the ServiceUsername field value if set, zero value otherwise.
func (o *NetworkServerCreateNSX) GetServiceUsername() string {
	if o == nil || IsNil(o.ServiceUsername) {
		var ret string
		return ret
	}
	return *o.ServiceUsername
}

// GetServiceUsernameOk returns a tuple with the ServiceUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkServerCreateNSX) GetServiceUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceUsername) {
		return nil, false
	}
	return o.ServiceUsername, true
}

// IsSetServiceUsername returns a boolean if a field has been set.
func (o *NetworkServerCreateNSX) IsSetServiceUsername() bool {
	if o != nil && !IsNil(o.ServiceUsername) {
		return true
	}

	return false
}

// SetServiceUsername gets a reference to the given string and assigns it to the ServiceUsername field.
func (o *NetworkServerCreateNSX) SetServiceUsername(v string) {
	o.ServiceUsername = &v
}

// GetServicePassword returns the ServicePassword field value if set, zero value otherwise.
func (o *NetworkServerCreateNSX) GetServicePassword() string {
	if o == nil || IsNil(o.ServicePassword) {
		var ret string
		return ret
	}
	return *o.ServicePassword
}

// GetServicePasswordOk returns a tuple with the ServicePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkServerCreateNSX) GetServicePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ServicePassword) {
		return nil, false
	}
	return o.ServicePassword, true
}

// IsSetServicePassword returns a boolean if a field has been set.
func (o *NetworkServerCreateNSX) IsSetServicePassword() bool {
	if o != nil && !IsNil(o.ServicePassword) {
		return true
	}

	return false
}

// SetServicePassword gets a reference to the given string and assigns it to the ServicePassword field.
func (o *NetworkServerCreateNSX) SetServicePassword(v string) {
	o.ServicePassword = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *NetworkServerCreateNSX) GetConfig() NSXNetworkServerConfig {
	if o == nil || IsNil(o.Config) {
		var ret NSXNetworkServerConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkServerCreateNSX) GetConfigOk() (*NSXNetworkServerConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// IsSetConfig returns a boolean if a field has been set.
func (o *NetworkServerCreateNSX) IsSetConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given NSXNetworkServerConfig and assigns it to the Config field.
func (o *NetworkServerCreateNSX) SetConfig(v NSXNetworkServerConfig) {
	o.Config = &v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *NetworkServerCreateNSX) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkServerCreateNSX) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// IsSetVisibility returns a boolean if a field has been set.
func (o *NetworkServerCreateNSX) IsSetVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *NetworkServerCreateNSX) SetVisibility(v string) {
	o.Visibility = &v
}

// GetZoneId returns the ZoneId field value
func (o *NetworkServerCreateNSX) GetZoneId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value
// and a boolean to check if the value has been set.
func (o *NetworkServerCreateNSX) GetZoneIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZoneId, true
}

// SetZoneId sets field value
func (o *NetworkServerCreateNSX) SetZoneId(v int64) {
	o.ZoneId = v
}

// GetCredential returns the Credential field value if set, zero value otherwise.
func (o *NetworkServerCreateNSX) GetCredential() NSXNetworkServerCredential {
	if o == nil || IsNil(o.Credential) {
		var ret NSXNetworkServerCredential
		return ret
	}
	return *o.Credential
}

// GetCredentialOk returns a tuple with the Credential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkServerCreateNSX) GetCredentialOk() (*NSXNetworkServerCredential, bool) {
	if o == nil || IsNil(o.Credential) {
		return nil, false
	}
	return o.Credential, true
}

// IsSetCredential returns a boolean if a field has been set.
func (o *NetworkServerCreateNSX) IsSetCredential() bool {
	if o != nil && !IsNil(o.Credential) {
		return true
	}

	return false
}

// SetCredential gets a reference to the given NSXNetworkServerCredential and assigns it to the Credential field.
func (o *NetworkServerCreateNSX) SetCredential(v NSXNetworkServerCredential) {
	o.Credential = &v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *NetworkServerCreateNSX) GetTenants() []GetAlerts200ResponseAllOfChecksInnerAccount {
	if o == nil || IsNil(o.Tenants) {
		var ret []GetAlerts200ResponseAllOfChecksInnerAccount
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkServerCreateNSX) GetTenantsOk() ([]GetAlerts200ResponseAllOfChecksInnerAccount, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// IsSetTenants returns a boolean if a field has been set.
func (o *NetworkServerCreateNSX) IsSetTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []GetAlerts200ResponseAllOfChecksInnerAccount and assigns it to the Tenants field.
func (o *NetworkServerCreateNSX) SetTenants(v []GetAlerts200ResponseAllOfChecksInnerAccount) {
	o.Tenants = v
}

func (o NetworkServerCreateNSX) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkServerCreateNSX) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	toSerialize["serviceUrl"] = o.ServiceUrl
	if !IsNil(o.ServiceUsername) {
		toSerialize["serviceUsername"] = o.ServiceUsername
	}
	if !IsNil(o.ServicePassword) {
		toSerialize["servicePassword"] = o.ServicePassword
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	toSerialize["zoneId"] = o.ZoneId
	if !IsNil(o.Credential) {
		toSerialize["credential"] = o.Credential
	}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	return toSerialize, nil
}

func (o *NetworkServerCreateNSX) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"name",
		"serviceUrl",
		"zoneId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkServerCreateNSX := _NetworkServerCreateNSX{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkServerCreateNSX)

	if err != nil {
		return err
	}

	*o = NetworkServerCreateNSX(varNetworkServerCreateNSX)

	return err
}

type NullableNetworkServerCreateNSX struct {
	value *NetworkServerCreateNSX
	isSet bool
}

func (v NullableNetworkServerCreateNSX) Get() *NetworkServerCreateNSX {
	return v.value
}

func (v *NullableNetworkServerCreateNSX) Set(val *NetworkServerCreateNSX) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkServerCreateNSX) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkServerCreateNSX) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkServerCreateNSX(val *NetworkServerCreateNSX) *NullableNetworkServerCreateNSX {
	return &NullableNetworkServerCreateNSX{value: val, isSet: true}
}

func (v NullableNetworkServerCreateNSX) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkServerCreateNSX) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


