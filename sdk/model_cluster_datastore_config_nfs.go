/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ClusterDatastoreConfigNFS type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterDatastoreConfigNFS{}

// ClusterDatastoreConfigNFS struct for ClusterDatastoreConfigNFS
type ClusterDatastoreConfigNFS struct {
	// Host name or IP address for target NFS instance.
	SourceHostname *string `json:"sourceHostname,omitempty"`
	// Path to the target NFS export directory.
	SourceDirPath        *string                `json:"sourceDirPath,omitempty"`
	AdditionalProperties map[string]interface{} `json:",remain"`
}

type _ClusterDatastoreConfigNFS ClusterDatastoreConfigNFS

// NewClusterDatastoreConfigNFS instantiates a new ClusterDatastoreConfigNFS object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterDatastoreConfigNFS() *ClusterDatastoreConfigNFS {
	this := ClusterDatastoreConfigNFS{}
	return &this
}

// NewClusterDatastoreConfigNFSWithDefaults instantiates a new ClusterDatastoreConfigNFS object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterDatastoreConfigNFSWithDefaults() *ClusterDatastoreConfigNFS {
	this := ClusterDatastoreConfigNFS{}
	return &this
}

// GetSourceHostname returns the SourceHostname field value if set, zero value otherwise.
func (o *ClusterDatastoreConfigNFS) GetSourceHostname() string {
	if o == nil || IsNil(o.SourceHostname) {
		var ret string
		return ret
	}
	return *o.SourceHostname
}

// GetSourceHostnameOk returns a tuple with the SourceHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterDatastoreConfigNFS) GetSourceHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceHostname) {
		return nil, false
	}
	return o.SourceHostname, true
}

// IsSetSourceHostname returns a boolean if a field has been set.
func (o *ClusterDatastoreConfigNFS) IsSetSourceHostname() bool {
	if o != nil && !IsNil(o.SourceHostname) {
		return true
	}

	return false
}

// SetSourceHostname gets a reference to the given string and assigns it to the SourceHostname field.
func (o *ClusterDatastoreConfigNFS) SetSourceHostname(v string) {
	o.SourceHostname = &v
}

// GetSourceDirPath returns the SourceDirPath field value if set, zero value otherwise.
func (o *ClusterDatastoreConfigNFS) GetSourceDirPath() string {
	if o == nil || IsNil(o.SourceDirPath) {
		var ret string
		return ret
	}
	return *o.SourceDirPath
}

// GetSourceDirPathOk returns a tuple with the SourceDirPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterDatastoreConfigNFS) GetSourceDirPathOk() (*string, bool) {
	if o == nil || IsNil(o.SourceDirPath) {
		return nil, false
	}
	return o.SourceDirPath, true
}

// IsSetSourceDirPath returns a boolean if a field has been set.
func (o *ClusterDatastoreConfigNFS) IsSetSourceDirPath() bool {
	if o != nil && !IsNil(o.SourceDirPath) {
		return true
	}

	return false
}

// SetSourceDirPath gets a reference to the given string and assigns it to the SourceDirPath field.
func (o *ClusterDatastoreConfigNFS) SetSourceDirPath(v string) {
	o.SourceDirPath = &v
}

func (o ClusterDatastoreConfigNFS) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterDatastoreConfigNFS) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceHostname) {
		toSerialize["sourceHostname"] = o.SourceHostname
	}
	if !IsNil(o.SourceDirPath) {
		toSerialize["sourceDirPath"] = o.SourceDirPath
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *ClusterDatastoreConfigNFS) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
