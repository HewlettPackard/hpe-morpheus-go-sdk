/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunReportsRequestReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunReportsRequestReport{}

// RunReportsRequestReport struct for RunReportsRequestReport
type RunReportsRequestReport struct {
	// Code value for the report type you want to run
	Type string `json:"type"`
	StartDate *string `json:"startDate,omitempty"`
	EndDate *string `json:"endDate,omitempty"`
	StartMonth *string `json:"startMonth,omitempty"`
	EndMonth *string `json:"endMonth,omitempty"`
	// The Group ID filter for the report
	GroupId *float32 `json:"groupId,omitempty"`
	// The Cloud ID filter for the report
	CloudId *float32 `json:"cloudId,omitempty"`
}

type _RunReportsRequestReport RunReportsRequestReport

// NewRunReportsRequestReport instantiates a new RunReportsRequestReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunReportsRequestReport(type_ string) *RunReportsRequestReport {
	this := RunReportsRequestReport{}
	this.Type = type_
	return &this
}

// NewRunReportsRequestReportWithDefaults instantiates a new RunReportsRequestReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunReportsRequestReportWithDefaults() *RunReportsRequestReport {
	this := RunReportsRequestReport{}
	return &this
}

// GetType returns the Type field value
func (o *RunReportsRequestReport) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RunReportsRequestReport) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RunReportsRequestReport) SetType(v string) {
	o.Type = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *RunReportsRequestReport) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunReportsRequestReport) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// IsSetStartDate returns a boolean if a field has been set.
func (o *RunReportsRequestReport) IsSetStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *RunReportsRequestReport) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *RunReportsRequestReport) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunReportsRequestReport) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// IsSetEndDate returns a boolean if a field has been set.
func (o *RunReportsRequestReport) IsSetEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *RunReportsRequestReport) SetEndDate(v string) {
	o.EndDate = &v
}

// GetStartMonth returns the StartMonth field value if set, zero value otherwise.
func (o *RunReportsRequestReport) GetStartMonth() string {
	if o == nil || IsNil(o.StartMonth) {
		var ret string
		return ret
	}
	return *o.StartMonth
}

// GetStartMonthOk returns a tuple with the StartMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunReportsRequestReport) GetStartMonthOk() (*string, bool) {
	if o == nil || IsNil(o.StartMonth) {
		return nil, false
	}
	return o.StartMonth, true
}

// IsSetStartMonth returns a boolean if a field has been set.
func (o *RunReportsRequestReport) IsSetStartMonth() bool {
	if o != nil && !IsNil(o.StartMonth) {
		return true
	}

	return false
}

// SetStartMonth gets a reference to the given string and assigns it to the StartMonth field.
func (o *RunReportsRequestReport) SetStartMonth(v string) {
	o.StartMonth = &v
}

// GetEndMonth returns the EndMonth field value if set, zero value otherwise.
func (o *RunReportsRequestReport) GetEndMonth() string {
	if o == nil || IsNil(o.EndMonth) {
		var ret string
		return ret
	}
	return *o.EndMonth
}

// GetEndMonthOk returns a tuple with the EndMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunReportsRequestReport) GetEndMonthOk() (*string, bool) {
	if o == nil || IsNil(o.EndMonth) {
		return nil, false
	}
	return o.EndMonth, true
}

// IsSetEndMonth returns a boolean if a field has been set.
func (o *RunReportsRequestReport) IsSetEndMonth() bool {
	if o != nil && !IsNil(o.EndMonth) {
		return true
	}

	return false
}

// SetEndMonth gets a reference to the given string and assigns it to the EndMonth field.
func (o *RunReportsRequestReport) SetEndMonth(v string) {
	o.EndMonth = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *RunReportsRequestReport) GetGroupId() float32 {
	if o == nil || IsNil(o.GroupId) {
		var ret float32
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunReportsRequestReport) GetGroupIdOk() (*float32, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// IsSetGroupId returns a boolean if a field has been set.
func (o *RunReportsRequestReport) IsSetGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given float32 and assigns it to the GroupId field.
func (o *RunReportsRequestReport) SetGroupId(v float32) {
	o.GroupId = &v
}

// GetCloudId returns the CloudId field value if set, zero value otherwise.
func (o *RunReportsRequestReport) GetCloudId() float32 {
	if o == nil || IsNil(o.CloudId) {
		var ret float32
		return ret
	}
	return *o.CloudId
}

// GetCloudIdOk returns a tuple with the CloudId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunReportsRequestReport) GetCloudIdOk() (*float32, bool) {
	if o == nil || IsNil(o.CloudId) {
		return nil, false
	}
	return o.CloudId, true
}

// IsSetCloudId returns a boolean if a field has been set.
func (o *RunReportsRequestReport) IsSetCloudId() bool {
	if o != nil && !IsNil(o.CloudId) {
		return true
	}

	return false
}

// SetCloudId gets a reference to the given float32 and assigns it to the CloudId field.
func (o *RunReportsRequestReport) SetCloudId(v float32) {
	o.CloudId = &v
}

func (o RunReportsRequestReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunReportsRequestReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.StartMonth) {
		toSerialize["startMonth"] = o.StartMonth
	}
	if !IsNil(o.EndMonth) {
		toSerialize["endMonth"] = o.EndMonth
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.CloudId) {
		toSerialize["cloudId"] = o.CloudId
	}
	return toSerialize, nil
}

func (o *RunReportsRequestReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunReportsRequestReport := _RunReportsRequestReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunReportsRequestReport)

	if err != nil {
		return err
	}

	*o = RunReportsRequestReport(varRunReportsRequestReport)

	return err
}

type NullableRunReportsRequestReport struct {
	value *RunReportsRequestReport
	isSet bool
}

func (v NullableRunReportsRequestReport) Get() *RunReportsRequestReport {
	return v.value
}

func (v *NullableRunReportsRequestReport) Set(val *RunReportsRequestReport) {
	v.value = val
	v.isSet = true
}

func (v NullableRunReportsRequestReport) IsSet() bool {
	return v.isSet
}

func (v *NullableRunReportsRequestReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunReportsRequestReport(val *RunReportsRequestReport) *NullableRunReportsRequestReport {
	return &NullableRunReportsRequestReport{value: val, isSet: true}
}

func (v NullableRunReportsRequestReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunReportsRequestReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


