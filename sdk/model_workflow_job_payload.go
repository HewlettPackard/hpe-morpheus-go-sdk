/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the WorkflowJobPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkflowJobPayload{}

// WorkflowJobPayload struct for WorkflowJobPayload
type WorkflowJobPayload struct {
	// A name for the Job
	Name string `json:"name"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
	// Use this to set enabled state
	Enabled *bool `json:"enabled,omitempty"`
	Task *WorkflowJobPayloadTask `json:"task,omitempty"`
	Workflow WorkflowJobPayloadTask `json:"workflow"`
	// Target type where job will execute
	TargetType string `json:"targetType"`
	Targets []WorkflowJobPayloadTargetsInner `json:"targets,omitempty"`
	// Instance Label. Only applicable if `targetType` is `instance-label`.
	InstanceLabel *string `json:"instanceLabel,omitempty"`
	// Server Label. Only applicable if `targetType` is `server-label`.
	ServerLabel *string `json:"serverLabel,omitempty"`
	ScheduleMode WorkflowJobPayloadScheduleMode `json:"scheduleMode"`
	// Map of options to be used as values in the workflow tasks. These correspond to option types.
	CustomOptions map[string]interface{} `json:"customOptions,omitempty"`
	// Job custom configuration (String in JSON format)
	CustomConfig *string `json:"customConfig,omitempty"`
	// Date and Time to execute the job. Use UTC time in the format 2020-02-15T05:00:00Z. Required when scheduleMode is 'dateTime'.
	DateTime *time.Time `json:"dateTime,omitempty"`
	// If true, executes job
	Run *bool `json:"run,omitempty"`
}

type _WorkflowJobPayload WorkflowJobPayload

// NewWorkflowJobPayload instantiates a new WorkflowJobPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowJobPayload(name string, workflow WorkflowJobPayloadTask, targetType string, scheduleMode WorkflowJobPayloadScheduleMode) *WorkflowJobPayload {
	this := WorkflowJobPayload{}
	this.Name = name
	var enabled bool = true
	this.Enabled = &enabled
	this.Workflow = workflow
	this.TargetType = targetType
	this.ScheduleMode = scheduleMode
	return &this
}

// NewWorkflowJobPayloadWithDefaults instantiates a new WorkflowJobPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowJobPayloadWithDefaults() *WorkflowJobPayload {
	this := WorkflowJobPayload{}
	var enabled bool = true
	this.Enabled = &enabled
	return &this
}

// GetName returns the Name field value
func (o *WorkflowJobPayload) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WorkflowJobPayload) SetName(v string) {
	o.Name = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *WorkflowJobPayload) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// IsSetLabels returns a boolean if a field has been set.
func (o *WorkflowJobPayload) IsSetLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *WorkflowJobPayload) SetLabels(v []string) {
	o.Labels = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *WorkflowJobPayload) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// IsSetEnabled returns a boolean if a field has been set.
func (o *WorkflowJobPayload) IsSetEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *WorkflowJobPayload) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetTask returns the Task field value if set, zero value otherwise.
func (o *WorkflowJobPayload) GetTask() WorkflowJobPayloadTask {
	if o == nil || IsNil(o.Task) {
		var ret WorkflowJobPayloadTask
		return ret
	}
	return *o.Task
}

// GetTaskOk returns a tuple with the Task field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetTaskOk() (*WorkflowJobPayloadTask, bool) {
	if o == nil || IsNil(o.Task) {
		return nil, false
	}
	return o.Task, true
}

// IsSetTask returns a boolean if a field has been set.
func (o *WorkflowJobPayload) IsSetTask() bool {
	if o != nil && !IsNil(o.Task) {
		return true
	}

	return false
}

// SetTask gets a reference to the given WorkflowJobPayloadTask and assigns it to the Task field.
func (o *WorkflowJobPayload) SetTask(v WorkflowJobPayloadTask) {
	o.Task = &v
}

// GetWorkflow returns the Workflow field value
func (o *WorkflowJobPayload) GetWorkflow() WorkflowJobPayloadTask {
	if o == nil {
		var ret WorkflowJobPayloadTask
		return ret
	}

	return o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetWorkflowOk() (*WorkflowJobPayloadTask, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workflow, true
}

// SetWorkflow sets field value
func (o *WorkflowJobPayload) SetWorkflow(v WorkflowJobPayloadTask) {
	o.Workflow = v
}

// GetTargetType returns the TargetType field value
func (o *WorkflowJobPayload) GetTargetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetType
}

// GetTargetTypeOk returns a tuple with the TargetType field value
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetTargetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetType, true
}

// SetTargetType sets field value
func (o *WorkflowJobPayload) SetTargetType(v string) {
	o.TargetType = v
}

// GetTargets returns the Targets field value if set, zero value otherwise.
func (o *WorkflowJobPayload) GetTargets() []WorkflowJobPayloadTargetsInner {
	if o == nil || IsNil(o.Targets) {
		var ret []WorkflowJobPayloadTargetsInner
		return ret
	}
	return o.Targets
}

// GetTargetsOk returns a tuple with the Targets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetTargetsOk() ([]WorkflowJobPayloadTargetsInner, bool) {
	if o == nil || IsNil(o.Targets) {
		return nil, false
	}
	return o.Targets, true
}

// IsSetTargets returns a boolean if a field has been set.
func (o *WorkflowJobPayload) IsSetTargets() bool {
	if o != nil && !IsNil(o.Targets) {
		return true
	}

	return false
}

// SetTargets gets a reference to the given []WorkflowJobPayloadTargetsInner and assigns it to the Targets field.
func (o *WorkflowJobPayload) SetTargets(v []WorkflowJobPayloadTargetsInner) {
	o.Targets = v
}

// GetInstanceLabel returns the InstanceLabel field value if set, zero value otherwise.
func (o *WorkflowJobPayload) GetInstanceLabel() string {
	if o == nil || IsNil(o.InstanceLabel) {
		var ret string
		return ret
	}
	return *o.InstanceLabel
}

// GetInstanceLabelOk returns a tuple with the InstanceLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetInstanceLabelOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceLabel) {
		return nil, false
	}
	return o.InstanceLabel, true
}

// IsSetInstanceLabel returns a boolean if a field has been set.
func (o *WorkflowJobPayload) IsSetInstanceLabel() bool {
	if o != nil && !IsNil(o.InstanceLabel) {
		return true
	}

	return false
}

// SetInstanceLabel gets a reference to the given string and assigns it to the InstanceLabel field.
func (o *WorkflowJobPayload) SetInstanceLabel(v string) {
	o.InstanceLabel = &v
}

// GetServerLabel returns the ServerLabel field value if set, zero value otherwise.
func (o *WorkflowJobPayload) GetServerLabel() string {
	if o == nil || IsNil(o.ServerLabel) {
		var ret string
		return ret
	}
	return *o.ServerLabel
}

// GetServerLabelOk returns a tuple with the ServerLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetServerLabelOk() (*string, bool) {
	if o == nil || IsNil(o.ServerLabel) {
		return nil, false
	}
	return o.ServerLabel, true
}

// IsSetServerLabel returns a boolean if a field has been set.
func (o *WorkflowJobPayload) IsSetServerLabel() bool {
	if o != nil && !IsNil(o.ServerLabel) {
		return true
	}

	return false
}

// SetServerLabel gets a reference to the given string and assigns it to the ServerLabel field.
func (o *WorkflowJobPayload) SetServerLabel(v string) {
	o.ServerLabel = &v
}

// GetScheduleMode returns the ScheduleMode field value
func (o *WorkflowJobPayload) GetScheduleMode() WorkflowJobPayloadScheduleMode {
	if o == nil {
		var ret WorkflowJobPayloadScheduleMode
		return ret
	}

	return o.ScheduleMode
}

// GetScheduleModeOk returns a tuple with the ScheduleMode field value
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetScheduleModeOk() (*WorkflowJobPayloadScheduleMode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScheduleMode, true
}

// SetScheduleMode sets field value
func (o *WorkflowJobPayload) SetScheduleMode(v WorkflowJobPayloadScheduleMode) {
	o.ScheduleMode = v
}

// GetCustomOptions returns the CustomOptions field value if set, zero value otherwise.
func (o *WorkflowJobPayload) GetCustomOptions() map[string]interface{} {
	if o == nil || IsNil(o.CustomOptions) {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomOptions
}

// GetCustomOptionsOk returns a tuple with the CustomOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetCustomOptionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CustomOptions) {
		return map[string]interface{}{}, false
	}
	return o.CustomOptions, true
}

// IsSetCustomOptions returns a boolean if a field has been set.
func (o *WorkflowJobPayload) IsSetCustomOptions() bool {
	if o != nil && !IsNil(o.CustomOptions) {
		return true
	}

	return false
}

// SetCustomOptions gets a reference to the given map[string]interface{} and assigns it to the CustomOptions field.
func (o *WorkflowJobPayload) SetCustomOptions(v map[string]interface{}) {
	o.CustomOptions = v
}

// GetCustomConfig returns the CustomConfig field value if set, zero value otherwise.
func (o *WorkflowJobPayload) GetCustomConfig() string {
	if o == nil || IsNil(o.CustomConfig) {
		var ret string
		return ret
	}
	return *o.CustomConfig
}

// GetCustomConfigOk returns a tuple with the CustomConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetCustomConfigOk() (*string, bool) {
	if o == nil || IsNil(o.CustomConfig) {
		return nil, false
	}
	return o.CustomConfig, true
}

// IsSetCustomConfig returns a boolean if a field has been set.
func (o *WorkflowJobPayload) IsSetCustomConfig() bool {
	if o != nil && !IsNil(o.CustomConfig) {
		return true
	}

	return false
}

// SetCustomConfig gets a reference to the given string and assigns it to the CustomConfig field.
func (o *WorkflowJobPayload) SetCustomConfig(v string) {
	o.CustomConfig = &v
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *WorkflowJobPayload) GetDateTime() time.Time {
	if o == nil || IsNil(o.DateTime) {
		var ret time.Time
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateTime) {
		return nil, false
	}
	return o.DateTime, true
}

// IsSetDateTime returns a boolean if a field has been set.
func (o *WorkflowJobPayload) IsSetDateTime() bool {
	if o != nil && !IsNil(o.DateTime) {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given time.Time and assigns it to the DateTime field.
func (o *WorkflowJobPayload) SetDateTime(v time.Time) {
	o.DateTime = &v
}

// GetRun returns the Run field value if set, zero value otherwise.
func (o *WorkflowJobPayload) GetRun() bool {
	if o == nil || IsNil(o.Run) {
		var ret bool
		return ret
	}
	return *o.Run
}

// GetRunOk returns a tuple with the Run field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowJobPayload) GetRunOk() (*bool, bool) {
	if o == nil || IsNil(o.Run) {
		return nil, false
	}
	return o.Run, true
}

// IsSetRun returns a boolean if a field has been set.
func (o *WorkflowJobPayload) IsSetRun() bool {
	if o != nil && !IsNil(o.Run) {
		return true
	}

	return false
}

// SetRun gets a reference to the given bool and assigns it to the Run field.
func (o *WorkflowJobPayload) SetRun(v bool) {
	o.Run = &v
}

func (o WorkflowJobPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkflowJobPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Task) {
		toSerialize["task"] = o.Task
	}
	toSerialize["workflow"] = o.Workflow
	toSerialize["targetType"] = o.TargetType
	if !IsNil(o.Targets) {
		toSerialize["targets"] = o.Targets
	}
	if !IsNil(o.InstanceLabel) {
		toSerialize["instanceLabel"] = o.InstanceLabel
	}
	if !IsNil(o.ServerLabel) {
		toSerialize["serverLabel"] = o.ServerLabel
	}
	toSerialize["scheduleMode"] = o.ScheduleMode
	if !IsNil(o.CustomOptions) {
		toSerialize["customOptions"] = o.CustomOptions
	}
	if !IsNil(o.CustomConfig) {
		toSerialize["customConfig"] = o.CustomConfig
	}
	if !IsNil(o.DateTime) {
		toSerialize["dateTime"] = o.DateTime
	}
	if !IsNil(o.Run) {
		toSerialize["run"] = o.Run
	}
	return toSerialize, nil
}

func (o *WorkflowJobPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"workflow",
		"targetType",
		"scheduleMode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkflowJobPayload := _WorkflowJobPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkflowJobPayload)

	if err != nil {
		return err
	}

	*o = WorkflowJobPayload(varWorkflowJobPayload)

	return err
}

type NullableWorkflowJobPayload struct {
	value *WorkflowJobPayload
	isSet bool
}

func (v NullableWorkflowJobPayload) Get() *WorkflowJobPayload {
	return v.value
}

func (v *NullableWorkflowJobPayload) Set(val *WorkflowJobPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowJobPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowJobPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowJobPayload(val *WorkflowJobPayload) *NullableWorkflowJobPayload {
	return &NullableWorkflowJobPayload{value: val, isSet: true}
}

func (v NullableWorkflowJobPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowJobPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


