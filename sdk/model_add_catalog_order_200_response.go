/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddCatalogOrder200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddCatalogOrder200Response{}

// AddCatalogOrder200Response struct for AddCatalogOrder200Response
type AddCatalogOrder200Response struct {
	Order                *AddCatalogOrder200ResponseAllOfOrder `json:"order,omitempty"`
	Success              *bool                                 `json:"success,omitempty"`
	AdditionalProperties map[string]interface{}                `json:",remain"`
}

type _AddCatalogOrder200Response AddCatalogOrder200Response

// NewAddCatalogOrder200Response instantiates a new AddCatalogOrder200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCatalogOrder200Response() *AddCatalogOrder200Response {
	this := AddCatalogOrder200Response{}
	return &this
}

// NewAddCatalogOrder200ResponseWithDefaults instantiates a new AddCatalogOrder200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCatalogOrder200ResponseWithDefaults() *AddCatalogOrder200Response {
	this := AddCatalogOrder200Response{}
	return &this
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *AddCatalogOrder200Response) GetOrder() AddCatalogOrder200ResponseAllOfOrder {
	if o == nil || IsNil(o.Order) {
		var ret AddCatalogOrder200ResponseAllOfOrder
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCatalogOrder200Response) GetOrderOk() (*AddCatalogOrder200ResponseAllOfOrder, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// IsSetOrder returns a boolean if a field has been set.
func (o *AddCatalogOrder200Response) IsSetOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given AddCatalogOrder200ResponseAllOfOrder and assigns it to the Order field.
func (o *AddCatalogOrder200Response) SetOrder(v AddCatalogOrder200ResponseAllOfOrder) {
	o.Order = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *AddCatalogOrder200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCatalogOrder200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// IsSetSuccess returns a boolean if a field has been set.
func (o *AddCatalogOrder200Response) IsSetSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *AddCatalogOrder200Response) SetSuccess(v bool) {
	o.Success = &v
}

func (o AddCatalogOrder200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddCatalogOrder200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *AddCatalogOrder200Response) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
