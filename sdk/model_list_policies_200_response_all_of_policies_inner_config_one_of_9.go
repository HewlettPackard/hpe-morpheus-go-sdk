/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)

// checks if the ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9{}

// ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 - Instance Name 
type ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 struct {
	NamingType string `json:"namingType"`
	NamingPattern *string `json:"namingPattern,omitempty"`
	NamingConflict *bool `json:"namingConflict,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9

// NewListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 instantiates a new ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9(namingType string) *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 {
	this := ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9{}
	this.NamingType = namingType
	return &this
}

// NewListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9WithDefaults instantiates a new ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9WithDefaults() *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 {
	this := ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9{}
	return &this
}

// GetNamingType returns the NamingType field value
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) GetNamingType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NamingType
}

// GetNamingTypeOk returns a tuple with the NamingType field value
// and a boolean to check if the value has been set.
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) GetNamingTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NamingType, true
}

// SetNamingType sets field value
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) SetNamingType(v string) {
	o.NamingType = v
}

// GetNamingPattern returns the NamingPattern field value if set, zero value otherwise.
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) GetNamingPattern() string {
	if o == nil || IsNil(o.NamingPattern) {
		var ret string
		return ret
	}
	return *o.NamingPattern
}

// GetNamingPatternOk returns a tuple with the NamingPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) GetNamingPatternOk() (*string, bool) {
	if o == nil || IsNil(o.NamingPattern) {
		return nil, false
	}
	return o.NamingPattern, true
}

// IsSetNamingPattern returns a boolean if a field has been set.
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) IsSetNamingPattern() bool {
	if o != nil && !IsNil(o.NamingPattern) {
		return true
	}

	return false
}

// SetNamingPattern gets a reference to the given string and assigns it to the NamingPattern field.
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) SetNamingPattern(v string) {
	o.NamingPattern = &v
}

// GetNamingConflict returns the NamingConflict field value if set, zero value otherwise.
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) GetNamingConflict() bool {
	if o == nil || IsNil(o.NamingConflict) {
		var ret bool
		return ret
	}
	return *o.NamingConflict
}

// GetNamingConflictOk returns a tuple with the NamingConflict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) GetNamingConflictOk() (*bool, bool) {
	if o == nil || IsNil(o.NamingConflict) {
		return nil, false
	}
	return o.NamingConflict, true
}

// IsSetNamingConflict returns a boolean if a field has been set.
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) IsSetNamingConflict() bool {
	if o != nil && !IsNil(o.NamingConflict) {
		return true
	}

	return false
}

// SetNamingConflict gets a reference to the given bool and assigns it to the NamingConflict field.
func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) SetNamingConflict(v bool) {
	o.NamingConflict = &v
}

func (o ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namingType"] = o.NamingType
	if !IsNil(o.NamingPattern) {
		toSerialize["namingPattern"] = o.NamingPattern
	}
	if !IsNil(o.NamingConflict) {
		toSerialize["namingConflict"] = o.NamingConflict
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namingType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 := _ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9{}

	err = json.Unmarshal(data, &varListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9)

	if err != nil {
		return err
	}

	*o = ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9(varListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "namingType")
		delete(additionalProperties, "namingPattern")
		delete(additionalProperties, "namingConflict")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 struct {
	value *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9
	isSet bool
}

func (v NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) Get() *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 {
	return v.value
}

func (v *NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) Set(val *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) {
	v.value = val
	v.isSet = true
}

func (v NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) IsSet() bool {
	return v.isSet
}

func (v *NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9(val *ListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) *NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9 {
	return &NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9{value: val, isSet: true}
}

func (v NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListPolicies200ResponseAllOfPoliciesInnerConfigOneOf9) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


