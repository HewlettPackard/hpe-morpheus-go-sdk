/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ListNetworks200ResponseAllOfNetworksInnerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListNetworks200ResponseAllOfNetworksInnerConfig{}

// ListNetworks200ResponseAllOfNetworksInnerConfig struct for ListNetworks200ResponseAllOfNetworksInnerConfig
type ListNetworks200ResponseAllOfNetworksInnerConfig struct {
	VlanIDs *string `json:"vlanIDs,omitempty"`
	ConnectedGateway *string `json:"connectedGateway,omitempty"`
	SubnetIpManagementType *string `json:"subnetIpManagementType,omitempty"`
	SubnetIpServerId *string `json:"subnetIpServerId,omitempty"`
	DhcpRange *string `json:"dhcpRange,omitempty"`
	SubnetDhcpServerAddress *string `json:"subnetDhcpServerAddress,omitempty"`
	SubnetDhcpLeaseTime *string `json:"subnetDhcpLeaseTime,omitempty"`
}

// NewListNetworks200ResponseAllOfNetworksInnerConfig instantiates a new ListNetworks200ResponseAllOfNetworksInnerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListNetworks200ResponseAllOfNetworksInnerConfig() *ListNetworks200ResponseAllOfNetworksInnerConfig {
	this := ListNetworks200ResponseAllOfNetworksInnerConfig{}
	return &this
}

// NewListNetworks200ResponseAllOfNetworksInnerConfigWithDefaults instantiates a new ListNetworks200ResponseAllOfNetworksInnerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListNetworks200ResponseAllOfNetworksInnerConfigWithDefaults() *ListNetworks200ResponseAllOfNetworksInnerConfig {
	this := ListNetworks200ResponseAllOfNetworksInnerConfig{}
	return &this
}

// GetVlanIDs returns the VlanIDs field value if set, zero value otherwise.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetVlanIDs() string {
	if o == nil || IsNil(o.VlanIDs) {
		var ret string
		return ret
	}
	return *o.VlanIDs
}

// GetVlanIDsOk returns a tuple with the VlanIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetVlanIDsOk() (*string, bool) {
	if o == nil || IsNil(o.VlanIDs) {
		return nil, false
	}
	return o.VlanIDs, true
}

// IsSetVlanIDs returns a boolean if a field has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) IsSetVlanIDs() bool {
	if o != nil && !IsNil(o.VlanIDs) {
		return true
	}

	return false
}

// SetVlanIDs gets a reference to the given string and assigns it to the VlanIDs field.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) SetVlanIDs(v string) {
	o.VlanIDs = &v
}

// GetConnectedGateway returns the ConnectedGateway field value if set, zero value otherwise.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetConnectedGateway() string {
	if o == nil || IsNil(o.ConnectedGateway) {
		var ret string
		return ret
	}
	return *o.ConnectedGateway
}

// GetConnectedGatewayOk returns a tuple with the ConnectedGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetConnectedGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectedGateway) {
		return nil, false
	}
	return o.ConnectedGateway, true
}

// IsSetConnectedGateway returns a boolean if a field has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) IsSetConnectedGateway() bool {
	if o != nil && !IsNil(o.ConnectedGateway) {
		return true
	}

	return false
}

// SetConnectedGateway gets a reference to the given string and assigns it to the ConnectedGateway field.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) SetConnectedGateway(v string) {
	o.ConnectedGateway = &v
}

// GetSubnetIpManagementType returns the SubnetIpManagementType field value if set, zero value otherwise.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetSubnetIpManagementType() string {
	if o == nil || IsNil(o.SubnetIpManagementType) {
		var ret string
		return ret
	}
	return *o.SubnetIpManagementType
}

// GetSubnetIpManagementTypeOk returns a tuple with the SubnetIpManagementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetSubnetIpManagementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetIpManagementType) {
		return nil, false
	}
	return o.SubnetIpManagementType, true
}

// IsSetSubnetIpManagementType returns a boolean if a field has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) IsSetSubnetIpManagementType() bool {
	if o != nil && !IsNil(o.SubnetIpManagementType) {
		return true
	}

	return false
}

// SetSubnetIpManagementType gets a reference to the given string and assigns it to the SubnetIpManagementType field.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) SetSubnetIpManagementType(v string) {
	o.SubnetIpManagementType = &v
}

// GetSubnetIpServerId returns the SubnetIpServerId field value if set, zero value otherwise.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetSubnetIpServerId() string {
	if o == nil || IsNil(o.SubnetIpServerId) {
		var ret string
		return ret
	}
	return *o.SubnetIpServerId
}

// GetSubnetIpServerIdOk returns a tuple with the SubnetIpServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetSubnetIpServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetIpServerId) {
		return nil, false
	}
	return o.SubnetIpServerId, true
}

// IsSetSubnetIpServerId returns a boolean if a field has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) IsSetSubnetIpServerId() bool {
	if o != nil && !IsNil(o.SubnetIpServerId) {
		return true
	}

	return false
}

// SetSubnetIpServerId gets a reference to the given string and assigns it to the SubnetIpServerId field.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) SetSubnetIpServerId(v string) {
	o.SubnetIpServerId = &v
}

// GetDhcpRange returns the DhcpRange field value if set, zero value otherwise.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetDhcpRange() string {
	if o == nil || IsNil(o.DhcpRange) {
		var ret string
		return ret
	}
	return *o.DhcpRange
}

// GetDhcpRangeOk returns a tuple with the DhcpRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetDhcpRangeOk() (*string, bool) {
	if o == nil || IsNil(o.DhcpRange) {
		return nil, false
	}
	return o.DhcpRange, true
}

// IsSetDhcpRange returns a boolean if a field has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) IsSetDhcpRange() bool {
	if o != nil && !IsNil(o.DhcpRange) {
		return true
	}

	return false
}

// SetDhcpRange gets a reference to the given string and assigns it to the DhcpRange field.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) SetDhcpRange(v string) {
	o.DhcpRange = &v
}

// GetSubnetDhcpServerAddress returns the SubnetDhcpServerAddress field value if set, zero value otherwise.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetSubnetDhcpServerAddress() string {
	if o == nil || IsNil(o.SubnetDhcpServerAddress) {
		var ret string
		return ret
	}
	return *o.SubnetDhcpServerAddress
}

// GetSubnetDhcpServerAddressOk returns a tuple with the SubnetDhcpServerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetSubnetDhcpServerAddressOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetDhcpServerAddress) {
		return nil, false
	}
	return o.SubnetDhcpServerAddress, true
}

// IsSetSubnetDhcpServerAddress returns a boolean if a field has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) IsSetSubnetDhcpServerAddress() bool {
	if o != nil && !IsNil(o.SubnetDhcpServerAddress) {
		return true
	}

	return false
}

// SetSubnetDhcpServerAddress gets a reference to the given string and assigns it to the SubnetDhcpServerAddress field.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) SetSubnetDhcpServerAddress(v string) {
	o.SubnetDhcpServerAddress = &v
}

// GetSubnetDhcpLeaseTime returns the SubnetDhcpLeaseTime field value if set, zero value otherwise.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetSubnetDhcpLeaseTime() string {
	if o == nil || IsNil(o.SubnetDhcpLeaseTime) {
		var ret string
		return ret
	}
	return *o.SubnetDhcpLeaseTime
}

// GetSubnetDhcpLeaseTimeOk returns a tuple with the SubnetDhcpLeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) GetSubnetDhcpLeaseTimeOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetDhcpLeaseTime) {
		return nil, false
	}
	return o.SubnetDhcpLeaseTime, true
}

// IsSetSubnetDhcpLeaseTime returns a boolean if a field has been set.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) IsSetSubnetDhcpLeaseTime() bool {
	if o != nil && !IsNil(o.SubnetDhcpLeaseTime) {
		return true
	}

	return false
}

// SetSubnetDhcpLeaseTime gets a reference to the given string and assigns it to the SubnetDhcpLeaseTime field.
func (o *ListNetworks200ResponseAllOfNetworksInnerConfig) SetSubnetDhcpLeaseTime(v string) {
	o.SubnetDhcpLeaseTime = &v
}

func (o ListNetworks200ResponseAllOfNetworksInnerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListNetworks200ResponseAllOfNetworksInnerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VlanIDs) {
		toSerialize["vlanIDs"] = o.VlanIDs
	}
	if !IsNil(o.ConnectedGateway) {
		toSerialize["connectedGateway"] = o.ConnectedGateway
	}
	if !IsNil(o.SubnetIpManagementType) {
		toSerialize["subnetIpManagementType"] = o.SubnetIpManagementType
	}
	if !IsNil(o.SubnetIpServerId) {
		toSerialize["subnetIpServerId"] = o.SubnetIpServerId
	}
	if !IsNil(o.DhcpRange) {
		toSerialize["dhcpRange"] = o.DhcpRange
	}
	if !IsNil(o.SubnetDhcpServerAddress) {
		toSerialize["subnetDhcpServerAddress"] = o.SubnetDhcpServerAddress
	}
	if !IsNil(o.SubnetDhcpLeaseTime) {
		toSerialize["subnetDhcpLeaseTime"] = o.SubnetDhcpLeaseTime
	}
	return toSerialize, nil
}

type NullableListNetworks200ResponseAllOfNetworksInnerConfig struct {
	value *ListNetworks200ResponseAllOfNetworksInnerConfig
	isSet bool
}

func (v NullableListNetworks200ResponseAllOfNetworksInnerConfig) Get() *ListNetworks200ResponseAllOfNetworksInnerConfig {
	return v.value
}

func (v *NullableListNetworks200ResponseAllOfNetworksInnerConfig) Set(val *ListNetworks200ResponseAllOfNetworksInnerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableListNetworks200ResponseAllOfNetworksInnerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableListNetworks200ResponseAllOfNetworksInnerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListNetworks200ResponseAllOfNetworksInnerConfig(val *ListNetworks200ResponseAllOfNetworksInnerConfig) *NullableListNetworks200ResponseAllOfNetworksInnerConfig {
	return &NullableListNetworks200ResponseAllOfNetworksInnerConfig{value: val, isSet: true}
}

func (v NullableListNetworks200ResponseAllOfNetworksInnerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListNetworks200ResponseAllOfNetworksInnerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


