/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddPricesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddPricesRequest{}

// AddPricesRequest struct for AddPricesRequest
type AddPricesRequest struct {
	Price AddPricesRequestPrice `json:"price"`
}

type _AddPricesRequest AddPricesRequest

// NewAddPricesRequest instantiates a new AddPricesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddPricesRequest(price AddPricesRequestPrice) *AddPricesRequest {
	this := AddPricesRequest{}
	this.Price = price
	return &this
}

// NewAddPricesRequestWithDefaults instantiates a new AddPricesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddPricesRequestWithDefaults() *AddPricesRequest {
	this := AddPricesRequest{}
	return &this
}

// GetPrice returns the Price field value
func (o *AddPricesRequest) GetPrice() AddPricesRequestPrice {
	if o == nil {
		var ret AddPricesRequestPrice
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *AddPricesRequest) GetPriceOk() (*AddPricesRequestPrice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *AddPricesRequest) SetPrice(v AddPricesRequestPrice) {
	o.Price = v
}

func (o AddPricesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddPricesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["price"] = o.Price
	return toSerialize, nil
}

func (o *AddPricesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddPricesRequest := _AddPricesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddPricesRequest)

	if err != nil {
		return err
	}

	*o = AddPricesRequest(varAddPricesRequest)

	return err
}

type NullableAddPricesRequest struct {
	value *AddPricesRequest
	isSet bool
}

func (v NullableAddPricesRequest) Get() *AddPricesRequest {
	return v.value
}

func (v *NullableAddPricesRequest) Set(val *AddPricesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddPricesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddPricesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddPricesRequest(val *AddPricesRequest) *NullableAddPricesRequest {
	return &NullableAddPricesRequest{value: val, isSet: true}
}

func (v NullableAddPricesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddPricesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


