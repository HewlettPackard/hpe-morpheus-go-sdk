/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the LogSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogSettings{}

// LogSettings struct for LogSettings
type LogSettings struct {
	Enabled *bool `json:"enabled,omitempty"`
	RetentionDays *string `json:"retentionDays,omitempty"`
	SyslogRules []map[string]interface{} `json:"syslogRules,omitempty"`
	Integrations []map[string]interface{} `json:"integrations,omitempty"`
}

// NewLogSettings instantiates a new LogSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogSettings() *LogSettings {
	this := LogSettings{}
	return &this
}

// NewLogSettingsWithDefaults instantiates a new LogSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogSettingsWithDefaults() *LogSettings {
	this := LogSettings{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *LogSettings) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// IsSetEnabled returns a boolean if a field has been set.
func (o *LogSettings) IsSetEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *LogSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetRetentionDays returns the RetentionDays field value if set, zero value otherwise.
func (o *LogSettings) GetRetentionDays() string {
	if o == nil || IsNil(o.RetentionDays) {
		var ret string
		return ret
	}
	return *o.RetentionDays
}

// GetRetentionDaysOk returns a tuple with the RetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSettings) GetRetentionDaysOk() (*string, bool) {
	if o == nil || IsNil(o.RetentionDays) {
		return nil, false
	}
	return o.RetentionDays, true
}

// IsSetRetentionDays returns a boolean if a field has been set.
func (o *LogSettings) IsSetRetentionDays() bool {
	if o != nil && !IsNil(o.RetentionDays) {
		return true
	}

	return false
}

// SetRetentionDays gets a reference to the given string and assigns it to the RetentionDays field.
func (o *LogSettings) SetRetentionDays(v string) {
	o.RetentionDays = &v
}

// GetSyslogRules returns the SyslogRules field value if set, zero value otherwise.
func (o *LogSettings) GetSyslogRules() []map[string]interface{} {
	if o == nil || IsNil(o.SyslogRules) {
		var ret []map[string]interface{}
		return ret
	}
	return o.SyslogRules
}

// GetSyslogRulesOk returns a tuple with the SyslogRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSettings) GetSyslogRulesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.SyslogRules) {
		return nil, false
	}
	return o.SyslogRules, true
}

// IsSetSyslogRules returns a boolean if a field has been set.
func (o *LogSettings) IsSetSyslogRules() bool {
	if o != nil && !IsNil(o.SyslogRules) {
		return true
	}

	return false
}

// SetSyslogRules gets a reference to the given []map[string]interface{} and assigns it to the SyslogRules field.
func (o *LogSettings) SetSyslogRules(v []map[string]interface{}) {
	o.SyslogRules = v
}

// GetIntegrations returns the Integrations field value if set, zero value otherwise.
func (o *LogSettings) GetIntegrations() []map[string]interface{} {
	if o == nil || IsNil(o.Integrations) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Integrations
}

// GetIntegrationsOk returns a tuple with the Integrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSettings) GetIntegrationsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Integrations) {
		return nil, false
	}
	return o.Integrations, true
}

// IsSetIntegrations returns a boolean if a field has been set.
func (o *LogSettings) IsSetIntegrations() bool {
	if o != nil && !IsNil(o.Integrations) {
		return true
	}

	return false
}

// SetIntegrations gets a reference to the given []map[string]interface{} and assigns it to the Integrations field.
func (o *LogSettings) SetIntegrations(v []map[string]interface{}) {
	o.Integrations = v
}

func (o LogSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.RetentionDays) {
		toSerialize["retentionDays"] = o.RetentionDays
	}
	if !IsNil(o.SyslogRules) {
		toSerialize["syslogRules"] = o.SyslogRules
	}
	if !IsNil(o.Integrations) {
		toSerialize["integrations"] = o.Integrations
	}
	return toSerialize, nil
}

type NullableLogSettings struct {
	value *LogSettings
	isSet bool
}

func (v NullableLogSettings) Get() *LogSettings {
	return v.value
}

func (v *NullableLogSettings) Set(val *LogSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableLogSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableLogSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogSettings(val *LogSettings) *NullableLogSettings {
	return &NullableLogSettings{value: val, isSet: true}
}

func (v NullableLogSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


