/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions{}

// UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions struct for UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions
type UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions struct {
	// Pass true to allow access to all groups
	All *bool `json:"all,omitempty"`
	// Array of groups that are allowed access
	Sites []UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner `json:"sites,omitempty"`
	// Pass true to allow access to all plans
	AllPlans *bool `json:"allPlans,omitempty"`
	// Array of plans that are allowed access
	Plans []UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner `json:"plans,omitempty"`
}

// NewUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions instantiates a new UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions() *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions {
	this := UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions{}
	return &this
}

// NewUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsWithDefaults instantiates a new UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsWithDefaults() *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions {
	this := UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions{}
	return &this
}

// GetAll returns the All field value if set, zero value otherwise.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) GetAll() bool {
	if o == nil || IsNil(o.All) {
		var ret bool
		return ret
	}
	return *o.All
}

// GetAllOk returns a tuple with the All field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) GetAllOk() (*bool, bool) {
	if o == nil || IsNil(o.All) {
		return nil, false
	}
	return o.All, true
}

// IsSetAll returns a boolean if a field has been set.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) IsSetAll() bool {
	if o != nil && !IsNil(o.All) {
		return true
	}

	return false
}

// SetAll gets a reference to the given bool and assigns it to the All field.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) SetAll(v bool) {
	o.All = &v
}

// GetSites returns the Sites field value if set, zero value otherwise.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) GetSites() []UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner {
	if o == nil || IsNil(o.Sites) {
		var ret []UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner
		return ret
	}
	return o.Sites
}

// GetSitesOk returns a tuple with the Sites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) GetSitesOk() ([]UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner, bool) {
	if o == nil || IsNil(o.Sites) {
		return nil, false
	}
	return o.Sites, true
}

// IsSetSites returns a boolean if a field has been set.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) IsSetSites() bool {
	if o != nil && !IsNil(o.Sites) {
		return true
	}

	return false
}

// SetSites gets a reference to the given []UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner and assigns it to the Sites field.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) SetSites(v []UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner) {
	o.Sites = v
}

// GetAllPlans returns the AllPlans field value if set, zero value otherwise.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) GetAllPlans() bool {
	if o == nil || IsNil(o.AllPlans) {
		var ret bool
		return ret
	}
	return *o.AllPlans
}

// GetAllPlansOk returns a tuple with the AllPlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) GetAllPlansOk() (*bool, bool) {
	if o == nil || IsNil(o.AllPlans) {
		return nil, false
	}
	return o.AllPlans, true
}

// IsSetAllPlans returns a boolean if a field has been set.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) IsSetAllPlans() bool {
	if o != nil && !IsNil(o.AllPlans) {
		return true
	}

	return false
}

// SetAllPlans gets a reference to the given bool and assigns it to the AllPlans field.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) SetAllPlans(v bool) {
	o.AllPlans = &v
}

// GetPlans returns the Plans field value if set, zero value otherwise.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) GetPlans() []UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner {
	if o == nil || IsNil(o.Plans) {
		var ret []UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner
		return ret
	}
	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) GetPlansOk() ([]UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner, bool) {
	if o == nil || IsNil(o.Plans) {
		return nil, false
	}
	return o.Plans, true
}

// IsSetPlans returns a boolean if a field has been set.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) IsSetPlans() bool {
	if o != nil && !IsNil(o.Plans) {
		return true
	}

	return false
}

// SetPlans gets a reference to the given []UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner and assigns it to the Plans field.
func (o *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) SetPlans(v []UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissionsSitesInner) {
	o.Plans = v
}

func (o UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.All) {
		toSerialize["all"] = o.All
	}
	if !IsNil(o.Sites) {
		toSerialize["sites"] = o.Sites
	}
	if !IsNil(o.AllPlans) {
		toSerialize["allPlans"] = o.AllPlans
	}
	if !IsNil(o.Plans) {
		toSerialize["plans"] = o.Plans
	}
	return toSerialize, nil
}

type NullableUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions struct {
	value *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions
	isSet bool
}

func (v NullableUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) Get() *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions {
	return v.value
}

func (v *NullableUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) Set(val *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions(val *UpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) *NullableUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions {
	return &NullableUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions{value: val, isSet: true}
}

func (v NullableUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateClusterDatastoreRequestDatastorePermissionsResourcePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


