/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddBlueprintRequestOneOf3Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddBlueprintRequestOneOf3Config{}

// AddBlueprintRequestOneOf3Config struct for AddBlueprintRequestOneOf3Config
type AddBlueprintRequestOneOf3Config struct {
	// Array of Kubernetes specs in Morpheus
	Specs []AddBlueprintRequestOneOf3ConfigSpecsInner `json:"specs,omitempty"`
}

// NewAddBlueprintRequestOneOf3Config instantiates a new AddBlueprintRequestOneOf3Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddBlueprintRequestOneOf3Config() *AddBlueprintRequestOneOf3Config {
	this := AddBlueprintRequestOneOf3Config{}
	return &this
}

// NewAddBlueprintRequestOneOf3ConfigWithDefaults instantiates a new AddBlueprintRequestOneOf3Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddBlueprintRequestOneOf3ConfigWithDefaults() *AddBlueprintRequestOneOf3Config {
	this := AddBlueprintRequestOneOf3Config{}
	return &this
}

// GetSpecs returns the Specs field value if set, zero value otherwise.
func (o *AddBlueprintRequestOneOf3Config) GetSpecs() []AddBlueprintRequestOneOf3ConfigSpecsInner {
	if o == nil || IsNil(o.Specs) {
		var ret []AddBlueprintRequestOneOf3ConfigSpecsInner
		return ret
	}
	return o.Specs
}

// GetSpecsOk returns a tuple with the Specs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddBlueprintRequestOneOf3Config) GetSpecsOk() ([]AddBlueprintRequestOneOf3ConfigSpecsInner, bool) {
	if o == nil || IsNil(o.Specs) {
		return nil, false
	}
	return o.Specs, true
}

// IsSetSpecs returns a boolean if a field has been set.
func (o *AddBlueprintRequestOneOf3Config) IsSetSpecs() bool {
	if o != nil && !IsNil(o.Specs) {
		return true
	}

	return false
}

// SetSpecs gets a reference to the given []AddBlueprintRequestOneOf3ConfigSpecsInner and assigns it to the Specs field.
func (o *AddBlueprintRequestOneOf3Config) SetSpecs(v []AddBlueprintRequestOneOf3ConfigSpecsInner) {
	o.Specs = v
}

func (o AddBlueprintRequestOneOf3Config) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddBlueprintRequestOneOf3Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Specs) {
		toSerialize["specs"] = o.Specs
	}
	return toSerialize, nil
}

type NullableAddBlueprintRequestOneOf3Config struct {
	value *AddBlueprintRequestOneOf3Config
	isSet bool
}

func (v NullableAddBlueprintRequestOneOf3Config) Get() *AddBlueprintRequestOneOf3Config {
	return v.value
}

func (v *NullableAddBlueprintRequestOneOf3Config) Set(val *AddBlueprintRequestOneOf3Config) {
	v.value = val
	v.isSet = true
}

func (v NullableAddBlueprintRequestOneOf3Config) IsSet() bool {
	return v.isSet
}

func (v *NullableAddBlueprintRequestOneOf3Config) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddBlueprintRequestOneOf3Config(val *AddBlueprintRequestOneOf3Config) *NullableAddBlueprintRequestOneOf3Config {
	return &NullableAddBlueprintRequestOneOf3Config{value: val, isSet: true}
}

func (v NullableAddBlueprintRequestOneOf3Config) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddBlueprintRequestOneOf3Config) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


