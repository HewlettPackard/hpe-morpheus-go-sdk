/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ProvisioningSettingsUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProvisioningSettingsUpdate{}

// ProvisioningSettingsUpdate struct for ProvisioningSettingsUpdate
type ProvisioningSettingsUpdate struct {
	// Use this to enable / disable allowing cloud selection
	AllowZoneSelection *bool `json:"allowZoneSelection,omitempty"`
	// Use this to enable / disable allowing host selection
	AllowServerSelection *bool `json:"allowServerSelection,omitempty"`
	// Use this to enable / disable requiring environment selection
	RequireEnvironments *bool `json:"requireEnvironments,omitempty"`
	// Use this to enable / disable showing pricing
	ShowPricing *bool `json:"showPricing,omitempty"`
	// Use this to enable / disable hiding datastore stats
	HideDatastoreStats *bool `json:"hideDatastoreStats,omitempty"`
	// Use this to enable / disable cross-tenant naming policies
	CrossTenantNamingPolicies *bool `json:"crossTenantNamingPolicies,omitempty"`
	// Use this to enable / disable reusing naming sequence numbers
	ReuseSequence *bool `json:"reuseSequence,omitempty"`
	// Cloud-init username
	CloudInitUsername *string `json:"cloudInitUsername,omitempty"`
	// Cloud-init password
	CloudInitPassword *string `json:"cloudInitPassword,omitempty"`
	CloudInitKeyPair *UpdateProvisioningSettingsRequestProvisioningSettingsCloudInitKeyPair `json:"cloudInitKeyPair,omitempty"`
	DeployStorageProvider *UpdateProvisioningSettingsRequestProvisioningSettingsDeployStorageProvider `json:"deployStorageProvider,omitempty"`
	// Windows administrator password
	WindowsPassword *string `json:"windowsPassword,omitempty"`
	// PXE Boot default root password
	PxeRootPassword *string `json:"pxeRootPassword,omitempty"`
	DefaultTemplateType *UpdateProvisioningSettingsRequestProvisioningSettingsDefaultTemplateType `json:"defaultTemplateType,omitempty"`
}

// NewProvisioningSettingsUpdate instantiates a new ProvisioningSettingsUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvisioningSettingsUpdate() *ProvisioningSettingsUpdate {
	this := ProvisioningSettingsUpdate{}
	return &this
}

// NewProvisioningSettingsUpdateWithDefaults instantiates a new ProvisioningSettingsUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvisioningSettingsUpdateWithDefaults() *ProvisioningSettingsUpdate {
	this := ProvisioningSettingsUpdate{}
	return &this
}

// GetAllowZoneSelection returns the AllowZoneSelection field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetAllowZoneSelection() bool {
	if o == nil || IsNil(o.AllowZoneSelection) {
		var ret bool
		return ret
	}
	return *o.AllowZoneSelection
}

// GetAllowZoneSelectionOk returns a tuple with the AllowZoneSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetAllowZoneSelectionOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowZoneSelection) {
		return nil, false
	}
	return o.AllowZoneSelection, true
}

// IsSetAllowZoneSelection returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetAllowZoneSelection() bool {
	if o != nil && !IsNil(o.AllowZoneSelection) {
		return true
	}

	return false
}

// SetAllowZoneSelection gets a reference to the given bool and assigns it to the AllowZoneSelection field.
func (o *ProvisioningSettingsUpdate) SetAllowZoneSelection(v bool) {
	o.AllowZoneSelection = &v
}

// GetAllowServerSelection returns the AllowServerSelection field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetAllowServerSelection() bool {
	if o == nil || IsNil(o.AllowServerSelection) {
		var ret bool
		return ret
	}
	return *o.AllowServerSelection
}

// GetAllowServerSelectionOk returns a tuple with the AllowServerSelection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetAllowServerSelectionOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowServerSelection) {
		return nil, false
	}
	return o.AllowServerSelection, true
}

// IsSetAllowServerSelection returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetAllowServerSelection() bool {
	if o != nil && !IsNil(o.AllowServerSelection) {
		return true
	}

	return false
}

// SetAllowServerSelection gets a reference to the given bool and assigns it to the AllowServerSelection field.
func (o *ProvisioningSettingsUpdate) SetAllowServerSelection(v bool) {
	o.AllowServerSelection = &v
}

// GetRequireEnvironments returns the RequireEnvironments field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetRequireEnvironments() bool {
	if o == nil || IsNil(o.RequireEnvironments) {
		var ret bool
		return ret
	}
	return *o.RequireEnvironments
}

// GetRequireEnvironmentsOk returns a tuple with the RequireEnvironments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetRequireEnvironmentsOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireEnvironments) {
		return nil, false
	}
	return o.RequireEnvironments, true
}

// IsSetRequireEnvironments returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetRequireEnvironments() bool {
	if o != nil && !IsNil(o.RequireEnvironments) {
		return true
	}

	return false
}

// SetRequireEnvironments gets a reference to the given bool and assigns it to the RequireEnvironments field.
func (o *ProvisioningSettingsUpdate) SetRequireEnvironments(v bool) {
	o.RequireEnvironments = &v
}

// GetShowPricing returns the ShowPricing field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetShowPricing() bool {
	if o == nil || IsNil(o.ShowPricing) {
		var ret bool
		return ret
	}
	return *o.ShowPricing
}

// GetShowPricingOk returns a tuple with the ShowPricing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetShowPricingOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowPricing) {
		return nil, false
	}
	return o.ShowPricing, true
}

// IsSetShowPricing returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetShowPricing() bool {
	if o != nil && !IsNil(o.ShowPricing) {
		return true
	}

	return false
}

// SetShowPricing gets a reference to the given bool and assigns it to the ShowPricing field.
func (o *ProvisioningSettingsUpdate) SetShowPricing(v bool) {
	o.ShowPricing = &v
}

// GetHideDatastoreStats returns the HideDatastoreStats field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetHideDatastoreStats() bool {
	if o == nil || IsNil(o.HideDatastoreStats) {
		var ret bool
		return ret
	}
	return *o.HideDatastoreStats
}

// GetHideDatastoreStatsOk returns a tuple with the HideDatastoreStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetHideDatastoreStatsOk() (*bool, bool) {
	if o == nil || IsNil(o.HideDatastoreStats) {
		return nil, false
	}
	return o.HideDatastoreStats, true
}

// IsSetHideDatastoreStats returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetHideDatastoreStats() bool {
	if o != nil && !IsNil(o.HideDatastoreStats) {
		return true
	}

	return false
}

// SetHideDatastoreStats gets a reference to the given bool and assigns it to the HideDatastoreStats field.
func (o *ProvisioningSettingsUpdate) SetHideDatastoreStats(v bool) {
	o.HideDatastoreStats = &v
}

// GetCrossTenantNamingPolicies returns the CrossTenantNamingPolicies field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetCrossTenantNamingPolicies() bool {
	if o == nil || IsNil(o.CrossTenantNamingPolicies) {
		var ret bool
		return ret
	}
	return *o.CrossTenantNamingPolicies
}

// GetCrossTenantNamingPoliciesOk returns a tuple with the CrossTenantNamingPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetCrossTenantNamingPoliciesOk() (*bool, bool) {
	if o == nil || IsNil(o.CrossTenantNamingPolicies) {
		return nil, false
	}
	return o.CrossTenantNamingPolicies, true
}

// IsSetCrossTenantNamingPolicies returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetCrossTenantNamingPolicies() bool {
	if o != nil && !IsNil(o.CrossTenantNamingPolicies) {
		return true
	}

	return false
}

// SetCrossTenantNamingPolicies gets a reference to the given bool and assigns it to the CrossTenantNamingPolicies field.
func (o *ProvisioningSettingsUpdate) SetCrossTenantNamingPolicies(v bool) {
	o.CrossTenantNamingPolicies = &v
}

// GetReuseSequence returns the ReuseSequence field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetReuseSequence() bool {
	if o == nil || IsNil(o.ReuseSequence) {
		var ret bool
		return ret
	}
	return *o.ReuseSequence
}

// GetReuseSequenceOk returns a tuple with the ReuseSequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetReuseSequenceOk() (*bool, bool) {
	if o == nil || IsNil(o.ReuseSequence) {
		return nil, false
	}
	return o.ReuseSequence, true
}

// IsSetReuseSequence returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetReuseSequence() bool {
	if o != nil && !IsNil(o.ReuseSequence) {
		return true
	}

	return false
}

// SetReuseSequence gets a reference to the given bool and assigns it to the ReuseSequence field.
func (o *ProvisioningSettingsUpdate) SetReuseSequence(v bool) {
	o.ReuseSequence = &v
}

// GetCloudInitUsername returns the CloudInitUsername field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetCloudInitUsername() string {
	if o == nil || IsNil(o.CloudInitUsername) {
		var ret string
		return ret
	}
	return *o.CloudInitUsername
}

// GetCloudInitUsernameOk returns a tuple with the CloudInitUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetCloudInitUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.CloudInitUsername) {
		return nil, false
	}
	return o.CloudInitUsername, true
}

// IsSetCloudInitUsername returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetCloudInitUsername() bool {
	if o != nil && !IsNil(o.CloudInitUsername) {
		return true
	}

	return false
}

// SetCloudInitUsername gets a reference to the given string and assigns it to the CloudInitUsername field.
func (o *ProvisioningSettingsUpdate) SetCloudInitUsername(v string) {
	o.CloudInitUsername = &v
}

// GetCloudInitPassword returns the CloudInitPassword field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetCloudInitPassword() string {
	if o == nil || IsNil(o.CloudInitPassword) {
		var ret string
		return ret
	}
	return *o.CloudInitPassword
}

// GetCloudInitPasswordOk returns a tuple with the CloudInitPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetCloudInitPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.CloudInitPassword) {
		return nil, false
	}
	return o.CloudInitPassword, true
}

// IsSetCloudInitPassword returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetCloudInitPassword() bool {
	if o != nil && !IsNil(o.CloudInitPassword) {
		return true
	}

	return false
}

// SetCloudInitPassword gets a reference to the given string and assigns it to the CloudInitPassword field.
func (o *ProvisioningSettingsUpdate) SetCloudInitPassword(v string) {
	o.CloudInitPassword = &v
}

// GetCloudInitKeyPair returns the CloudInitKeyPair field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetCloudInitKeyPair() UpdateProvisioningSettingsRequestProvisioningSettingsCloudInitKeyPair {
	if o == nil || IsNil(o.CloudInitKeyPair) {
		var ret UpdateProvisioningSettingsRequestProvisioningSettingsCloudInitKeyPair
		return ret
	}
	return *o.CloudInitKeyPair
}

// GetCloudInitKeyPairOk returns a tuple with the CloudInitKeyPair field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetCloudInitKeyPairOk() (*UpdateProvisioningSettingsRequestProvisioningSettingsCloudInitKeyPair, bool) {
	if o == nil || IsNil(o.CloudInitKeyPair) {
		return nil, false
	}
	return o.CloudInitKeyPair, true
}

// IsSetCloudInitKeyPair returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetCloudInitKeyPair() bool {
	if o != nil && !IsNil(o.CloudInitKeyPair) {
		return true
	}

	return false
}

// SetCloudInitKeyPair gets a reference to the given UpdateProvisioningSettingsRequestProvisioningSettingsCloudInitKeyPair and assigns it to the CloudInitKeyPair field.
func (o *ProvisioningSettingsUpdate) SetCloudInitKeyPair(v UpdateProvisioningSettingsRequestProvisioningSettingsCloudInitKeyPair) {
	o.CloudInitKeyPair = &v
}

// GetDeployStorageProvider returns the DeployStorageProvider field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetDeployStorageProvider() UpdateProvisioningSettingsRequestProvisioningSettingsDeployStorageProvider {
	if o == nil || IsNil(o.DeployStorageProvider) {
		var ret UpdateProvisioningSettingsRequestProvisioningSettingsDeployStorageProvider
		return ret
	}
	return *o.DeployStorageProvider
}

// GetDeployStorageProviderOk returns a tuple with the DeployStorageProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetDeployStorageProviderOk() (*UpdateProvisioningSettingsRequestProvisioningSettingsDeployStorageProvider, bool) {
	if o == nil || IsNil(o.DeployStorageProvider) {
		return nil, false
	}
	return o.DeployStorageProvider, true
}

// IsSetDeployStorageProvider returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetDeployStorageProvider() bool {
	if o != nil && !IsNil(o.DeployStorageProvider) {
		return true
	}

	return false
}

// SetDeployStorageProvider gets a reference to the given UpdateProvisioningSettingsRequestProvisioningSettingsDeployStorageProvider and assigns it to the DeployStorageProvider field.
func (o *ProvisioningSettingsUpdate) SetDeployStorageProvider(v UpdateProvisioningSettingsRequestProvisioningSettingsDeployStorageProvider) {
	o.DeployStorageProvider = &v
}

// GetWindowsPassword returns the WindowsPassword field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetWindowsPassword() string {
	if o == nil || IsNil(o.WindowsPassword) {
		var ret string
		return ret
	}
	return *o.WindowsPassword
}

// GetWindowsPasswordOk returns a tuple with the WindowsPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetWindowsPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.WindowsPassword) {
		return nil, false
	}
	return o.WindowsPassword, true
}

// IsSetWindowsPassword returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetWindowsPassword() bool {
	if o != nil && !IsNil(o.WindowsPassword) {
		return true
	}

	return false
}

// SetWindowsPassword gets a reference to the given string and assigns it to the WindowsPassword field.
func (o *ProvisioningSettingsUpdate) SetWindowsPassword(v string) {
	o.WindowsPassword = &v
}

// GetPxeRootPassword returns the PxeRootPassword field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetPxeRootPassword() string {
	if o == nil || IsNil(o.PxeRootPassword) {
		var ret string
		return ret
	}
	return *o.PxeRootPassword
}

// GetPxeRootPasswordOk returns a tuple with the PxeRootPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetPxeRootPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.PxeRootPassword) {
		return nil, false
	}
	return o.PxeRootPassword, true
}

// IsSetPxeRootPassword returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetPxeRootPassword() bool {
	if o != nil && !IsNil(o.PxeRootPassword) {
		return true
	}

	return false
}

// SetPxeRootPassword gets a reference to the given string and assigns it to the PxeRootPassword field.
func (o *ProvisioningSettingsUpdate) SetPxeRootPassword(v string) {
	o.PxeRootPassword = &v
}

// GetDefaultTemplateType returns the DefaultTemplateType field value if set, zero value otherwise.
func (o *ProvisioningSettingsUpdate) GetDefaultTemplateType() UpdateProvisioningSettingsRequestProvisioningSettingsDefaultTemplateType {
	if o == nil || IsNil(o.DefaultTemplateType) {
		var ret UpdateProvisioningSettingsRequestProvisioningSettingsDefaultTemplateType
		return ret
	}
	return *o.DefaultTemplateType
}

// GetDefaultTemplateTypeOk returns a tuple with the DefaultTemplateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvisioningSettingsUpdate) GetDefaultTemplateTypeOk() (*UpdateProvisioningSettingsRequestProvisioningSettingsDefaultTemplateType, bool) {
	if o == nil || IsNil(o.DefaultTemplateType) {
		return nil, false
	}
	return o.DefaultTemplateType, true
}

// IsSetDefaultTemplateType returns a boolean if a field has been set.
func (o *ProvisioningSettingsUpdate) IsSetDefaultTemplateType() bool {
	if o != nil && !IsNil(o.DefaultTemplateType) {
		return true
	}

	return false
}

// SetDefaultTemplateType gets a reference to the given UpdateProvisioningSettingsRequestProvisioningSettingsDefaultTemplateType and assigns it to the DefaultTemplateType field.
func (o *ProvisioningSettingsUpdate) SetDefaultTemplateType(v UpdateProvisioningSettingsRequestProvisioningSettingsDefaultTemplateType) {
	o.DefaultTemplateType = &v
}

func (o ProvisioningSettingsUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProvisioningSettingsUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowZoneSelection) {
		toSerialize["allowZoneSelection"] = o.AllowZoneSelection
	}
	if !IsNil(o.AllowServerSelection) {
		toSerialize["allowServerSelection"] = o.AllowServerSelection
	}
	if !IsNil(o.RequireEnvironments) {
		toSerialize["requireEnvironments"] = o.RequireEnvironments
	}
	if !IsNil(o.ShowPricing) {
		toSerialize["showPricing"] = o.ShowPricing
	}
	if !IsNil(o.HideDatastoreStats) {
		toSerialize["hideDatastoreStats"] = o.HideDatastoreStats
	}
	if !IsNil(o.CrossTenantNamingPolicies) {
		toSerialize["crossTenantNamingPolicies"] = o.CrossTenantNamingPolicies
	}
	if !IsNil(o.ReuseSequence) {
		toSerialize["reuseSequence"] = o.ReuseSequence
	}
	if !IsNil(o.CloudInitUsername) {
		toSerialize["cloudInitUsername"] = o.CloudInitUsername
	}
	if !IsNil(o.CloudInitPassword) {
		toSerialize["cloudInitPassword"] = o.CloudInitPassword
	}
	if !IsNil(o.CloudInitKeyPair) {
		toSerialize["cloudInitKeyPair"] = o.CloudInitKeyPair
	}
	if !IsNil(o.DeployStorageProvider) {
		toSerialize["deployStorageProvider"] = o.DeployStorageProvider
	}
	if !IsNil(o.WindowsPassword) {
		toSerialize["windowsPassword"] = o.WindowsPassword
	}
	if !IsNil(o.PxeRootPassword) {
		toSerialize["pxeRootPassword"] = o.PxeRootPassword
	}
	if !IsNil(o.DefaultTemplateType) {
		toSerialize["defaultTemplateType"] = o.DefaultTemplateType
	}
	return toSerialize, nil
}

type NullableProvisioningSettingsUpdate struct {
	value *ProvisioningSettingsUpdate
	isSet bool
}

func (v NullableProvisioningSettingsUpdate) Get() *ProvisioningSettingsUpdate {
	return v.value
}

func (v *NullableProvisioningSettingsUpdate) Set(val *ProvisioningSettingsUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningSettingsUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningSettingsUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningSettingsUpdate(val *ProvisioningSettingsUpdate) *NullableProvisioningSettingsUpdate {
	return &NullableProvisioningSettingsUpdate{value: val, isSet: true}
}

func (v NullableProvisioningSettingsUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningSettingsUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


