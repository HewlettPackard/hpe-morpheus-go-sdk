/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UpdateWhitelabelSettingsRequestWhitelabelSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateWhitelabelSettingsRequestWhitelabelSettings{}

// UpdateWhitelabelSettingsRequestWhitelabelSettings struct for UpdateWhitelabelSettingsRequestWhitelabelSettings
type UpdateWhitelabelSettingsRequestWhitelabelSettings struct {
	// Can be used to enable / disable whitelabel feature
	Enabled *bool `json:"enabled,omitempty"`
	// Appliance name. Master account only
	ApplianceName *string `json:"applianceName,omitempty"`
	// Can be used to disable support menu
	DisableSupportMenu *bool `json:"disableSupportMenu,omitempty"`
	// Resets header logo to default header logo
	ResetHeaderLogo *bool `json:"resetHeaderLogo,omitempty"`
	// Resets footer logo to default footer logo
	ResetFooterLogo *bool `json:"resetFooterLogo,omitempty"`
	// Resets login logo to default login logo
	ResetLoginLogo *bool `json:"resetLoginLogo,omitempty"`
	// Resets favicon to default favicon
	ResetFavicon *bool `json:"resetFavicon,omitempty"`
	// Header background color
	HeaderBgColor *string `json:"headerBgColor,omitempty"`
	// Header foreground color
	HeaderFgColor *string `json:"headerFgColor,omitempty"`
	// Nav background color
	NavBgColor *string `json:"navBgColor,omitempty"`
	// Nav foreground color
	NavFgColor *string `json:"navFgColor,omitempty"`
	// Nav hover color
	NavHoverColor *string `json:"navHoverColor,omitempty"`
	// Primary button background color
	PrimaryButtonBgColor *string `json:"primaryButtonBgColor,omitempty"`
	// Primary button foreground color
	PrimaryButtonFgColor *string `json:"primaryButtonFgColor,omitempty"`
	// Primary button hover background color
	PrimaryButtonHoverBgColor *string `json:"primaryButtonHoverBgColor,omitempty"`
	// Primary button hover foreground color
	PrimaryButtonHoverFgColor *string `json:"primaryButtonHoverFgColor,omitempty"`
	// Footer background color
	FooterBgColor *string `json:"footerBgColor,omitempty"`
	// Footer foreground color
	FooterFgColor *string `json:"footerFgColor,omitempty"`
	// Login background color
	LoginBgColor *string `json:"loginBgColor,omitempty"`
	// Copyright String
	CopyrightString *string `json:"copyrightString,omitempty"`
	// Override CSS
	OverrideCss *string `json:"overrideCss,omitempty"`
	// Terms of use content
	TermsOfUse *string `json:"termsOfUse,omitempty"`
	// Privacy policy content
	PrivacyPolicy *string `json:"privacyPolicy,omitempty"`
	SupportMenuLinks []UpdateWhitelabelSettingsRequestWhitelabelSettingsSupportMenuLinksInner `json:"supportMenuLinks,omitempty"`
}

// NewUpdateWhitelabelSettingsRequestWhitelabelSettings instantiates a new UpdateWhitelabelSettingsRequestWhitelabelSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateWhitelabelSettingsRequestWhitelabelSettings() *UpdateWhitelabelSettingsRequestWhitelabelSettings {
	this := UpdateWhitelabelSettingsRequestWhitelabelSettings{}
	return &this
}

// NewUpdateWhitelabelSettingsRequestWhitelabelSettingsWithDefaults instantiates a new UpdateWhitelabelSettingsRequestWhitelabelSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateWhitelabelSettingsRequestWhitelabelSettingsWithDefaults() *UpdateWhitelabelSettingsRequestWhitelabelSettings {
	this := UpdateWhitelabelSettingsRequestWhitelabelSettings{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// IsSetEnabled returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetApplianceName returns the ApplianceName field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetApplianceName() string {
	if o == nil || IsNil(o.ApplianceName) {
		var ret string
		return ret
	}
	return *o.ApplianceName
}

// GetApplianceNameOk returns a tuple with the ApplianceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetApplianceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApplianceName) {
		return nil, false
	}
	return o.ApplianceName, true
}

// IsSetApplianceName returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetApplianceName() bool {
	if o != nil && !IsNil(o.ApplianceName) {
		return true
	}

	return false
}

// SetApplianceName gets a reference to the given string and assigns it to the ApplianceName field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetApplianceName(v string) {
	o.ApplianceName = &v
}

// GetDisableSupportMenu returns the DisableSupportMenu field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetDisableSupportMenu() bool {
	if o == nil || IsNil(o.DisableSupportMenu) {
		var ret bool
		return ret
	}
	return *o.DisableSupportMenu
}

// GetDisableSupportMenuOk returns a tuple with the DisableSupportMenu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetDisableSupportMenuOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableSupportMenu) {
		return nil, false
	}
	return o.DisableSupportMenu, true
}

// IsSetDisableSupportMenu returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetDisableSupportMenu() bool {
	if o != nil && !IsNil(o.DisableSupportMenu) {
		return true
	}

	return false
}

// SetDisableSupportMenu gets a reference to the given bool and assigns it to the DisableSupportMenu field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetDisableSupportMenu(v bool) {
	o.DisableSupportMenu = &v
}

// GetResetHeaderLogo returns the ResetHeaderLogo field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetResetHeaderLogo() bool {
	if o == nil || IsNil(o.ResetHeaderLogo) {
		var ret bool
		return ret
	}
	return *o.ResetHeaderLogo
}

// GetResetHeaderLogoOk returns a tuple with the ResetHeaderLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetResetHeaderLogoOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetHeaderLogo) {
		return nil, false
	}
	return o.ResetHeaderLogo, true
}

// IsSetResetHeaderLogo returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetResetHeaderLogo() bool {
	if o != nil && !IsNil(o.ResetHeaderLogo) {
		return true
	}

	return false
}

// SetResetHeaderLogo gets a reference to the given bool and assigns it to the ResetHeaderLogo field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetResetHeaderLogo(v bool) {
	o.ResetHeaderLogo = &v
}

// GetResetFooterLogo returns the ResetFooterLogo field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetResetFooterLogo() bool {
	if o == nil || IsNil(o.ResetFooterLogo) {
		var ret bool
		return ret
	}
	return *o.ResetFooterLogo
}

// GetResetFooterLogoOk returns a tuple with the ResetFooterLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetResetFooterLogoOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetFooterLogo) {
		return nil, false
	}
	return o.ResetFooterLogo, true
}

// IsSetResetFooterLogo returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetResetFooterLogo() bool {
	if o != nil && !IsNil(o.ResetFooterLogo) {
		return true
	}

	return false
}

// SetResetFooterLogo gets a reference to the given bool and assigns it to the ResetFooterLogo field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetResetFooterLogo(v bool) {
	o.ResetFooterLogo = &v
}

// GetResetLoginLogo returns the ResetLoginLogo field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetResetLoginLogo() bool {
	if o == nil || IsNil(o.ResetLoginLogo) {
		var ret bool
		return ret
	}
	return *o.ResetLoginLogo
}

// GetResetLoginLogoOk returns a tuple with the ResetLoginLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetResetLoginLogoOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetLoginLogo) {
		return nil, false
	}
	return o.ResetLoginLogo, true
}

// IsSetResetLoginLogo returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetResetLoginLogo() bool {
	if o != nil && !IsNil(o.ResetLoginLogo) {
		return true
	}

	return false
}

// SetResetLoginLogo gets a reference to the given bool and assigns it to the ResetLoginLogo field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetResetLoginLogo(v bool) {
	o.ResetLoginLogo = &v
}

// GetResetFavicon returns the ResetFavicon field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetResetFavicon() bool {
	if o == nil || IsNil(o.ResetFavicon) {
		var ret bool
		return ret
	}
	return *o.ResetFavicon
}

// GetResetFaviconOk returns a tuple with the ResetFavicon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetResetFaviconOk() (*bool, bool) {
	if o == nil || IsNil(o.ResetFavicon) {
		return nil, false
	}
	return o.ResetFavicon, true
}

// IsSetResetFavicon returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetResetFavicon() bool {
	if o != nil && !IsNil(o.ResetFavicon) {
		return true
	}

	return false
}

// SetResetFavicon gets a reference to the given bool and assigns it to the ResetFavicon field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetResetFavicon(v bool) {
	o.ResetFavicon = &v
}

// GetHeaderBgColor returns the HeaderBgColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetHeaderBgColor() string {
	if o == nil || IsNil(o.HeaderBgColor) {
		var ret string
		return ret
	}
	return *o.HeaderBgColor
}

// GetHeaderBgColorOk returns a tuple with the HeaderBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetHeaderBgColorOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderBgColor) {
		return nil, false
	}
	return o.HeaderBgColor, true
}

// IsSetHeaderBgColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetHeaderBgColor() bool {
	if o != nil && !IsNil(o.HeaderBgColor) {
		return true
	}

	return false
}

// SetHeaderBgColor gets a reference to the given string and assigns it to the HeaderBgColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetHeaderBgColor(v string) {
	o.HeaderBgColor = &v
}

// GetHeaderFgColor returns the HeaderFgColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetHeaderFgColor() string {
	if o == nil || IsNil(o.HeaderFgColor) {
		var ret string
		return ret
	}
	return *o.HeaderFgColor
}

// GetHeaderFgColorOk returns a tuple with the HeaderFgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetHeaderFgColorOk() (*string, bool) {
	if o == nil || IsNil(o.HeaderFgColor) {
		return nil, false
	}
	return o.HeaderFgColor, true
}

// IsSetHeaderFgColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetHeaderFgColor() bool {
	if o != nil && !IsNil(o.HeaderFgColor) {
		return true
	}

	return false
}

// SetHeaderFgColor gets a reference to the given string and assigns it to the HeaderFgColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetHeaderFgColor(v string) {
	o.HeaderFgColor = &v
}

// GetNavBgColor returns the NavBgColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetNavBgColor() string {
	if o == nil || IsNil(o.NavBgColor) {
		var ret string
		return ret
	}
	return *o.NavBgColor
}

// GetNavBgColorOk returns a tuple with the NavBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetNavBgColorOk() (*string, bool) {
	if o == nil || IsNil(o.NavBgColor) {
		return nil, false
	}
	return o.NavBgColor, true
}

// IsSetNavBgColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetNavBgColor() bool {
	if o != nil && !IsNil(o.NavBgColor) {
		return true
	}

	return false
}

// SetNavBgColor gets a reference to the given string and assigns it to the NavBgColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetNavBgColor(v string) {
	o.NavBgColor = &v
}

// GetNavFgColor returns the NavFgColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetNavFgColor() string {
	if o == nil || IsNil(o.NavFgColor) {
		var ret string
		return ret
	}
	return *o.NavFgColor
}

// GetNavFgColorOk returns a tuple with the NavFgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetNavFgColorOk() (*string, bool) {
	if o == nil || IsNil(o.NavFgColor) {
		return nil, false
	}
	return o.NavFgColor, true
}

// IsSetNavFgColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetNavFgColor() bool {
	if o != nil && !IsNil(o.NavFgColor) {
		return true
	}

	return false
}

// SetNavFgColor gets a reference to the given string and assigns it to the NavFgColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetNavFgColor(v string) {
	o.NavFgColor = &v
}

// GetNavHoverColor returns the NavHoverColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetNavHoverColor() string {
	if o == nil || IsNil(o.NavHoverColor) {
		var ret string
		return ret
	}
	return *o.NavHoverColor
}

// GetNavHoverColorOk returns a tuple with the NavHoverColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetNavHoverColorOk() (*string, bool) {
	if o == nil || IsNil(o.NavHoverColor) {
		return nil, false
	}
	return o.NavHoverColor, true
}

// IsSetNavHoverColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetNavHoverColor() bool {
	if o != nil && !IsNil(o.NavHoverColor) {
		return true
	}

	return false
}

// SetNavHoverColor gets a reference to the given string and assigns it to the NavHoverColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetNavHoverColor(v string) {
	o.NavHoverColor = &v
}

// GetPrimaryButtonBgColor returns the PrimaryButtonBgColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetPrimaryButtonBgColor() string {
	if o == nil || IsNil(o.PrimaryButtonBgColor) {
		var ret string
		return ret
	}
	return *o.PrimaryButtonBgColor
}

// GetPrimaryButtonBgColorOk returns a tuple with the PrimaryButtonBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetPrimaryButtonBgColorOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryButtonBgColor) {
		return nil, false
	}
	return o.PrimaryButtonBgColor, true
}

// IsSetPrimaryButtonBgColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetPrimaryButtonBgColor() bool {
	if o != nil && !IsNil(o.PrimaryButtonBgColor) {
		return true
	}

	return false
}

// SetPrimaryButtonBgColor gets a reference to the given string and assigns it to the PrimaryButtonBgColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetPrimaryButtonBgColor(v string) {
	o.PrimaryButtonBgColor = &v
}

// GetPrimaryButtonFgColor returns the PrimaryButtonFgColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetPrimaryButtonFgColor() string {
	if o == nil || IsNil(o.PrimaryButtonFgColor) {
		var ret string
		return ret
	}
	return *o.PrimaryButtonFgColor
}

// GetPrimaryButtonFgColorOk returns a tuple with the PrimaryButtonFgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetPrimaryButtonFgColorOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryButtonFgColor) {
		return nil, false
	}
	return o.PrimaryButtonFgColor, true
}

// IsSetPrimaryButtonFgColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetPrimaryButtonFgColor() bool {
	if o != nil && !IsNil(o.PrimaryButtonFgColor) {
		return true
	}

	return false
}

// SetPrimaryButtonFgColor gets a reference to the given string and assigns it to the PrimaryButtonFgColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetPrimaryButtonFgColor(v string) {
	o.PrimaryButtonFgColor = &v
}

// GetPrimaryButtonHoverBgColor returns the PrimaryButtonHoverBgColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetPrimaryButtonHoverBgColor() string {
	if o == nil || IsNil(o.PrimaryButtonHoverBgColor) {
		var ret string
		return ret
	}
	return *o.PrimaryButtonHoverBgColor
}

// GetPrimaryButtonHoverBgColorOk returns a tuple with the PrimaryButtonHoverBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetPrimaryButtonHoverBgColorOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryButtonHoverBgColor) {
		return nil, false
	}
	return o.PrimaryButtonHoverBgColor, true
}

// IsSetPrimaryButtonHoverBgColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetPrimaryButtonHoverBgColor() bool {
	if o != nil && !IsNil(o.PrimaryButtonHoverBgColor) {
		return true
	}

	return false
}

// SetPrimaryButtonHoverBgColor gets a reference to the given string and assigns it to the PrimaryButtonHoverBgColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetPrimaryButtonHoverBgColor(v string) {
	o.PrimaryButtonHoverBgColor = &v
}

// GetPrimaryButtonHoverFgColor returns the PrimaryButtonHoverFgColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetPrimaryButtonHoverFgColor() string {
	if o == nil || IsNil(o.PrimaryButtonHoverFgColor) {
		var ret string
		return ret
	}
	return *o.PrimaryButtonHoverFgColor
}

// GetPrimaryButtonHoverFgColorOk returns a tuple with the PrimaryButtonHoverFgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetPrimaryButtonHoverFgColorOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryButtonHoverFgColor) {
		return nil, false
	}
	return o.PrimaryButtonHoverFgColor, true
}

// IsSetPrimaryButtonHoverFgColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetPrimaryButtonHoverFgColor() bool {
	if o != nil && !IsNil(o.PrimaryButtonHoverFgColor) {
		return true
	}

	return false
}

// SetPrimaryButtonHoverFgColor gets a reference to the given string and assigns it to the PrimaryButtonHoverFgColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetPrimaryButtonHoverFgColor(v string) {
	o.PrimaryButtonHoverFgColor = &v
}

// GetFooterBgColor returns the FooterBgColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetFooterBgColor() string {
	if o == nil || IsNil(o.FooterBgColor) {
		var ret string
		return ret
	}
	return *o.FooterBgColor
}

// GetFooterBgColorOk returns a tuple with the FooterBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetFooterBgColorOk() (*string, bool) {
	if o == nil || IsNil(o.FooterBgColor) {
		return nil, false
	}
	return o.FooterBgColor, true
}

// IsSetFooterBgColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetFooterBgColor() bool {
	if o != nil && !IsNil(o.FooterBgColor) {
		return true
	}

	return false
}

// SetFooterBgColor gets a reference to the given string and assigns it to the FooterBgColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetFooterBgColor(v string) {
	o.FooterBgColor = &v
}

// GetFooterFgColor returns the FooterFgColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetFooterFgColor() string {
	if o == nil || IsNil(o.FooterFgColor) {
		var ret string
		return ret
	}
	return *o.FooterFgColor
}

// GetFooterFgColorOk returns a tuple with the FooterFgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetFooterFgColorOk() (*string, bool) {
	if o == nil || IsNil(o.FooterFgColor) {
		return nil, false
	}
	return o.FooterFgColor, true
}

// IsSetFooterFgColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetFooterFgColor() bool {
	if o != nil && !IsNil(o.FooterFgColor) {
		return true
	}

	return false
}

// SetFooterFgColor gets a reference to the given string and assigns it to the FooterFgColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetFooterFgColor(v string) {
	o.FooterFgColor = &v
}

// GetLoginBgColor returns the LoginBgColor field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetLoginBgColor() string {
	if o == nil || IsNil(o.LoginBgColor) {
		var ret string
		return ret
	}
	return *o.LoginBgColor
}

// GetLoginBgColorOk returns a tuple with the LoginBgColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetLoginBgColorOk() (*string, bool) {
	if o == nil || IsNil(o.LoginBgColor) {
		return nil, false
	}
	return o.LoginBgColor, true
}

// IsSetLoginBgColor returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetLoginBgColor() bool {
	if o != nil && !IsNil(o.LoginBgColor) {
		return true
	}

	return false
}

// SetLoginBgColor gets a reference to the given string and assigns it to the LoginBgColor field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetLoginBgColor(v string) {
	o.LoginBgColor = &v
}

// GetCopyrightString returns the CopyrightString field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetCopyrightString() string {
	if o == nil || IsNil(o.CopyrightString) {
		var ret string
		return ret
	}
	return *o.CopyrightString
}

// GetCopyrightStringOk returns a tuple with the CopyrightString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetCopyrightStringOk() (*string, bool) {
	if o == nil || IsNil(o.CopyrightString) {
		return nil, false
	}
	return o.CopyrightString, true
}

// IsSetCopyrightString returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetCopyrightString() bool {
	if o != nil && !IsNil(o.CopyrightString) {
		return true
	}

	return false
}

// SetCopyrightString gets a reference to the given string and assigns it to the CopyrightString field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetCopyrightString(v string) {
	o.CopyrightString = &v
}

// GetOverrideCss returns the OverrideCss field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetOverrideCss() string {
	if o == nil || IsNil(o.OverrideCss) {
		var ret string
		return ret
	}
	return *o.OverrideCss
}

// GetOverrideCssOk returns a tuple with the OverrideCss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetOverrideCssOk() (*string, bool) {
	if o == nil || IsNil(o.OverrideCss) {
		return nil, false
	}
	return o.OverrideCss, true
}

// IsSetOverrideCss returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetOverrideCss() bool {
	if o != nil && !IsNil(o.OverrideCss) {
		return true
	}

	return false
}

// SetOverrideCss gets a reference to the given string and assigns it to the OverrideCss field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetOverrideCss(v string) {
	o.OverrideCss = &v
}

// GetTermsOfUse returns the TermsOfUse field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetTermsOfUse() string {
	if o == nil || IsNil(o.TermsOfUse) {
		var ret string
		return ret
	}
	return *o.TermsOfUse
}

// GetTermsOfUseOk returns a tuple with the TermsOfUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetTermsOfUseOk() (*string, bool) {
	if o == nil || IsNil(o.TermsOfUse) {
		return nil, false
	}
	return o.TermsOfUse, true
}

// IsSetTermsOfUse returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetTermsOfUse() bool {
	if o != nil && !IsNil(o.TermsOfUse) {
		return true
	}

	return false
}

// SetTermsOfUse gets a reference to the given string and assigns it to the TermsOfUse field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetTermsOfUse(v string) {
	o.TermsOfUse = &v
}

// GetPrivacyPolicy returns the PrivacyPolicy field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetPrivacyPolicy() string {
	if o == nil || IsNil(o.PrivacyPolicy) {
		var ret string
		return ret
	}
	return *o.PrivacyPolicy
}

// GetPrivacyPolicyOk returns a tuple with the PrivacyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetPrivacyPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivacyPolicy) {
		return nil, false
	}
	return o.PrivacyPolicy, true
}

// IsSetPrivacyPolicy returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetPrivacyPolicy() bool {
	if o != nil && !IsNil(o.PrivacyPolicy) {
		return true
	}

	return false
}

// SetPrivacyPolicy gets a reference to the given string and assigns it to the PrivacyPolicy field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetPrivacyPolicy(v string) {
	o.PrivacyPolicy = &v
}

// GetSupportMenuLinks returns the SupportMenuLinks field value if set, zero value otherwise.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetSupportMenuLinks() []UpdateWhitelabelSettingsRequestWhitelabelSettingsSupportMenuLinksInner {
	if o == nil || IsNil(o.SupportMenuLinks) {
		var ret []UpdateWhitelabelSettingsRequestWhitelabelSettingsSupportMenuLinksInner
		return ret
	}
	return o.SupportMenuLinks
}

// GetSupportMenuLinksOk returns a tuple with the SupportMenuLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) GetSupportMenuLinksOk() ([]UpdateWhitelabelSettingsRequestWhitelabelSettingsSupportMenuLinksInner, bool) {
	if o == nil || IsNil(o.SupportMenuLinks) {
		return nil, false
	}
	return o.SupportMenuLinks, true
}

// IsSetSupportMenuLinks returns a boolean if a field has been set.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) IsSetSupportMenuLinks() bool {
	if o != nil && !IsNil(o.SupportMenuLinks) {
		return true
	}

	return false
}

// SetSupportMenuLinks gets a reference to the given []UpdateWhitelabelSettingsRequestWhitelabelSettingsSupportMenuLinksInner and assigns it to the SupportMenuLinks field.
func (o *UpdateWhitelabelSettingsRequestWhitelabelSettings) SetSupportMenuLinks(v []UpdateWhitelabelSettingsRequestWhitelabelSettingsSupportMenuLinksInner) {
	o.SupportMenuLinks = v
}

func (o UpdateWhitelabelSettingsRequestWhitelabelSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateWhitelabelSettingsRequestWhitelabelSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ApplianceName) {
		toSerialize["applianceName"] = o.ApplianceName
	}
	if !IsNil(o.DisableSupportMenu) {
		toSerialize["disableSupportMenu"] = o.DisableSupportMenu
	}
	if !IsNil(o.ResetHeaderLogo) {
		toSerialize["resetHeaderLogo"] = o.ResetHeaderLogo
	}
	if !IsNil(o.ResetFooterLogo) {
		toSerialize["resetFooterLogo"] = o.ResetFooterLogo
	}
	if !IsNil(o.ResetLoginLogo) {
		toSerialize["resetLoginLogo"] = o.ResetLoginLogo
	}
	if !IsNil(o.ResetFavicon) {
		toSerialize["resetFavicon"] = o.ResetFavicon
	}
	if !IsNil(o.HeaderBgColor) {
		toSerialize["headerBgColor"] = o.HeaderBgColor
	}
	if !IsNil(o.HeaderFgColor) {
		toSerialize["headerFgColor"] = o.HeaderFgColor
	}
	if !IsNil(o.NavBgColor) {
		toSerialize["navBgColor"] = o.NavBgColor
	}
	if !IsNil(o.NavFgColor) {
		toSerialize["navFgColor"] = o.NavFgColor
	}
	if !IsNil(o.NavHoverColor) {
		toSerialize["navHoverColor"] = o.NavHoverColor
	}
	if !IsNil(o.PrimaryButtonBgColor) {
		toSerialize["primaryButtonBgColor"] = o.PrimaryButtonBgColor
	}
	if !IsNil(o.PrimaryButtonFgColor) {
		toSerialize["primaryButtonFgColor"] = o.PrimaryButtonFgColor
	}
	if !IsNil(o.PrimaryButtonHoverBgColor) {
		toSerialize["primaryButtonHoverBgColor"] = o.PrimaryButtonHoverBgColor
	}
	if !IsNil(o.PrimaryButtonHoverFgColor) {
		toSerialize["primaryButtonHoverFgColor"] = o.PrimaryButtonHoverFgColor
	}
	if !IsNil(o.FooterBgColor) {
		toSerialize["footerBgColor"] = o.FooterBgColor
	}
	if !IsNil(o.FooterFgColor) {
		toSerialize["footerFgColor"] = o.FooterFgColor
	}
	if !IsNil(o.LoginBgColor) {
		toSerialize["loginBgColor"] = o.LoginBgColor
	}
	if !IsNil(o.CopyrightString) {
		toSerialize["copyrightString"] = o.CopyrightString
	}
	if !IsNil(o.OverrideCss) {
		toSerialize["overrideCss"] = o.OverrideCss
	}
	if !IsNil(o.TermsOfUse) {
		toSerialize["termsOfUse"] = o.TermsOfUse
	}
	if !IsNil(o.PrivacyPolicy) {
		toSerialize["privacyPolicy"] = o.PrivacyPolicy
	}
	if !IsNil(o.SupportMenuLinks) {
		toSerialize["supportMenuLinks"] = o.SupportMenuLinks
	}
	return toSerialize, nil
}

type NullableUpdateWhitelabelSettingsRequestWhitelabelSettings struct {
	value *UpdateWhitelabelSettingsRequestWhitelabelSettings
	isSet bool
}

func (v NullableUpdateWhitelabelSettingsRequestWhitelabelSettings) Get() *UpdateWhitelabelSettingsRequestWhitelabelSettings {
	return v.value
}

func (v *NullableUpdateWhitelabelSettingsRequestWhitelabelSettings) Set(val *UpdateWhitelabelSettingsRequestWhitelabelSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateWhitelabelSettingsRequestWhitelabelSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateWhitelabelSettingsRequestWhitelabelSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateWhitelabelSettingsRequestWhitelabelSettings(val *UpdateWhitelabelSettingsRequestWhitelabelSettings) *NullableUpdateWhitelabelSettingsRequestWhitelabelSettings {
	return &NullableUpdateWhitelabelSettingsRequestWhitelabelSettings{value: val, isSet: true}
}

func (v NullableUpdateWhitelabelSettingsRequestWhitelabelSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateWhitelabelSettingsRequestWhitelabelSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


