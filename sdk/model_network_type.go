/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the NetworkType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkType{}

// NetworkType struct for NetworkType
type NetworkType struct {
	Id *int64 `json:"id,omitempty"`
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Category *string `json:"category,omitempty"`
	ExternalType *string `json:"externalType,omitempty"`
	Creatable *bool `json:"creatable,omitempty"`
	Overlay *bool `json:"overlay,omitempty"`
	NameEditable *bool `json:"nameEditable,omitempty"`
	CidrRequired *bool `json:"cidrRequired,omitempty"`
	CidrEditable *bool `json:"cidrEditable,omitempty"`
	DhcpServerEditable *bool `json:"dhcpServerEditable,omitempty"`
	DnsEditable *bool `json:"dnsEditable,omitempty"`
	GatewayEditable *bool `json:"gatewayEditable,omitempty"`
	VlanIdEditable *bool `json:"vlanIdEditable,omitempty"`
	StaticOverrideEditable *bool `json:"staticOverrideEditable,omitempty"`
	NetworkDomainEditable *bool `json:"networkDomainEditable,omitempty"`
	CanAssignPool *bool `json:"canAssignPool,omitempty"`
	Deletable *bool `json:"deletable,omitempty"`
	HasNetworkServer *bool `json:"hasNetworkServer,omitempty"`
	HasCidr *bool `json:"hasCidr,omitempty"`
	HasStaticRoutes *bool `json:"hasStaticRoutes,omitempty"`
	HasFloatingIps *bool `json:"hasFloatingIps,omitempty"`
	OptionTypes []ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner `json:"optionTypes,omitempty"`
	RouteOptionTypes []GetInstanceTypeProvisioning200ResponseAllOfInstanceTypeInstanceTypeLayoutsInnerProvisionTypeNetworkTypesInnerRouteOptionTypesInner `json:"routeOptionTypes,omitempty"`
}

// NewNetworkType instantiates a new NetworkType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkType() *NetworkType {
	this := NetworkType{}
	return &this
}

// NewNetworkTypeWithDefaults instantiates a new NetworkType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkTypeWithDefaults() *NetworkType {
	this := NetworkType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NetworkType) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *NetworkType) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *NetworkType) SetId(v int64) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *NetworkType) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// IsSetCode returns a boolean if a field has been set.
func (o *NetworkType) IsSetCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *NetworkType) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NetworkType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *NetworkType) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NetworkType) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NetworkType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *NetworkType) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NetworkType) SetDescription(v string) {
	o.Description = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *NetworkType) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// IsSetCategory returns a boolean if a field has been set.
func (o *NetworkType) IsSetCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *NetworkType) SetCategory(v string) {
	o.Category = &v
}

// GetExternalType returns the ExternalType field value if set, zero value otherwise.
func (o *NetworkType) GetExternalType() string {
	if o == nil || IsNil(o.ExternalType) {
		var ret string
		return ret
	}
	return *o.ExternalType
}

// GetExternalTypeOk returns a tuple with the ExternalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetExternalTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalType) {
		return nil, false
	}
	return o.ExternalType, true
}

// IsSetExternalType returns a boolean if a field has been set.
func (o *NetworkType) IsSetExternalType() bool {
	if o != nil && !IsNil(o.ExternalType) {
		return true
	}

	return false
}

// SetExternalType gets a reference to the given string and assigns it to the ExternalType field.
func (o *NetworkType) SetExternalType(v string) {
	o.ExternalType = &v
}

// GetCreatable returns the Creatable field value if set, zero value otherwise.
func (o *NetworkType) GetCreatable() bool {
	if o == nil || IsNil(o.Creatable) {
		var ret bool
		return ret
	}
	return *o.Creatable
}

// GetCreatableOk returns a tuple with the Creatable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetCreatableOk() (*bool, bool) {
	if o == nil || IsNil(o.Creatable) {
		return nil, false
	}
	return o.Creatable, true
}

// IsSetCreatable returns a boolean if a field has been set.
func (o *NetworkType) IsSetCreatable() bool {
	if o != nil && !IsNil(o.Creatable) {
		return true
	}

	return false
}

// SetCreatable gets a reference to the given bool and assigns it to the Creatable field.
func (o *NetworkType) SetCreatable(v bool) {
	o.Creatable = &v
}

// GetOverlay returns the Overlay field value if set, zero value otherwise.
func (o *NetworkType) GetOverlay() bool {
	if o == nil || IsNil(o.Overlay) {
		var ret bool
		return ret
	}
	return *o.Overlay
}

// GetOverlayOk returns a tuple with the Overlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetOverlayOk() (*bool, bool) {
	if o == nil || IsNil(o.Overlay) {
		return nil, false
	}
	return o.Overlay, true
}

// IsSetOverlay returns a boolean if a field has been set.
func (o *NetworkType) IsSetOverlay() bool {
	if o != nil && !IsNil(o.Overlay) {
		return true
	}

	return false
}

// SetOverlay gets a reference to the given bool and assigns it to the Overlay field.
func (o *NetworkType) SetOverlay(v bool) {
	o.Overlay = &v
}

// GetNameEditable returns the NameEditable field value if set, zero value otherwise.
func (o *NetworkType) GetNameEditable() bool {
	if o == nil || IsNil(o.NameEditable) {
		var ret bool
		return ret
	}
	return *o.NameEditable
}

// GetNameEditableOk returns a tuple with the NameEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetNameEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.NameEditable) {
		return nil, false
	}
	return o.NameEditable, true
}

// IsSetNameEditable returns a boolean if a field has been set.
func (o *NetworkType) IsSetNameEditable() bool {
	if o != nil && !IsNil(o.NameEditable) {
		return true
	}

	return false
}

// SetNameEditable gets a reference to the given bool and assigns it to the NameEditable field.
func (o *NetworkType) SetNameEditable(v bool) {
	o.NameEditable = &v
}

// GetCidrRequired returns the CidrRequired field value if set, zero value otherwise.
func (o *NetworkType) GetCidrRequired() bool {
	if o == nil || IsNil(o.CidrRequired) {
		var ret bool
		return ret
	}
	return *o.CidrRequired
}

// GetCidrRequiredOk returns a tuple with the CidrRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetCidrRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.CidrRequired) {
		return nil, false
	}
	return o.CidrRequired, true
}

// IsSetCidrRequired returns a boolean if a field has been set.
func (o *NetworkType) IsSetCidrRequired() bool {
	if o != nil && !IsNil(o.CidrRequired) {
		return true
	}

	return false
}

// SetCidrRequired gets a reference to the given bool and assigns it to the CidrRequired field.
func (o *NetworkType) SetCidrRequired(v bool) {
	o.CidrRequired = &v
}

// GetCidrEditable returns the CidrEditable field value if set, zero value otherwise.
func (o *NetworkType) GetCidrEditable() bool {
	if o == nil || IsNil(o.CidrEditable) {
		var ret bool
		return ret
	}
	return *o.CidrEditable
}

// GetCidrEditableOk returns a tuple with the CidrEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetCidrEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.CidrEditable) {
		return nil, false
	}
	return o.CidrEditable, true
}

// IsSetCidrEditable returns a boolean if a field has been set.
func (o *NetworkType) IsSetCidrEditable() bool {
	if o != nil && !IsNil(o.CidrEditable) {
		return true
	}

	return false
}

// SetCidrEditable gets a reference to the given bool and assigns it to the CidrEditable field.
func (o *NetworkType) SetCidrEditable(v bool) {
	o.CidrEditable = &v
}

// GetDhcpServerEditable returns the DhcpServerEditable field value if set, zero value otherwise.
func (o *NetworkType) GetDhcpServerEditable() bool {
	if o == nil || IsNil(o.DhcpServerEditable) {
		var ret bool
		return ret
	}
	return *o.DhcpServerEditable
}

// GetDhcpServerEditableOk returns a tuple with the DhcpServerEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetDhcpServerEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.DhcpServerEditable) {
		return nil, false
	}
	return o.DhcpServerEditable, true
}

// IsSetDhcpServerEditable returns a boolean if a field has been set.
func (o *NetworkType) IsSetDhcpServerEditable() bool {
	if o != nil && !IsNil(o.DhcpServerEditable) {
		return true
	}

	return false
}

// SetDhcpServerEditable gets a reference to the given bool and assigns it to the DhcpServerEditable field.
func (o *NetworkType) SetDhcpServerEditable(v bool) {
	o.DhcpServerEditable = &v
}

// GetDnsEditable returns the DnsEditable field value if set, zero value otherwise.
func (o *NetworkType) GetDnsEditable() bool {
	if o == nil || IsNil(o.DnsEditable) {
		var ret bool
		return ret
	}
	return *o.DnsEditable
}

// GetDnsEditableOk returns a tuple with the DnsEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetDnsEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.DnsEditable) {
		return nil, false
	}
	return o.DnsEditable, true
}

// IsSetDnsEditable returns a boolean if a field has been set.
func (o *NetworkType) IsSetDnsEditable() bool {
	if o != nil && !IsNil(o.DnsEditable) {
		return true
	}

	return false
}

// SetDnsEditable gets a reference to the given bool and assigns it to the DnsEditable field.
func (o *NetworkType) SetDnsEditable(v bool) {
	o.DnsEditable = &v
}

// GetGatewayEditable returns the GatewayEditable field value if set, zero value otherwise.
func (o *NetworkType) GetGatewayEditable() bool {
	if o == nil || IsNil(o.GatewayEditable) {
		var ret bool
		return ret
	}
	return *o.GatewayEditable
}

// GetGatewayEditableOk returns a tuple with the GatewayEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetGatewayEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.GatewayEditable) {
		return nil, false
	}
	return o.GatewayEditable, true
}

// IsSetGatewayEditable returns a boolean if a field has been set.
func (o *NetworkType) IsSetGatewayEditable() bool {
	if o != nil && !IsNil(o.GatewayEditable) {
		return true
	}

	return false
}

// SetGatewayEditable gets a reference to the given bool and assigns it to the GatewayEditable field.
func (o *NetworkType) SetGatewayEditable(v bool) {
	o.GatewayEditable = &v
}

// GetVlanIdEditable returns the VlanIdEditable field value if set, zero value otherwise.
func (o *NetworkType) GetVlanIdEditable() bool {
	if o == nil || IsNil(o.VlanIdEditable) {
		var ret bool
		return ret
	}
	return *o.VlanIdEditable
}

// GetVlanIdEditableOk returns a tuple with the VlanIdEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetVlanIdEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.VlanIdEditable) {
		return nil, false
	}
	return o.VlanIdEditable, true
}

// IsSetVlanIdEditable returns a boolean if a field has been set.
func (o *NetworkType) IsSetVlanIdEditable() bool {
	if o != nil && !IsNil(o.VlanIdEditable) {
		return true
	}

	return false
}

// SetVlanIdEditable gets a reference to the given bool and assigns it to the VlanIdEditable field.
func (o *NetworkType) SetVlanIdEditable(v bool) {
	o.VlanIdEditable = &v
}

// GetStaticOverrideEditable returns the StaticOverrideEditable field value if set, zero value otherwise.
func (o *NetworkType) GetStaticOverrideEditable() bool {
	if o == nil || IsNil(o.StaticOverrideEditable) {
		var ret bool
		return ret
	}
	return *o.StaticOverrideEditable
}

// GetStaticOverrideEditableOk returns a tuple with the StaticOverrideEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetStaticOverrideEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.StaticOverrideEditable) {
		return nil, false
	}
	return o.StaticOverrideEditable, true
}

// IsSetStaticOverrideEditable returns a boolean if a field has been set.
func (o *NetworkType) IsSetStaticOverrideEditable() bool {
	if o != nil && !IsNil(o.StaticOverrideEditable) {
		return true
	}

	return false
}

// SetStaticOverrideEditable gets a reference to the given bool and assigns it to the StaticOverrideEditable field.
func (o *NetworkType) SetStaticOverrideEditable(v bool) {
	o.StaticOverrideEditable = &v
}

// GetNetworkDomainEditable returns the NetworkDomainEditable field value if set, zero value otherwise.
func (o *NetworkType) GetNetworkDomainEditable() bool {
	if o == nil || IsNil(o.NetworkDomainEditable) {
		var ret bool
		return ret
	}
	return *o.NetworkDomainEditable
}

// GetNetworkDomainEditableOk returns a tuple with the NetworkDomainEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetNetworkDomainEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.NetworkDomainEditable) {
		return nil, false
	}
	return o.NetworkDomainEditable, true
}

// IsSetNetworkDomainEditable returns a boolean if a field has been set.
func (o *NetworkType) IsSetNetworkDomainEditable() bool {
	if o != nil && !IsNil(o.NetworkDomainEditable) {
		return true
	}

	return false
}

// SetNetworkDomainEditable gets a reference to the given bool and assigns it to the NetworkDomainEditable field.
func (o *NetworkType) SetNetworkDomainEditable(v bool) {
	o.NetworkDomainEditable = &v
}

// GetCanAssignPool returns the CanAssignPool field value if set, zero value otherwise.
func (o *NetworkType) GetCanAssignPool() bool {
	if o == nil || IsNil(o.CanAssignPool) {
		var ret bool
		return ret
	}
	return *o.CanAssignPool
}

// GetCanAssignPoolOk returns a tuple with the CanAssignPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetCanAssignPoolOk() (*bool, bool) {
	if o == nil || IsNil(o.CanAssignPool) {
		return nil, false
	}
	return o.CanAssignPool, true
}

// IsSetCanAssignPool returns a boolean if a field has been set.
func (o *NetworkType) IsSetCanAssignPool() bool {
	if o != nil && !IsNil(o.CanAssignPool) {
		return true
	}

	return false
}

// SetCanAssignPool gets a reference to the given bool and assigns it to the CanAssignPool field.
func (o *NetworkType) SetCanAssignPool(v bool) {
	o.CanAssignPool = &v
}

// GetDeletable returns the Deletable field value if set, zero value otherwise.
func (o *NetworkType) GetDeletable() bool {
	if o == nil || IsNil(o.Deletable) {
		var ret bool
		return ret
	}
	return *o.Deletable
}

// GetDeletableOk returns a tuple with the Deletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetDeletableOk() (*bool, bool) {
	if o == nil || IsNil(o.Deletable) {
		return nil, false
	}
	return o.Deletable, true
}

// IsSetDeletable returns a boolean if a field has been set.
func (o *NetworkType) IsSetDeletable() bool {
	if o != nil && !IsNil(o.Deletable) {
		return true
	}

	return false
}

// SetDeletable gets a reference to the given bool and assigns it to the Deletable field.
func (o *NetworkType) SetDeletable(v bool) {
	o.Deletable = &v
}

// GetHasNetworkServer returns the HasNetworkServer field value if set, zero value otherwise.
func (o *NetworkType) GetHasNetworkServer() bool {
	if o == nil || IsNil(o.HasNetworkServer) {
		var ret bool
		return ret
	}
	return *o.HasNetworkServer
}

// GetHasNetworkServerOk returns a tuple with the HasNetworkServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetHasNetworkServerOk() (*bool, bool) {
	if o == nil || IsNil(o.HasNetworkServer) {
		return nil, false
	}
	return o.HasNetworkServer, true
}

// IsSetHasNetworkServer returns a boolean if a field has been set.
func (o *NetworkType) IsSetHasNetworkServer() bool {
	if o != nil && !IsNil(o.HasNetworkServer) {
		return true
	}

	return false
}

// SetHasNetworkServer gets a reference to the given bool and assigns it to the HasNetworkServer field.
func (o *NetworkType) SetHasNetworkServer(v bool) {
	o.HasNetworkServer = &v
}

// GetHasCidr returns the HasCidr field value if set, zero value otherwise.
func (o *NetworkType) GetHasCidr() bool {
	if o == nil || IsNil(o.HasCidr) {
		var ret bool
		return ret
	}
	return *o.HasCidr
}

// GetHasCidrOk returns a tuple with the HasCidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetHasCidrOk() (*bool, bool) {
	if o == nil || IsNil(o.HasCidr) {
		return nil, false
	}
	return o.HasCidr, true
}

// IsSetHasCidr returns a boolean if a field has been set.
func (o *NetworkType) IsSetHasCidr() bool {
	if o != nil && !IsNil(o.HasCidr) {
		return true
	}

	return false
}

// SetHasCidr gets a reference to the given bool and assigns it to the HasCidr field.
func (o *NetworkType) SetHasCidr(v bool) {
	o.HasCidr = &v
}

// GetHasStaticRoutes returns the HasStaticRoutes field value if set, zero value otherwise.
func (o *NetworkType) GetHasStaticRoutes() bool {
	if o == nil || IsNil(o.HasStaticRoutes) {
		var ret bool
		return ret
	}
	return *o.HasStaticRoutes
}

// GetHasStaticRoutesOk returns a tuple with the HasStaticRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetHasStaticRoutesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasStaticRoutes) {
		return nil, false
	}
	return o.HasStaticRoutes, true
}

// IsSetHasStaticRoutes returns a boolean if a field has been set.
func (o *NetworkType) IsSetHasStaticRoutes() bool {
	if o != nil && !IsNil(o.HasStaticRoutes) {
		return true
	}

	return false
}

// SetHasStaticRoutes gets a reference to the given bool and assigns it to the HasStaticRoutes field.
func (o *NetworkType) SetHasStaticRoutes(v bool) {
	o.HasStaticRoutes = &v
}

// GetHasFloatingIps returns the HasFloatingIps field value if set, zero value otherwise.
func (o *NetworkType) GetHasFloatingIps() bool {
	if o == nil || IsNil(o.HasFloatingIps) {
		var ret bool
		return ret
	}
	return *o.HasFloatingIps
}

// GetHasFloatingIpsOk returns a tuple with the HasFloatingIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetHasFloatingIpsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasFloatingIps) {
		return nil, false
	}
	return o.HasFloatingIps, true
}

// IsSetHasFloatingIps returns a boolean if a field has been set.
func (o *NetworkType) IsSetHasFloatingIps() bool {
	if o != nil && !IsNil(o.HasFloatingIps) {
		return true
	}

	return false
}

// SetHasFloatingIps gets a reference to the given bool and assigns it to the HasFloatingIps field.
func (o *NetworkType) SetHasFloatingIps(v bool) {
	o.HasFloatingIps = &v
}

// GetOptionTypes returns the OptionTypes field value if set, zero value otherwise.
func (o *NetworkType) GetOptionTypes() []ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner {
	if o == nil || IsNil(o.OptionTypes) {
		var ret []ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner
		return ret
	}
	return o.OptionTypes
}

// GetOptionTypesOk returns a tuple with the OptionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetOptionTypesOk() ([]ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner, bool) {
	if o == nil || IsNil(o.OptionTypes) {
		return nil, false
	}
	return o.OptionTypes, true
}

// IsSetOptionTypes returns a boolean if a field has been set.
func (o *NetworkType) IsSetOptionTypes() bool {
	if o != nil && !IsNil(o.OptionTypes) {
		return true
	}

	return false
}

// SetOptionTypes gets a reference to the given []ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner and assigns it to the OptionTypes field.
func (o *NetworkType) SetOptionTypes(v []ListCatalogItemTypes200ResponseAllOfCatalogItemTypesInnerOptionTypesInner) {
	o.OptionTypes = v
}

// GetRouteOptionTypes returns the RouteOptionTypes field value if set, zero value otherwise.
func (o *NetworkType) GetRouteOptionTypes() []GetInstanceTypeProvisioning200ResponseAllOfInstanceTypeInstanceTypeLayoutsInnerProvisionTypeNetworkTypesInnerRouteOptionTypesInner {
	if o == nil || IsNil(o.RouteOptionTypes) {
		var ret []GetInstanceTypeProvisioning200ResponseAllOfInstanceTypeInstanceTypeLayoutsInnerProvisionTypeNetworkTypesInnerRouteOptionTypesInner
		return ret
	}
	return o.RouteOptionTypes
}

// GetRouteOptionTypesOk returns a tuple with the RouteOptionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkType) GetRouteOptionTypesOk() ([]GetInstanceTypeProvisioning200ResponseAllOfInstanceTypeInstanceTypeLayoutsInnerProvisionTypeNetworkTypesInnerRouteOptionTypesInner, bool) {
	if o == nil || IsNil(o.RouteOptionTypes) {
		return nil, false
	}
	return o.RouteOptionTypes, true
}

// IsSetRouteOptionTypes returns a boolean if a field has been set.
func (o *NetworkType) IsSetRouteOptionTypes() bool {
	if o != nil && !IsNil(o.RouteOptionTypes) {
		return true
	}

	return false
}

// SetRouteOptionTypes gets a reference to the given []GetInstanceTypeProvisioning200ResponseAllOfInstanceTypeInstanceTypeLayoutsInnerProvisionTypeNetworkTypesInnerRouteOptionTypesInner and assigns it to the RouteOptionTypes field.
func (o *NetworkType) SetRouteOptionTypes(v []GetInstanceTypeProvisioning200ResponseAllOfInstanceTypeInstanceTypeLayoutsInnerProvisionTypeNetworkTypesInnerRouteOptionTypesInner) {
	o.RouteOptionTypes = v
}

func (o NetworkType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.ExternalType) {
		toSerialize["externalType"] = o.ExternalType
	}
	if !IsNil(o.Creatable) {
		toSerialize["creatable"] = o.Creatable
	}
	if !IsNil(o.Overlay) {
		toSerialize["overlay"] = o.Overlay
	}
	if !IsNil(o.NameEditable) {
		toSerialize["nameEditable"] = o.NameEditable
	}
	if !IsNil(o.CidrRequired) {
		toSerialize["cidrRequired"] = o.CidrRequired
	}
	if !IsNil(o.CidrEditable) {
		toSerialize["cidrEditable"] = o.CidrEditable
	}
	if !IsNil(o.DhcpServerEditable) {
		toSerialize["dhcpServerEditable"] = o.DhcpServerEditable
	}
	if !IsNil(o.DnsEditable) {
		toSerialize["dnsEditable"] = o.DnsEditable
	}
	if !IsNil(o.GatewayEditable) {
		toSerialize["gatewayEditable"] = o.GatewayEditable
	}
	if !IsNil(o.VlanIdEditable) {
		toSerialize["vlanIdEditable"] = o.VlanIdEditable
	}
	if !IsNil(o.StaticOverrideEditable) {
		toSerialize["staticOverrideEditable"] = o.StaticOverrideEditable
	}
	if !IsNil(o.NetworkDomainEditable) {
		toSerialize["networkDomainEditable"] = o.NetworkDomainEditable
	}
	if !IsNil(o.CanAssignPool) {
		toSerialize["canAssignPool"] = o.CanAssignPool
	}
	if !IsNil(o.Deletable) {
		toSerialize["deletable"] = o.Deletable
	}
	if !IsNil(o.HasNetworkServer) {
		toSerialize["hasNetworkServer"] = o.HasNetworkServer
	}
	if !IsNil(o.HasCidr) {
		toSerialize["hasCidr"] = o.HasCidr
	}
	if !IsNil(o.HasStaticRoutes) {
		toSerialize["hasStaticRoutes"] = o.HasStaticRoutes
	}
	if !IsNil(o.HasFloatingIps) {
		toSerialize["hasFloatingIps"] = o.HasFloatingIps
	}
	if !IsNil(o.OptionTypes) {
		toSerialize["optionTypes"] = o.OptionTypes
	}
	if !IsNil(o.RouteOptionTypes) {
		toSerialize["routeOptionTypes"] = o.RouteOptionTypes
	}
	return toSerialize, nil
}

type NullableNetworkType struct {
	value *NetworkType
	isSet bool
}

func (v NullableNetworkType) Get() *NetworkType {
	return v.value
}

func (v *NullableNetworkType) Set(val *NetworkType) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkType) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkType(val *NetworkType) *NullableNetworkType {
	return &NullableNetworkType{value: val, isSet: true}
}

func (v NullableNetworkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


