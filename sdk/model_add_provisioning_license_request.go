/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddProvisioningLicenseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddProvisioningLicenseRequest{}

// AddProvisioningLicenseRequest struct for AddProvisioningLicenseRequest
type AddProvisioningLicenseRequest struct {
	License *AddProvisioningLicenseRequestLicense `json:"license,omitempty"`
}

// NewAddProvisioningLicenseRequest instantiates a new AddProvisioningLicenseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddProvisioningLicenseRequest() *AddProvisioningLicenseRequest {
	this := AddProvisioningLicenseRequest{}
	return &this
}

// NewAddProvisioningLicenseRequestWithDefaults instantiates a new AddProvisioningLicenseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddProvisioningLicenseRequestWithDefaults() *AddProvisioningLicenseRequest {
	this := AddProvisioningLicenseRequest{}
	return &this
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *AddProvisioningLicenseRequest) GetLicense() AddProvisioningLicenseRequestLicense {
	if o == nil || IsNil(o.License) {
		var ret AddProvisioningLicenseRequestLicense
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddProvisioningLicenseRequest) GetLicenseOk() (*AddProvisioningLicenseRequestLicense, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// IsSetLicense returns a boolean if a field has been set.
func (o *AddProvisioningLicenseRequest) IsSetLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given AddProvisioningLicenseRequestLicense and assigns it to the License field.
func (o *AddProvisioningLicenseRequest) SetLicense(v AddProvisioningLicenseRequestLicense) {
	o.License = &v
}

func (o AddProvisioningLicenseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddProvisioningLicenseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	return toSerialize, nil
}

type NullableAddProvisioningLicenseRequest struct {
	value *AddProvisioningLicenseRequest
	isSet bool
}

func (v NullableAddProvisioningLicenseRequest) Get() *AddProvisioningLicenseRequest {
	return v.value
}

func (v *NullableAddProvisioningLicenseRequest) Set(val *AddProvisioningLicenseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddProvisioningLicenseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddProvisioningLicenseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddProvisioningLicenseRequest(val *AddProvisioningLicenseRequest) *NullableAddProvisioningLicenseRequest {
	return &NullableAddProvisioningLicenseRequest{value: val, isSet: true}
}

func (v NullableAddProvisioningLicenseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddProvisioningLicenseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


