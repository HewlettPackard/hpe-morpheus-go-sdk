/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork{}

// AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork struct for AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork
type AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork struct {
	Id                   *int64                                                              `json:"id,omitempty"`
	Group                *int32                                                              `json:"group,omitempty"`
	Subnet               *string                                                             `json:"subnet,omitempty"`
	DhcpServer           *bool                                                               `json:"dhcpServer,omitempty"`
	Name                 *string                                                             `json:"name,omitempty"`
	Pool                 *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetworkPool `json:"pool,omitempty"`
	AdditionalProperties map[string]interface{}                                              `json:",remain"`
}

type _AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork

// NewAddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork instantiates a new AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork() *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork {
	this := AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork{}
	return &this
}

// NewAddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetworkWithDefaults instantiates a new AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetworkWithDefaults() *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork {
	this := AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) SetId(v int64) {
	o.Id = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetGroup() int32 {
	if o == nil || IsNil(o.Group) {
		var ret int32
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetGroupOk() (*int32, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// IsSetGroup returns a boolean if a field has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) IsSetGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given int32 and assigns it to the Group field.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) SetGroup(v int32) {
	o.Group = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetSubnet() string {
	if o == nil || IsNil(o.Subnet) {
		var ret string
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.Subnet) {
		return nil, false
	}
	return o.Subnet, true
}

// IsSetSubnet returns a boolean if a field has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) IsSetSubnet() bool {
	if o != nil && !IsNil(o.Subnet) {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given string and assigns it to the Subnet field.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) SetSubnet(v string) {
	o.Subnet = &v
}

// GetDhcpServer returns the DhcpServer field value if set, zero value otherwise.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetDhcpServer() bool {
	if o == nil || IsNil(o.DhcpServer) {
		var ret bool
		return ret
	}
	return *o.DhcpServer
}

// GetDhcpServerOk returns a tuple with the DhcpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetDhcpServerOk() (*bool, bool) {
	if o == nil || IsNil(o.DhcpServer) {
		return nil, false
	}
	return o.DhcpServer, true
}

// IsSetDhcpServer returns a boolean if a field has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) IsSetDhcpServer() bool {
	if o != nil && !IsNil(o.DhcpServer) {
		return true
	}

	return false
}

// SetDhcpServer gets a reference to the given bool and assigns it to the DhcpServer field.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) SetDhcpServer(v bool) {
	o.DhcpServer = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) SetName(v string) {
	o.Name = &v
}

// GetPool returns the Pool field value if set, zero value otherwise.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetPool() AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetworkPool {
	if o == nil || IsNil(o.Pool) {
		var ret AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetworkPool
		return ret
	}
	return *o.Pool
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) GetPoolOk() (*AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetworkPool, bool) {
	if o == nil || IsNil(o.Pool) {
		return nil, false
	}
	return o.Pool, true
}

// IsSetPool returns a boolean if a field has been set.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) IsSetPool() bool {
	if o != nil && !IsNil(o.Pool) {
		return true
	}

	return false
}

// SetPool gets a reference to the given AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetworkPool and assigns it to the Pool field.
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) SetPool(v AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetworkPool) {
	o.Pool = &v
}

func (o AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Subnet) {
		toSerialize["subnet"] = o.Subnet
	}
	if !IsNil(o.DhcpServer) {
		toSerialize["dhcpServer"] = o.DhcpServer
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Pool) {
		toSerialize["pool"] = o.Pool
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *AddInstance200ResponseAllOfOneOfInstanceInterfacesInnerNetwork) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
