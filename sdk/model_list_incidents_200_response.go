/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ListIncidents200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListIncidents200Response{}

// ListIncidents200Response struct for ListIncidents200Response
type ListIncidents200Response struct {
	Incidents []GetCheckApps200ResponseOpenIncidentsInner `json:"incidents,omitempty"`
	Issues []ListIncidents200ResponseAllOfIssuesInner `json:"issues,omitempty"`
	Meta *ListActivity200ResponseAllOfMeta `json:"meta,omitempty"`
}

// NewListIncidents200Response instantiates a new ListIncidents200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListIncidents200Response() *ListIncidents200Response {
	this := ListIncidents200Response{}
	return &this
}

// NewListIncidents200ResponseWithDefaults instantiates a new ListIncidents200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListIncidents200ResponseWithDefaults() *ListIncidents200Response {
	this := ListIncidents200Response{}
	return &this
}

// GetIncidents returns the Incidents field value if set, zero value otherwise.
func (o *ListIncidents200Response) GetIncidents() []GetCheckApps200ResponseOpenIncidentsInner {
	if o == nil || IsNil(o.Incidents) {
		var ret []GetCheckApps200ResponseOpenIncidentsInner
		return ret
	}
	return o.Incidents
}

// GetIncidentsOk returns a tuple with the Incidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListIncidents200Response) GetIncidentsOk() ([]GetCheckApps200ResponseOpenIncidentsInner, bool) {
	if o == nil || IsNil(o.Incidents) {
		return nil, false
	}
	return o.Incidents, true
}

// IsSetIncidents returns a boolean if a field has been set.
func (o *ListIncidents200Response) IsSetIncidents() bool {
	if o != nil && !IsNil(o.Incidents) {
		return true
	}

	return false
}

// SetIncidents gets a reference to the given []GetCheckApps200ResponseOpenIncidentsInner and assigns it to the Incidents field.
func (o *ListIncidents200Response) SetIncidents(v []GetCheckApps200ResponseOpenIncidentsInner) {
	o.Incidents = v
}

// GetIssues returns the Issues field value if set, zero value otherwise.
func (o *ListIncidents200Response) GetIssues() []ListIncidents200ResponseAllOfIssuesInner {
	if o == nil || IsNil(o.Issues) {
		var ret []ListIncidents200ResponseAllOfIssuesInner
		return ret
	}
	return o.Issues
}

// GetIssuesOk returns a tuple with the Issues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListIncidents200Response) GetIssuesOk() ([]ListIncidents200ResponseAllOfIssuesInner, bool) {
	if o == nil || IsNil(o.Issues) {
		return nil, false
	}
	return o.Issues, true
}

// IsSetIssues returns a boolean if a field has been set.
func (o *ListIncidents200Response) IsSetIssues() bool {
	if o != nil && !IsNil(o.Issues) {
		return true
	}

	return false
}

// SetIssues gets a reference to the given []ListIncidents200ResponseAllOfIssuesInner and assigns it to the Issues field.
func (o *ListIncidents200Response) SetIssues(v []ListIncidents200ResponseAllOfIssuesInner) {
	o.Issues = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ListIncidents200Response) GetMeta() ListActivity200ResponseAllOfMeta {
	if o == nil || IsNil(o.Meta) {
		var ret ListActivity200ResponseAllOfMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListIncidents200Response) GetMetaOk() (*ListActivity200ResponseAllOfMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// IsSetMeta returns a boolean if a field has been set.
func (o *ListIncidents200Response) IsSetMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ListActivity200ResponseAllOfMeta and assigns it to the Meta field.
func (o *ListIncidents200Response) SetMeta(v ListActivity200ResponseAllOfMeta) {
	o.Meta = &v
}

func (o ListIncidents200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListIncidents200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Incidents) {
		toSerialize["incidents"] = o.Incidents
	}
	if !IsNil(o.Issues) {
		toSerialize["issues"] = o.Issues
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableListIncidents200Response struct {
	value *ListIncidents200Response
	isSet bool
}

func (v NullableListIncidents200Response) Get() *ListIncidents200Response {
	return v.value
}

func (v *NullableListIncidents200Response) Set(val *ListIncidents200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListIncidents200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListIncidents200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListIncidents200Response(val *ListIncidents200Response) *NullableListIncidents200Response {
	return &NullableListIncidents200Response{value: val, isSet: true}
}

func (v NullableListIncidents200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListIncidents200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


