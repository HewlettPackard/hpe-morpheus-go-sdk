/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the AddCertificateRequestCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddCertificateRequestCertificate{}

// AddCertificateRequestCertificate struct for AddCertificateRequestCertificate
type AddCertificateRequestCertificate struct {
	// A unique name scoped to your account for the key
	Name *string `json:"name,omitempty"`
	// A description of the certificate
	Description *string `json:"description,omitempty"`
	// The contents of the certificate file
	CertFile *string `json:"certFile,omitempty"`
	// The contents of the key file
	KeyFile *string `json:"keyFile,omitempty"`
	// The contents of the root certificate file
	ChainFile *string `json:"chainFile,omitempty"`
	// The domain name this certificate is tied to
	DomainName *string `json:"domainName,omitempty"`
	// Whether or not this certificate is a wildcard cert
	Wildcard *bool `json:"wildcard,omitempty"`
	// Certificate Type Code to create a certificate of a type other than the default 'internal'.
	Type *string `json:"type,omitempty"`
	// ID of the Service (Trust Integration) to create the certificate with, if using a type other than 'internal'. eg. Internal, NSXT or Venafi
	IntegrationId *int64 `json:"integrationId,omitempty"`
}

// NewAddCertificateRequestCertificate instantiates a new AddCertificateRequestCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddCertificateRequestCertificate() *AddCertificateRequestCertificate {
	this := AddCertificateRequestCertificate{}
	var wildcard bool = false
	this.Wildcard = &wildcard
	var type_ string = "internal"
	this.Type = &type_
	return &this
}

// NewAddCertificateRequestCertificateWithDefaults instantiates a new AddCertificateRequestCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddCertificateRequestCertificateWithDefaults() *AddCertificateRequestCertificate {
	this := AddCertificateRequestCertificate{}
	var wildcard bool = false
	this.Wildcard = &wildcard
	var type_ string = "internal"
	this.Type = &type_
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AddCertificateRequestCertificate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificateRequestCertificate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *AddCertificateRequestCertificate) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AddCertificateRequestCertificate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddCertificateRequestCertificate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificateRequestCertificate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *AddCertificateRequestCertificate) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddCertificateRequestCertificate) SetDescription(v string) {
	o.Description = &v
}

// GetCertFile returns the CertFile field value if set, zero value otherwise.
func (o *AddCertificateRequestCertificate) GetCertFile() string {
	if o == nil || IsNil(o.CertFile) {
		var ret string
		return ret
	}
	return *o.CertFile
}

// GetCertFileOk returns a tuple with the CertFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificateRequestCertificate) GetCertFileOk() (*string, bool) {
	if o == nil || IsNil(o.CertFile) {
		return nil, false
	}
	return o.CertFile, true
}

// IsSetCertFile returns a boolean if a field has been set.
func (o *AddCertificateRequestCertificate) IsSetCertFile() bool {
	if o != nil && !IsNil(o.CertFile) {
		return true
	}

	return false
}

// SetCertFile gets a reference to the given string and assigns it to the CertFile field.
func (o *AddCertificateRequestCertificate) SetCertFile(v string) {
	o.CertFile = &v
}

// GetKeyFile returns the KeyFile field value if set, zero value otherwise.
func (o *AddCertificateRequestCertificate) GetKeyFile() string {
	if o == nil || IsNil(o.KeyFile) {
		var ret string
		return ret
	}
	return *o.KeyFile
}

// GetKeyFileOk returns a tuple with the KeyFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificateRequestCertificate) GetKeyFileOk() (*string, bool) {
	if o == nil || IsNil(o.KeyFile) {
		return nil, false
	}
	return o.KeyFile, true
}

// IsSetKeyFile returns a boolean if a field has been set.
func (o *AddCertificateRequestCertificate) IsSetKeyFile() bool {
	if o != nil && !IsNil(o.KeyFile) {
		return true
	}

	return false
}

// SetKeyFile gets a reference to the given string and assigns it to the KeyFile field.
func (o *AddCertificateRequestCertificate) SetKeyFile(v string) {
	o.KeyFile = &v
}

// GetChainFile returns the ChainFile field value if set, zero value otherwise.
func (o *AddCertificateRequestCertificate) GetChainFile() string {
	if o == nil || IsNil(o.ChainFile) {
		var ret string
		return ret
	}
	return *o.ChainFile
}

// GetChainFileOk returns a tuple with the ChainFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificateRequestCertificate) GetChainFileOk() (*string, bool) {
	if o == nil || IsNil(o.ChainFile) {
		return nil, false
	}
	return o.ChainFile, true
}

// IsSetChainFile returns a boolean if a field has been set.
func (o *AddCertificateRequestCertificate) IsSetChainFile() bool {
	if o != nil && !IsNil(o.ChainFile) {
		return true
	}

	return false
}

// SetChainFile gets a reference to the given string and assigns it to the ChainFile field.
func (o *AddCertificateRequestCertificate) SetChainFile(v string) {
	o.ChainFile = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *AddCertificateRequestCertificate) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificateRequestCertificate) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// IsSetDomainName returns a boolean if a field has been set.
func (o *AddCertificateRequestCertificate) IsSetDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *AddCertificateRequestCertificate) SetDomainName(v string) {
	o.DomainName = &v
}

// GetWildcard returns the Wildcard field value if set, zero value otherwise.
func (o *AddCertificateRequestCertificate) GetWildcard() bool {
	if o == nil || IsNil(o.Wildcard) {
		var ret bool
		return ret
	}
	return *o.Wildcard
}

// GetWildcardOk returns a tuple with the Wildcard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificateRequestCertificate) GetWildcardOk() (*bool, bool) {
	if o == nil || IsNil(o.Wildcard) {
		return nil, false
	}
	return o.Wildcard, true
}

// IsSetWildcard returns a boolean if a field has been set.
func (o *AddCertificateRequestCertificate) IsSetWildcard() bool {
	if o != nil && !IsNil(o.Wildcard) {
		return true
	}

	return false
}

// SetWildcard gets a reference to the given bool and assigns it to the Wildcard field.
func (o *AddCertificateRequestCertificate) SetWildcard(v bool) {
	o.Wildcard = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AddCertificateRequestCertificate) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificateRequestCertificate) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// IsSetType returns a boolean if a field has been set.
func (o *AddCertificateRequestCertificate) IsSetType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AddCertificateRequestCertificate) SetType(v string) {
	o.Type = &v
}

// GetIntegrationId returns the IntegrationId field value if set, zero value otherwise.
func (o *AddCertificateRequestCertificate) GetIntegrationId() int64 {
	if o == nil || IsNil(o.IntegrationId) {
		var ret int64
		return ret
	}
	return *o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddCertificateRequestCertificate) GetIntegrationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.IntegrationId) {
		return nil, false
	}
	return o.IntegrationId, true
}

// IsSetIntegrationId returns a boolean if a field has been set.
func (o *AddCertificateRequestCertificate) IsSetIntegrationId() bool {
	if o != nil && !IsNil(o.IntegrationId) {
		return true
	}

	return false
}

// SetIntegrationId gets a reference to the given int64 and assigns it to the IntegrationId field.
func (o *AddCertificateRequestCertificate) SetIntegrationId(v int64) {
	o.IntegrationId = &v
}

func (o AddCertificateRequestCertificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddCertificateRequestCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CertFile) {
		toSerialize["certFile"] = o.CertFile
	}
	if !IsNil(o.KeyFile) {
		toSerialize["keyFile"] = o.KeyFile
	}
	if !IsNil(o.ChainFile) {
		toSerialize["chainFile"] = o.ChainFile
	}
	if !IsNil(o.DomainName) {
		toSerialize["domainName"] = o.DomainName
	}
	if !IsNil(o.Wildcard) {
		toSerialize["wildcard"] = o.Wildcard
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.IntegrationId) {
		toSerialize["integrationId"] = o.IntegrationId
	}
	return toSerialize, nil
}

type NullableAddCertificateRequestCertificate struct {
	value *AddCertificateRequestCertificate
	isSet bool
}

func (v NullableAddCertificateRequestCertificate) Get() *AddCertificateRequestCertificate {
	return v.value
}

func (v *NullableAddCertificateRequestCertificate) Set(val *AddCertificateRequestCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableAddCertificateRequestCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableAddCertificateRequestCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddCertificateRequestCertificate(val *AddCertificateRequestCertificate) *NullableAddCertificateRequestCertificate {
	return &NullableAddCertificateRequestCertificate{value: val, isSet: true}
}

func (v NullableAddCertificateRequestCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddCertificateRequestCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


