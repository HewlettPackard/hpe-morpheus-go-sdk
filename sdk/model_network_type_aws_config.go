/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NetworkTypeAwsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkTypeAwsConfig{}

// NetworkTypeAwsConfig struct for NetworkTypeAwsConfig
type NetworkTypeAwsConfig struct {
	// Availability Zone Name
	AvailabilityZone string `json:"availabilityZone"`
	// Network CIDR
	Cidr string `json:"cidr"`
	// Assign public IPs by default.
	AssignPublicIp bool `json:"assignPublicIp"`
	ZonePool CreateNetworksRequestNetworkConfigAnyOf1ZonePool `json:"zonePool"`
}

type _NetworkTypeAwsConfig NetworkTypeAwsConfig

// NewNetworkTypeAwsConfig instantiates a new NetworkTypeAwsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkTypeAwsConfig(availabilityZone string, cidr string, assignPublicIp bool, zonePool CreateNetworksRequestNetworkConfigAnyOf1ZonePool) *NetworkTypeAwsConfig {
	this := NetworkTypeAwsConfig{}
	this.AvailabilityZone = availabilityZone
	this.Cidr = cidr
	this.AssignPublicIp = assignPublicIp
	this.ZonePool = zonePool
	return &this
}

// NewNetworkTypeAwsConfigWithDefaults instantiates a new NetworkTypeAwsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkTypeAwsConfigWithDefaults() *NetworkTypeAwsConfig {
	this := NetworkTypeAwsConfig{}
	return &this
}

// GetAvailabilityZone returns the AvailabilityZone field value
func (o *NetworkTypeAwsConfig) GetAvailabilityZone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvailabilityZone
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value
// and a boolean to check if the value has been set.
func (o *NetworkTypeAwsConfig) GetAvailabilityZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailabilityZone, true
}

// SetAvailabilityZone sets field value
func (o *NetworkTypeAwsConfig) SetAvailabilityZone(v string) {
	o.AvailabilityZone = v
}

// GetCidr returns the Cidr field value
func (o *NetworkTypeAwsConfig) GetCidr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value
// and a boolean to check if the value has been set.
func (o *NetworkTypeAwsConfig) GetCidrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cidr, true
}

// SetCidr sets field value
func (o *NetworkTypeAwsConfig) SetCidr(v string) {
	o.Cidr = v
}

// GetAssignPublicIp returns the AssignPublicIp field value
func (o *NetworkTypeAwsConfig) GetAssignPublicIp() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AssignPublicIp
}

// GetAssignPublicIpOk returns a tuple with the AssignPublicIp field value
// and a boolean to check if the value has been set.
func (o *NetworkTypeAwsConfig) GetAssignPublicIpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssignPublicIp, true
}

// SetAssignPublicIp sets field value
func (o *NetworkTypeAwsConfig) SetAssignPublicIp(v bool) {
	o.AssignPublicIp = v
}

// GetZonePool returns the ZonePool field value
func (o *NetworkTypeAwsConfig) GetZonePool() CreateNetworksRequestNetworkConfigAnyOf1ZonePool {
	if o == nil {
		var ret CreateNetworksRequestNetworkConfigAnyOf1ZonePool
		return ret
	}

	return o.ZonePool
}

// GetZonePoolOk returns a tuple with the ZonePool field value
// and a boolean to check if the value has been set.
func (o *NetworkTypeAwsConfig) GetZonePoolOk() (*CreateNetworksRequestNetworkConfigAnyOf1ZonePool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZonePool, true
}

// SetZonePool sets field value
func (o *NetworkTypeAwsConfig) SetZonePool(v CreateNetworksRequestNetworkConfigAnyOf1ZonePool) {
	o.ZonePool = v
}

func (o NetworkTypeAwsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkTypeAwsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["availabilityZone"] = o.AvailabilityZone
	toSerialize["cidr"] = o.Cidr
	toSerialize["assignPublicIp"] = o.AssignPublicIp
	toSerialize["zonePool"] = o.ZonePool
	return toSerialize, nil
}

func (o *NetworkTypeAwsConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"availabilityZone",
		"cidr",
		"assignPublicIp",
		"zonePool",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkTypeAwsConfig := _NetworkTypeAwsConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkTypeAwsConfig)

	if err != nil {
		return err
	}

	*o = NetworkTypeAwsConfig(varNetworkTypeAwsConfig)

	return err
}

type NullableNetworkTypeAwsConfig struct {
	value *NetworkTypeAwsConfig
	isSet bool
}

func (v NullableNetworkTypeAwsConfig) Get() *NetworkTypeAwsConfig {
	return v.value
}

func (v *NullableNetworkTypeAwsConfig) Set(val *NetworkTypeAwsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkTypeAwsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkTypeAwsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkTypeAwsConfig(val *NetworkTypeAwsConfig) *NullableNetworkTypeAwsConfig {
	return &NullableNetworkTypeAwsConfig{value: val, isSet: true}
}

func (v NullableNetworkTypeAwsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkTypeAwsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


