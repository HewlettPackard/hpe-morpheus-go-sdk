/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the InfobloxNetworkPoolServerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfobloxNetworkPoolServerConfig{}

// InfobloxNetworkPoolServerConfig struct for InfobloxNetworkPoolServerConfig
type InfobloxNetworkPoolServerConfig struct {
	// Inventory Existing
	InventoryExisting *string `json:"inventoryExisting,omitempty"`
	// Extra Attributes
	ExtraAttributes *string `json:"extraAttributes,omitempty"`
}

// NewInfobloxNetworkPoolServerConfig instantiates a new InfobloxNetworkPoolServerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfobloxNetworkPoolServerConfig() *InfobloxNetworkPoolServerConfig {
	this := InfobloxNetworkPoolServerConfig{}
	var inventoryExisting string = "off"
	this.InventoryExisting = &inventoryExisting
	return &this
}

// NewInfobloxNetworkPoolServerConfigWithDefaults instantiates a new InfobloxNetworkPoolServerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfobloxNetworkPoolServerConfigWithDefaults() *InfobloxNetworkPoolServerConfig {
	this := InfobloxNetworkPoolServerConfig{}
	var inventoryExisting string = "off"
	this.InventoryExisting = &inventoryExisting
	return &this
}

// GetInventoryExisting returns the InventoryExisting field value if set, zero value otherwise.
func (o *InfobloxNetworkPoolServerConfig) GetInventoryExisting() string {
	if o == nil || IsNil(o.InventoryExisting) {
		var ret string
		return ret
	}
	return *o.InventoryExisting
}

// GetInventoryExistingOk returns a tuple with the InventoryExisting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfobloxNetworkPoolServerConfig) GetInventoryExistingOk() (*string, bool) {
	if o == nil || IsNil(o.InventoryExisting) {
		return nil, false
	}
	return o.InventoryExisting, true
}

// IsSetInventoryExisting returns a boolean if a field has been set.
func (o *InfobloxNetworkPoolServerConfig) IsSetInventoryExisting() bool {
	if o != nil && !IsNil(o.InventoryExisting) {
		return true
	}

	return false
}

// SetInventoryExisting gets a reference to the given string and assigns it to the InventoryExisting field.
func (o *InfobloxNetworkPoolServerConfig) SetInventoryExisting(v string) {
	o.InventoryExisting = &v
}

// GetExtraAttributes returns the ExtraAttributes field value if set, zero value otherwise.
func (o *InfobloxNetworkPoolServerConfig) GetExtraAttributes() string {
	if o == nil || IsNil(o.ExtraAttributes) {
		var ret string
		return ret
	}
	return *o.ExtraAttributes
}

// GetExtraAttributesOk returns a tuple with the ExtraAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfobloxNetworkPoolServerConfig) GetExtraAttributesOk() (*string, bool) {
	if o == nil || IsNil(o.ExtraAttributes) {
		return nil, false
	}
	return o.ExtraAttributes, true
}

// IsSetExtraAttributes returns a boolean if a field has been set.
func (o *InfobloxNetworkPoolServerConfig) IsSetExtraAttributes() bool {
	if o != nil && !IsNil(o.ExtraAttributes) {
		return true
	}

	return false
}

// SetExtraAttributes gets a reference to the given string and assigns it to the ExtraAttributes field.
func (o *InfobloxNetworkPoolServerConfig) SetExtraAttributes(v string) {
	o.ExtraAttributes = &v
}

func (o InfobloxNetworkPoolServerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfobloxNetworkPoolServerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InventoryExisting) {
		toSerialize["inventoryExisting"] = o.InventoryExisting
	}
	if !IsNil(o.ExtraAttributes) {
		toSerialize["extraAttributes"] = o.ExtraAttributes
	}
	return toSerialize, nil
}

type NullableInfobloxNetworkPoolServerConfig struct {
	value *InfobloxNetworkPoolServerConfig
	isSet bool
}

func (v NullableInfobloxNetworkPoolServerConfig) Get() *InfobloxNetworkPoolServerConfig {
	return v.value
}

func (v *NullableInfobloxNetworkPoolServerConfig) Set(val *InfobloxNetworkPoolServerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableInfobloxNetworkPoolServerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableInfobloxNetworkPoolServerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfobloxNetworkPoolServerConfig(val *InfobloxNetworkPoolServerConfig) *NullableInfobloxNetworkPoolServerConfig {
	return &NullableInfobloxNetworkPoolServerConfig{value: val, isSet: true}
}

func (v NullableInfobloxNetworkPoolServerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfobloxNetworkPoolServerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


