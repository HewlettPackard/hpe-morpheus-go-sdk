/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ListJobExecutions200ResponseAllOfJobExecutionsInnerJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListJobExecutions200ResponseAllOfJobExecutionsInnerJob{}

// ListJobExecutions200ResponseAllOfJobExecutionsInnerJob struct for ListJobExecutions200ResponseAllOfJobExecutionsInnerJob
type ListJobExecutions200ResponseAllOfJobExecutionsInnerJob struct {
	Id *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Type *ListBackupSettings200ResponseBackupSettingsDefaultSchedule `json:"type,omitempty"`
}

// NewListJobExecutions200ResponseAllOfJobExecutionsInnerJob instantiates a new ListJobExecutions200ResponseAllOfJobExecutionsInnerJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListJobExecutions200ResponseAllOfJobExecutionsInnerJob() *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob {
	this := ListJobExecutions200ResponseAllOfJobExecutionsInnerJob{}
	return &this
}

// NewListJobExecutions200ResponseAllOfJobExecutionsInnerJobWithDefaults instantiates a new ListJobExecutions200ResponseAllOfJobExecutionsInnerJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListJobExecutions200ResponseAllOfJobExecutionsInnerJobWithDefaults() *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob {
	this := ListJobExecutions200ResponseAllOfJobExecutionsInnerJob{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// IsSetId returns a boolean if a field has been set.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) IsSetId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) GetType() ListBackupSettings200ResponseBackupSettingsDefaultSchedule {
	if o == nil || IsNil(o.Type) {
		var ret ListBackupSettings200ResponseBackupSettingsDefaultSchedule
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) GetTypeOk() (*ListBackupSettings200ResponseBackupSettingsDefaultSchedule, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// IsSetType returns a boolean if a field has been set.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) IsSetType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ListBackupSettings200ResponseBackupSettingsDefaultSchedule and assigns it to the Type field.
func (o *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) SetType(v ListBackupSettings200ResponseBackupSettingsDefaultSchedule) {
	o.Type = &v
}

func (o ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableListJobExecutions200ResponseAllOfJobExecutionsInnerJob struct {
	value *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob
	isSet bool
}

func (v NullableListJobExecutions200ResponseAllOfJobExecutionsInnerJob) Get() *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob {
	return v.value
}

func (v *NullableListJobExecutions200ResponseAllOfJobExecutionsInnerJob) Set(val *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) {
	v.value = val
	v.isSet = true
}

func (v NullableListJobExecutions200ResponseAllOfJobExecutionsInnerJob) IsSet() bool {
	return v.isSet
}

func (v *NullableListJobExecutions200ResponseAllOfJobExecutionsInnerJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListJobExecutions200ResponseAllOfJobExecutionsInnerJob(val *ListJobExecutions200ResponseAllOfJobExecutionsInnerJob) *NullableListJobExecutions200ResponseAllOfJobExecutionsInnerJob {
	return &NullableListJobExecutions200ResponseAllOfJobExecutionsInnerJob{value: val, isSet: true}
}

func (v NullableListJobExecutions200ResponseAllOfJobExecutionsInnerJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListJobExecutions200ResponseAllOfJobExecutionsInnerJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


