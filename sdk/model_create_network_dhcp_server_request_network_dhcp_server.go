/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateNetworkDhcpServerRequestNetworkDhcpServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateNetworkDhcpServerRequestNetworkDhcpServer{}

// CreateNetworkDhcpServerRequestNetworkDhcpServer struct for CreateNetworkDhcpServerRequestNetworkDhcpServer
type CreateNetworkDhcpServerRequestNetworkDhcpServer struct {
	// Server Address for the DHCP Server
	ServerIpAddress string `json:"serverIpAddress"`
	// Optional lease time for the DHCP Server
	LeaseTime int64 `json:"leaseTime"`
	// Name
	Name string `json:"name"`
	Config CreateNetworkDhcpServerRequestNetworkDhcpServerConfig `json:"config"`
}

type _CreateNetworkDhcpServerRequestNetworkDhcpServer CreateNetworkDhcpServerRequestNetworkDhcpServer

// NewCreateNetworkDhcpServerRequestNetworkDhcpServer instantiates a new CreateNetworkDhcpServerRequestNetworkDhcpServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateNetworkDhcpServerRequestNetworkDhcpServer(serverIpAddress string, leaseTime int64, name string, config CreateNetworkDhcpServerRequestNetworkDhcpServerConfig) *CreateNetworkDhcpServerRequestNetworkDhcpServer {
	this := CreateNetworkDhcpServerRequestNetworkDhcpServer{}
	this.ServerIpAddress = serverIpAddress
	this.LeaseTime = leaseTime
	this.Name = name
	this.Config = config
	return &this
}

// NewCreateNetworkDhcpServerRequestNetworkDhcpServerWithDefaults instantiates a new CreateNetworkDhcpServerRequestNetworkDhcpServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateNetworkDhcpServerRequestNetworkDhcpServerWithDefaults() *CreateNetworkDhcpServerRequestNetworkDhcpServer {
	this := CreateNetworkDhcpServerRequestNetworkDhcpServer{}
	var leaseTime int64 = 86400
	this.LeaseTime = leaseTime
	return &this
}

// GetServerIpAddress returns the ServerIpAddress field value
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) GetServerIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerIpAddress
}

// GetServerIpAddressOk returns a tuple with the ServerIpAddress field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) GetServerIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerIpAddress, true
}

// SetServerIpAddress sets field value
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) SetServerIpAddress(v string) {
	o.ServerIpAddress = v
}

// GetLeaseTime returns the LeaseTime field value
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) GetLeaseTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LeaseTime
}

// GetLeaseTimeOk returns a tuple with the LeaseTime field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) GetLeaseTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeaseTime, true
}

// SetLeaseTime sets field value
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) SetLeaseTime(v int64) {
	o.LeaseTime = v
}

// GetName returns the Name field value
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) SetName(v string) {
	o.Name = v
}

// GetConfig returns the Config field value
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) GetConfig() CreateNetworkDhcpServerRequestNetworkDhcpServerConfig {
	if o == nil {
		var ret CreateNetworkDhcpServerRequestNetworkDhcpServerConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) GetConfigOk() (*CreateNetworkDhcpServerRequestNetworkDhcpServerConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) SetConfig(v CreateNetworkDhcpServerRequestNetworkDhcpServerConfig) {
	o.Config = v
}

func (o CreateNetworkDhcpServerRequestNetworkDhcpServer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateNetworkDhcpServerRequestNetworkDhcpServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serverIpAddress"] = o.ServerIpAddress
	toSerialize["leaseTime"] = o.LeaseTime
	toSerialize["name"] = o.Name
	toSerialize["config"] = o.Config
	return toSerialize, nil
}

func (o *CreateNetworkDhcpServerRequestNetworkDhcpServer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"serverIpAddress",
		"leaseTime",
		"name",
		"config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateNetworkDhcpServerRequestNetworkDhcpServer := _CreateNetworkDhcpServerRequestNetworkDhcpServer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateNetworkDhcpServerRequestNetworkDhcpServer)

	if err != nil {
		return err
	}

	*o = CreateNetworkDhcpServerRequestNetworkDhcpServer(varCreateNetworkDhcpServerRequestNetworkDhcpServer)

	return err
}

type NullableCreateNetworkDhcpServerRequestNetworkDhcpServer struct {
	value *CreateNetworkDhcpServerRequestNetworkDhcpServer
	isSet bool
}

func (v NullableCreateNetworkDhcpServerRequestNetworkDhcpServer) Get() *CreateNetworkDhcpServerRequestNetworkDhcpServer {
	return v.value
}

func (v *NullableCreateNetworkDhcpServerRequestNetworkDhcpServer) Set(val *CreateNetworkDhcpServerRequestNetworkDhcpServer) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateNetworkDhcpServerRequestNetworkDhcpServer) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateNetworkDhcpServerRequestNetworkDhcpServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateNetworkDhcpServerRequestNetworkDhcpServer(val *CreateNetworkDhcpServerRequestNetworkDhcpServer) *NullableCreateNetworkDhcpServerRequestNetworkDhcpServer {
	return &NullableCreateNetworkDhcpServerRequestNetworkDhcpServer{value: val, isSet: true}
}

func (v NullableCreateNetworkDhcpServerRequestNetworkDhcpServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateNetworkDhcpServerRequestNetworkDhcpServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


