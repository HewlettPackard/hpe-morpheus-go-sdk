/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the RestartClusterContainer200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestartClusterContainer200Response{}

// RestartClusterContainer200Response struct for RestartClusterContainer200Response
type RestartClusterContainer200Response struct {
	Success *bool `json:"success,omitempty"`
	Errors map[string]interface{} `json:"errors,omitempty"`
}

// NewRestartClusterContainer200Response instantiates a new RestartClusterContainer200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestartClusterContainer200Response() *RestartClusterContainer200Response {
	this := RestartClusterContainer200Response{}
	return &this
}

// NewRestartClusterContainer200ResponseWithDefaults instantiates a new RestartClusterContainer200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestartClusterContainer200ResponseWithDefaults() *RestartClusterContainer200Response {
	this := RestartClusterContainer200Response{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *RestartClusterContainer200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestartClusterContainer200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// IsSetSuccess returns a boolean if a field has been set.
func (o *RestartClusterContainer200Response) IsSetSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *RestartClusterContainer200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *RestartClusterContainer200Response) GetErrors() map[string]interface{} {
	if o == nil || IsNil(o.Errors) {
		var ret map[string]interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestartClusterContainer200Response) GetErrorsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Errors) {
		return map[string]interface{}{}, false
	}
	return o.Errors, true
}

// IsSetErrors returns a boolean if a field has been set.
func (o *RestartClusterContainer200Response) IsSetErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given map[string]interface{} and assigns it to the Errors field.
func (o *RestartClusterContainer200Response) SetErrors(v map[string]interface{}) {
	o.Errors = v
}

func (o RestartClusterContainer200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestartClusterContainer200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableRestartClusterContainer200Response struct {
	value *RestartClusterContainer200Response
	isSet bool
}

func (v NullableRestartClusterContainer200Response) Get() *RestartClusterContainer200Response {
	return v.value
}

func (v *NullableRestartClusterContainer200Response) Set(val *RestartClusterContainer200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableRestartClusterContainer200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableRestartClusterContainer200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestartClusterContainer200Response(val *RestartClusterContainer200Response) *NullableRestartClusterContainer200Response {
	return &NullableRestartClusterContainer200Response{value: val, isSet: true}
}

func (v NullableRestartClusterContainer200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestartClusterContainer200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


