/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the SuccessError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuccessError{}

// SuccessError struct for SuccessError
type SuccessError struct {
	Success *bool `json:"success,omitempty"`
	Errors map[string]interface{} `json:"errors,omitempty"`
}

// NewSuccessError instantiates a new SuccessError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuccessError() *SuccessError {
	this := SuccessError{}
	return &this
}

// NewSuccessErrorWithDefaults instantiates a new SuccessError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuccessErrorWithDefaults() *SuccessError {
	this := SuccessError{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *SuccessError) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessError) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// IsSetSuccess returns a boolean if a field has been set.
func (o *SuccessError) IsSetSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *SuccessError) SetSuccess(v bool) {
	o.Success = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *SuccessError) GetErrors() map[string]interface{} {
	if o == nil || IsNil(o.Errors) {
		var ret map[string]interface{}
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessError) GetErrorsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Errors) {
		return map[string]interface{}{}, false
	}
	return o.Errors, true
}

// IsSetErrors returns a boolean if a field has been set.
func (o *SuccessError) IsSetErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given map[string]interface{} and assigns it to the Errors field.
func (o *SuccessError) SetErrors(v map[string]interface{}) {
	o.Errors = v
}

func (o SuccessError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuccessError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableSuccessError struct {
	value *SuccessError
	isSet bool
}

func (v NullableSuccessError) Get() *SuccessError {
	return v.value
}

func (v *NullableSuccessError) Set(val *SuccessError) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccessError) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccessError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccessError(val *SuccessError) *NullableSuccessError {
	return &NullableSuccessError{value: val, isSet: true}
}

func (v NullableSuccessError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccessError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


