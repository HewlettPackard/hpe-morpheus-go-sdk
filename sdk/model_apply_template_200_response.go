/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ApplyTemplate200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplyTemplate200Response{}

// ApplyTemplate200Response struct for ApplyTemplate200Response
type ApplyTemplate200Response struct {
	Success *bool `json:"success,omitempty"`
	ExecutionId *string `json:"executionId,omitempty"`
}

// NewApplyTemplate200Response instantiates a new ApplyTemplate200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplyTemplate200Response() *ApplyTemplate200Response {
	this := ApplyTemplate200Response{}
	return &this
}

// NewApplyTemplate200ResponseWithDefaults instantiates a new ApplyTemplate200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplyTemplate200ResponseWithDefaults() *ApplyTemplate200Response {
	this := ApplyTemplate200Response{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ApplyTemplate200Response) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTemplate200Response) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// IsSetSuccess returns a boolean if a field has been set.
func (o *ApplyTemplate200Response) IsSetSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *ApplyTemplate200Response) SetSuccess(v bool) {
	o.Success = &v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *ApplyTemplate200Response) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId) {
		var ret string
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplyTemplate200Response) GetExecutionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionId) {
		return nil, false
	}
	return o.ExecutionId, true
}

// IsSetExecutionId returns a boolean if a field has been set.
func (o *ApplyTemplate200Response) IsSetExecutionId() bool {
	if o != nil && !IsNil(o.ExecutionId) {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given string and assigns it to the ExecutionId field.
func (o *ApplyTemplate200Response) SetExecutionId(v string) {
	o.ExecutionId = &v
}

func (o ApplyTemplate200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplyTemplate200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.ExecutionId) {
		toSerialize["executionId"] = o.ExecutionId
	}
	return toSerialize, nil
}

type NullableApplyTemplate200Response struct {
	value *ApplyTemplate200Response
	isSet bool
}

func (v NullableApplyTemplate200Response) Get() *ApplyTemplate200Response {
	return v.value
}

func (v *NullableApplyTemplate200Response) Set(val *ApplyTemplate200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableApplyTemplate200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableApplyTemplate200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplyTemplate200Response(val *ApplyTemplate200Response) *NullableApplyTemplate200Response {
	return &NullableApplyTemplate200Response{value: val, isSet: true}
}

func (v NullableApplyTemplate200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplyTemplate200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


