/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the GetSnapshotInstance200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetSnapshotInstance200Response{}

// GetSnapshotInstance200Response struct for GetSnapshotInstance200Response
type GetSnapshotInstance200Response struct {
	Snapshot *SnapshotsInstance200ResponseSnapshotsInner `json:"snapshot,omitempty"`
}

// NewGetSnapshotInstance200Response instantiates a new GetSnapshotInstance200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSnapshotInstance200Response() *GetSnapshotInstance200Response {
	this := GetSnapshotInstance200Response{}
	return &this
}

// NewGetSnapshotInstance200ResponseWithDefaults instantiates a new GetSnapshotInstance200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSnapshotInstance200ResponseWithDefaults() *GetSnapshotInstance200Response {
	this := GetSnapshotInstance200Response{}
	return &this
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *GetSnapshotInstance200Response) GetSnapshot() SnapshotsInstance200ResponseSnapshotsInner {
	if o == nil || IsNil(o.Snapshot) {
		var ret SnapshotsInstance200ResponseSnapshotsInner
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSnapshotInstance200Response) GetSnapshotOk() (*SnapshotsInstance200ResponseSnapshotsInner, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// IsSetSnapshot returns a boolean if a field has been set.
func (o *GetSnapshotInstance200Response) IsSetSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given SnapshotsInstance200ResponseSnapshotsInner and assigns it to the Snapshot field.
func (o *GetSnapshotInstance200Response) SetSnapshot(v SnapshotsInstance200ResponseSnapshotsInner) {
	o.Snapshot = &v
}

func (o GetSnapshotInstance200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetSnapshotInstance200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	return toSerialize, nil
}

type NullableGetSnapshotInstance200Response struct {
	value *GetSnapshotInstance200Response
	isSet bool
}

func (v NullableGetSnapshotInstance200Response) Get() *GetSnapshotInstance200Response {
	return v.value
}

func (v *NullableGetSnapshotInstance200Response) Set(val *GetSnapshotInstance200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSnapshotInstance200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSnapshotInstance200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSnapshotInstance200Response(val *GetSnapshotInstance200Response) *NullableGetSnapshotInstance200Response {
	return &NullableGetSnapshotInstance200Response{value: val, isSet: true}
}

func (v NullableGetSnapshotInstance200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSnapshotInstance200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


