/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the UserGroupCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserGroupCreate{}

// UserGroupCreate struct for UserGroupCreate
type UserGroupCreate struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	SudoUser *bool `json:"sudoUser,omitempty"`
	ServerGroup *string `json:"serverGroup,omitempty"`
	// A list of IDs of users that are in the user group
	Users []int64 `json:"users,omitempty"`
}

// NewUserGroupCreate instantiates a new UserGroupCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGroupCreate() *UserGroupCreate {
	this := UserGroupCreate{}
	return &this
}

// NewUserGroupCreateWithDefaults instantiates a new UserGroupCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGroupCreateWithDefaults() *UserGroupCreate {
	this := UserGroupCreate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserGroupCreate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupCreate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// IsSetName returns a boolean if a field has been set.
func (o *UserGroupCreate) IsSetName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserGroupCreate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UserGroupCreate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupCreate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// IsSetDescription returns a boolean if a field has been set.
func (o *UserGroupCreate) IsSetDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UserGroupCreate) SetDescription(v string) {
	o.Description = &v
}

// GetSudoUser returns the SudoUser field value if set, zero value otherwise.
func (o *UserGroupCreate) GetSudoUser() bool {
	if o == nil || IsNil(o.SudoUser) {
		var ret bool
		return ret
	}
	return *o.SudoUser
}

// GetSudoUserOk returns a tuple with the SudoUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupCreate) GetSudoUserOk() (*bool, bool) {
	if o == nil || IsNil(o.SudoUser) {
		return nil, false
	}
	return o.SudoUser, true
}

// IsSetSudoUser returns a boolean if a field has been set.
func (o *UserGroupCreate) IsSetSudoUser() bool {
	if o != nil && !IsNil(o.SudoUser) {
		return true
	}

	return false
}

// SetSudoUser gets a reference to the given bool and assigns it to the SudoUser field.
func (o *UserGroupCreate) SetSudoUser(v bool) {
	o.SudoUser = &v
}

// GetServerGroup returns the ServerGroup field value if set, zero value otherwise.
func (o *UserGroupCreate) GetServerGroup() string {
	if o == nil || IsNil(o.ServerGroup) {
		var ret string
		return ret
	}
	return *o.ServerGroup
}

// GetServerGroupOk returns a tuple with the ServerGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupCreate) GetServerGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ServerGroup) {
		return nil, false
	}
	return o.ServerGroup, true
}

// IsSetServerGroup returns a boolean if a field has been set.
func (o *UserGroupCreate) IsSetServerGroup() bool {
	if o != nil && !IsNil(o.ServerGroup) {
		return true
	}

	return false
}

// SetServerGroup gets a reference to the given string and assigns it to the ServerGroup field.
func (o *UserGroupCreate) SetServerGroup(v string) {
	o.ServerGroup = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UserGroupCreate) GetUsers() []int64 {
	if o == nil || IsNil(o.Users) {
		var ret []int64
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGroupCreate) GetUsersOk() ([]int64, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// IsSetUsers returns a boolean if a field has been set.
func (o *UserGroupCreate) IsSetUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []int64 and assigns it to the Users field.
func (o *UserGroupCreate) SetUsers(v []int64) {
	o.Users = v
}

func (o UserGroupCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserGroupCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.SudoUser) {
		toSerialize["sudoUser"] = o.SudoUser
	}
	if !IsNil(o.ServerGroup) {
		toSerialize["serverGroup"] = o.ServerGroup
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableUserGroupCreate struct {
	value *UserGroupCreate
	isSet bool
}

func (v NullableUserGroupCreate) Get() *UserGroupCreate {
	return v.value
}

func (v *NullableUserGroupCreate) Set(val *UserGroupCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGroupCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGroupCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGroupCreate(val *UserGroupCreate) *NullableUserGroupCreate {
	return &NullableUserGroupCreate{value: val, isSet: true}
}

func (v NullableUserGroupCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGroupCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


