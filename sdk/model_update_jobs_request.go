/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateJobsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateJobsRequest{}

// UpdateJobsRequest struct for UpdateJobsRequest
type UpdateJobsRequest struct {
	Job UpdateJobsRequestJob `json:"job"`
}

type _UpdateJobsRequest UpdateJobsRequest

// NewUpdateJobsRequest instantiates a new UpdateJobsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateJobsRequest(job UpdateJobsRequestJob) *UpdateJobsRequest {
	this := UpdateJobsRequest{}
	this.Job = job
	return &this
}

// NewUpdateJobsRequestWithDefaults instantiates a new UpdateJobsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateJobsRequestWithDefaults() *UpdateJobsRequest {
	this := UpdateJobsRequest{}
	return &this
}

// GetJob returns the Job field value
func (o *UpdateJobsRequest) GetJob() UpdateJobsRequestJob {
	if o == nil {
		var ret UpdateJobsRequestJob
		return ret
	}

	return o.Job
}

// GetJobOk returns a tuple with the Job field value
// and a boolean to check if the value has been set.
func (o *UpdateJobsRequest) GetJobOk() (*UpdateJobsRequestJob, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Job, true
}

// SetJob sets field value
func (o *UpdateJobsRequest) SetJob(v UpdateJobsRequestJob) {
	o.Job = v
}

func (o UpdateJobsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateJobsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["job"] = o.Job
	return toSerialize, nil
}

func (o *UpdateJobsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"job",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateJobsRequest := _UpdateJobsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateJobsRequest)

	if err != nil {
		return err
	}

	*o = UpdateJobsRequest(varUpdateJobsRequest)

	return err
}

type NullableUpdateJobsRequest struct {
	value *UpdateJobsRequest
	isSet bool
}

func (v NullableUpdateJobsRequest) Get() *UpdateJobsRequest {
	return v.value
}

func (v *NullableUpdateJobsRequest) Set(val *UpdateJobsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateJobsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateJobsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateJobsRequest(val *UpdateJobsRequest) *NullableUpdateJobsRequest {
	return &NullableUpdateJobsRequest{value: val, isSet: true}
}

func (v NullableUpdateJobsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateJobsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


