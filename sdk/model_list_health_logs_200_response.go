/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.7
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ListHealthLogs200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListHealthLogs200Response{}

// ListHealthLogs200Response struct for ListHealthLogs200Response
type ListHealthLogs200Response struct {
	Logs                 []ListHealthLogs200ResponseAllOfLogsInner `json:"logs,omitempty"`
	Meta                 *ListActivity200ResponseAllOfMeta         `json:"meta,omitempty"`
	AdditionalProperties map[string]interface{}                    `json:",remain"`
}

type _ListHealthLogs200Response ListHealthLogs200Response

// NewListHealthLogs200Response instantiates a new ListHealthLogs200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListHealthLogs200Response() *ListHealthLogs200Response {
	this := ListHealthLogs200Response{}
	return &this
}

// NewListHealthLogs200ResponseWithDefaults instantiates a new ListHealthLogs200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListHealthLogs200ResponseWithDefaults() *ListHealthLogs200Response {
	this := ListHealthLogs200Response{}
	return &this
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *ListHealthLogs200Response) GetLogs() []ListHealthLogs200ResponseAllOfLogsInner {
	if o == nil || IsNil(o.Logs) {
		var ret []ListHealthLogs200ResponseAllOfLogsInner
		return ret
	}
	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListHealthLogs200Response) GetLogsOk() ([]ListHealthLogs200ResponseAllOfLogsInner, bool) {
	if o == nil || IsNil(o.Logs) {
		return nil, false
	}
	return o.Logs, true
}

// IsSetLogs returns a boolean if a field has been set.
func (o *ListHealthLogs200Response) IsSetLogs() bool {
	if o != nil && !IsNil(o.Logs) {
		return true
	}

	return false
}

// SetLogs gets a reference to the given []ListHealthLogs200ResponseAllOfLogsInner and assigns it to the Logs field.
func (o *ListHealthLogs200Response) SetLogs(v []ListHealthLogs200ResponseAllOfLogsInner) {
	o.Logs = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ListHealthLogs200Response) GetMeta() ListActivity200ResponseAllOfMeta {
	if o == nil || IsNil(o.Meta) {
		var ret ListActivity200ResponseAllOfMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListHealthLogs200Response) GetMetaOk() (*ListActivity200ResponseAllOfMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// IsSetMeta returns a boolean if a field has been set.
func (o *ListHealthLogs200Response) IsSetMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ListActivity200ResponseAllOfMeta and assigns it to the Meta field.
func (o *ListHealthLogs200Response) SetMeta(v ListActivity200ResponseAllOfMeta) {
	o.Meta = &v
}

func (o ListHealthLogs200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListHealthLogs200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Logs) {
		toSerialize["logs"] = o.Logs
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}
func (o *ListHealthLogs200Response) UnmarshalJSON(data []byte) (err error) {
	return decode(data, &o)
}

// - model_simple.mustache
