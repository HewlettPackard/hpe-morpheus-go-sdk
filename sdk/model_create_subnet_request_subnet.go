/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the CreateSubnetRequestSubnet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSubnetRequestSubnet{}

// CreateSubnetRequestSubnet struct for CreateSubnetRequestSubnet
type CreateSubnetRequestSubnet struct {
	Type *CreateSubnetRequestSubnetType `json:"type,omitempty"`
	// Configuration object. Settings vary by type.
	Config map[string]interface{} `json:"config,omitempty"`
	// Array of tenant account ID objects that are allowed access
	Tenants []GetAlerts200ResponseAllOfChecksInnerAccount `json:"tenants,omitempty"`
	// private or public
	Visibility *string `json:"visibility,omitempty"`
	// Array of label strings, can be used for filtering.
	Labels []string `json:"labels,omitempty"`
}

// NewCreateSubnetRequestSubnet instantiates a new CreateSubnetRequestSubnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSubnetRequestSubnet() *CreateSubnetRequestSubnet {
	this := CreateSubnetRequestSubnet{}
	var visibility string = "private"
	this.Visibility = &visibility
	return &this
}

// NewCreateSubnetRequestSubnetWithDefaults instantiates a new CreateSubnetRequestSubnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSubnetRequestSubnetWithDefaults() *CreateSubnetRequestSubnet {
	this := CreateSubnetRequestSubnet{}
	var visibility string = "private"
	this.Visibility = &visibility
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateSubnetRequestSubnet) GetType() CreateSubnetRequestSubnetType {
	if o == nil || IsNil(o.Type) {
		var ret CreateSubnetRequestSubnetType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnetRequestSubnet) GetTypeOk() (*CreateSubnetRequestSubnetType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// IsSetType returns a boolean if a field has been set.
func (o *CreateSubnetRequestSubnet) IsSetType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given CreateSubnetRequestSubnetType and assigns it to the Type field.
func (o *CreateSubnetRequestSubnet) SetType(v CreateSubnetRequestSubnetType) {
	o.Type = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *CreateSubnetRequestSubnet) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnetRequestSubnet) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// IsSetConfig returns a boolean if a field has been set.
func (o *CreateSubnetRequestSubnet) IsSetConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *CreateSubnetRequestSubnet) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *CreateSubnetRequestSubnet) GetTenants() []GetAlerts200ResponseAllOfChecksInnerAccount {
	if o == nil || IsNil(o.Tenants) {
		var ret []GetAlerts200ResponseAllOfChecksInnerAccount
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnetRequestSubnet) GetTenantsOk() ([]GetAlerts200ResponseAllOfChecksInnerAccount, bool) {
	if o == nil || IsNil(o.Tenants) {
		return nil, false
	}
	return o.Tenants, true
}

// IsSetTenants returns a boolean if a field has been set.
func (o *CreateSubnetRequestSubnet) IsSetTenants() bool {
	if o != nil && !IsNil(o.Tenants) {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []GetAlerts200ResponseAllOfChecksInnerAccount and assigns it to the Tenants field.
func (o *CreateSubnetRequestSubnet) SetTenants(v []GetAlerts200ResponseAllOfChecksInnerAccount) {
	o.Tenants = v
}

// GetVisibility returns the Visibility field value if set, zero value otherwise.
func (o *CreateSubnetRequestSubnet) GetVisibility() string {
	if o == nil || IsNil(o.Visibility) {
		var ret string
		return ret
	}
	return *o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnetRequestSubnet) GetVisibilityOk() (*string, bool) {
	if o == nil || IsNil(o.Visibility) {
		return nil, false
	}
	return o.Visibility, true
}

// IsSetVisibility returns a boolean if a field has been set.
func (o *CreateSubnetRequestSubnet) IsSetVisibility() bool {
	if o != nil && !IsNil(o.Visibility) {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given string and assigns it to the Visibility field.
func (o *CreateSubnetRequestSubnet) SetVisibility(v string) {
	o.Visibility = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CreateSubnetRequestSubnet) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSubnetRequestSubnet) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// IsSetLabels returns a boolean if a field has been set.
func (o *CreateSubnetRequestSubnet) IsSetLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *CreateSubnetRequestSubnet) SetLabels(v []string) {
	o.Labels = v
}

func (o CreateSubnetRequestSubnet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSubnetRequestSubnet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Tenants) {
		toSerialize["tenants"] = o.Tenants
	}
	if !IsNil(o.Visibility) {
		toSerialize["visibility"] = o.Visibility
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableCreateSubnetRequestSubnet struct {
	value *CreateSubnetRequestSubnet
	isSet bool
}

func (v NullableCreateSubnetRequestSubnet) Get() *CreateSubnetRequestSubnet {
	return v.value
}

func (v *NullableCreateSubnetRequestSubnet) Set(val *CreateSubnetRequestSubnet) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSubnetRequestSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSubnetRequestSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSubnetRequestSubnet(val *CreateSubnetRequestSubnet) *NullableCreateSubnetRequestSubnet {
	return &NullableCreateSubnetRequestSubnet{value: val, isSet: true}
}

func (v NullableCreateSubnetRequestSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSubnetRequestSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


