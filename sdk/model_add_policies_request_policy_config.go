/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
	"fmt"
)


// AddPoliciesRequestPolicyConfig A map of config values. The expected values vary by policy type. See `Retrieves all Policy Types` endpoint for `fieldName`(s) of required options.
type AddPoliciesRequestPolicyConfig struct {
	ApprovePolicyTypeConfiguration *ApprovePolicyTypeConfiguration
	BackupCreationPolicyTypeConfiguration *BackupCreationPolicyTypeConfiguration
	BackupTargetsPolicyTypeConfiguration *BackupTargetsPolicyTypeConfiguration
	BudgetPolicyTypeConfiguration *BudgetPolicyTypeConfiguration
	ClusterResourceNamePolicyTypeConfiguration *ClusterResourceNamePolicyTypeConfiguration
	CypherAccessPolicyTypeConfiguration *CypherAccessPolicyTypeConfiguration
	DelayedDeletePolicyTypeConfiguration *DelayedDeletePolicyTypeConfiguration
	ExpirationPolicyTypeConfiguration *ExpirationPolicyTypeConfiguration
	FileShareStorageQuotaPolicyTypeConfiguration *FileShareStorageQuotaPolicyTypeConfiguration
	HostnamePolicyTypeConfiguration *HostnamePolicyTypeConfiguration
	InstanceNamePolicyTypeConfiguration *InstanceNamePolicyTypeConfiguration
	MaxContainersPolicyTypeConfiguration *MaxContainersPolicyTypeConfiguration
	MaxCoresPolicyTypeConfiguration *MaxCoresPolicyTypeConfiguration
	MaxHostsPolicyTypeConfiguration *MaxHostsPolicyTypeConfiguration
	MaxLoadBalancerPoolsPolicyTypeConfiguration *MaxLoadBalancerPoolsPolicyTypeConfiguration
	MaxMemoryPolicyTypeConfiguration *MaxMemoryPolicyTypeConfiguration
	MaxPoolMembersPolicyTypeConfiguration *MaxPoolMembersPolicyTypeConfiguration
	MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration *MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration
	MaxVMsPolicyTypeConfiguration *MaxVMsPolicyTypeConfiguration
	MaxVirtualServersPolicyTypeConfiguration *MaxVirtualServersPolicyTypeConfiguration
	MessageOfTheDayPolicyTypeConfiguration *MessageOfTheDayPolicyTypeConfiguration
	NetworkQuotaPolicyTypeConfiguration *NetworkQuotaPolicyTypeConfiguration
	PowerSchedulePolicyTypeConfiguration *PowerSchedulePolicyTypeConfiguration
	RouterQuotaPolicyTypeConfiguration *RouterQuotaPolicyTypeConfiguration
	ShutdownPolicyTypeConfiguration *ShutdownPolicyTypeConfiguration
	StorageServerStorageQuotaPolicyTypeConfiguration *StorageServerStorageQuotaPolicyTypeConfiguration
	TagsPolicyTypeConfiguration *TagsPolicyTypeConfiguration
	UserCreationPolicyTypeConfiguration *UserCreationPolicyTypeConfiguration
	UserGroupCreationPolicyTypeConfiguration *UserGroupCreationPolicyTypeConfiguration
	WorkflowPolicyTypeConfiguration *WorkflowPolicyTypeConfiguration
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *AddPoliciesRequestPolicyConfig) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ApprovePolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.ApprovePolicyTypeConfiguration);
	if err == nil {
		jsonApprovePolicyTypeConfiguration, _ := json.Marshal(dst.ApprovePolicyTypeConfiguration)
		if string(jsonApprovePolicyTypeConfiguration) == "{}" { // empty struct
			dst.ApprovePolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.ApprovePolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.ApprovePolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into BackupCreationPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.BackupCreationPolicyTypeConfiguration);
	if err == nil {
		jsonBackupCreationPolicyTypeConfiguration, _ := json.Marshal(dst.BackupCreationPolicyTypeConfiguration)
		if string(jsonBackupCreationPolicyTypeConfiguration) == "{}" { // empty struct
			dst.BackupCreationPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.BackupCreationPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.BackupCreationPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into BackupTargetsPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.BackupTargetsPolicyTypeConfiguration);
	if err == nil {
		jsonBackupTargetsPolicyTypeConfiguration, _ := json.Marshal(dst.BackupTargetsPolicyTypeConfiguration)
		if string(jsonBackupTargetsPolicyTypeConfiguration) == "{}" { // empty struct
			dst.BackupTargetsPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.BackupTargetsPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.BackupTargetsPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into BudgetPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.BudgetPolicyTypeConfiguration);
	if err == nil {
		jsonBudgetPolicyTypeConfiguration, _ := json.Marshal(dst.BudgetPolicyTypeConfiguration)
		if string(jsonBudgetPolicyTypeConfiguration) == "{}" { // empty struct
			dst.BudgetPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.BudgetPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.BudgetPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into ClusterResourceNamePolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.ClusterResourceNamePolicyTypeConfiguration);
	if err == nil {
		jsonClusterResourceNamePolicyTypeConfiguration, _ := json.Marshal(dst.ClusterResourceNamePolicyTypeConfiguration)
		if string(jsonClusterResourceNamePolicyTypeConfiguration) == "{}" { // empty struct
			dst.ClusterResourceNamePolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.ClusterResourceNamePolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.ClusterResourceNamePolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into CypherAccessPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.CypherAccessPolicyTypeConfiguration);
	if err == nil {
		jsonCypherAccessPolicyTypeConfiguration, _ := json.Marshal(dst.CypherAccessPolicyTypeConfiguration)
		if string(jsonCypherAccessPolicyTypeConfiguration) == "{}" { // empty struct
			dst.CypherAccessPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.CypherAccessPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.CypherAccessPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into DelayedDeletePolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.DelayedDeletePolicyTypeConfiguration);
	if err == nil {
		jsonDelayedDeletePolicyTypeConfiguration, _ := json.Marshal(dst.DelayedDeletePolicyTypeConfiguration)
		if string(jsonDelayedDeletePolicyTypeConfiguration) == "{}" { // empty struct
			dst.DelayedDeletePolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.DelayedDeletePolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.DelayedDeletePolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into ExpirationPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.ExpirationPolicyTypeConfiguration);
	if err == nil {
		jsonExpirationPolicyTypeConfiguration, _ := json.Marshal(dst.ExpirationPolicyTypeConfiguration)
		if string(jsonExpirationPolicyTypeConfiguration) == "{}" { // empty struct
			dst.ExpirationPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.ExpirationPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.ExpirationPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into FileShareStorageQuotaPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.FileShareStorageQuotaPolicyTypeConfiguration);
	if err == nil {
		jsonFileShareStorageQuotaPolicyTypeConfiguration, _ := json.Marshal(dst.FileShareStorageQuotaPolicyTypeConfiguration)
		if string(jsonFileShareStorageQuotaPolicyTypeConfiguration) == "{}" { // empty struct
			dst.FileShareStorageQuotaPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.FileShareStorageQuotaPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.FileShareStorageQuotaPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into HostnamePolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.HostnamePolicyTypeConfiguration);
	if err == nil {
		jsonHostnamePolicyTypeConfiguration, _ := json.Marshal(dst.HostnamePolicyTypeConfiguration)
		if string(jsonHostnamePolicyTypeConfiguration) == "{}" { // empty struct
			dst.HostnamePolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.HostnamePolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.HostnamePolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into InstanceNamePolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.InstanceNamePolicyTypeConfiguration);
	if err == nil {
		jsonInstanceNamePolicyTypeConfiguration, _ := json.Marshal(dst.InstanceNamePolicyTypeConfiguration)
		if string(jsonInstanceNamePolicyTypeConfiguration) == "{}" { // empty struct
			dst.InstanceNamePolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.InstanceNamePolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.InstanceNamePolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into MaxContainersPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.MaxContainersPolicyTypeConfiguration);
	if err == nil {
		jsonMaxContainersPolicyTypeConfiguration, _ := json.Marshal(dst.MaxContainersPolicyTypeConfiguration)
		if string(jsonMaxContainersPolicyTypeConfiguration) == "{}" { // empty struct
			dst.MaxContainersPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.MaxContainersPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.MaxContainersPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into MaxCoresPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.MaxCoresPolicyTypeConfiguration);
	if err == nil {
		jsonMaxCoresPolicyTypeConfiguration, _ := json.Marshal(dst.MaxCoresPolicyTypeConfiguration)
		if string(jsonMaxCoresPolicyTypeConfiguration) == "{}" { // empty struct
			dst.MaxCoresPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.MaxCoresPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.MaxCoresPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into MaxHostsPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.MaxHostsPolicyTypeConfiguration);
	if err == nil {
		jsonMaxHostsPolicyTypeConfiguration, _ := json.Marshal(dst.MaxHostsPolicyTypeConfiguration)
		if string(jsonMaxHostsPolicyTypeConfiguration) == "{}" { // empty struct
			dst.MaxHostsPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.MaxHostsPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.MaxHostsPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into MaxLoadBalancerPoolsPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.MaxLoadBalancerPoolsPolicyTypeConfiguration);
	if err == nil {
		jsonMaxLoadBalancerPoolsPolicyTypeConfiguration, _ := json.Marshal(dst.MaxLoadBalancerPoolsPolicyTypeConfiguration)
		if string(jsonMaxLoadBalancerPoolsPolicyTypeConfiguration) == "{}" { // empty struct
			dst.MaxLoadBalancerPoolsPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.MaxLoadBalancerPoolsPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.MaxLoadBalancerPoolsPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into MaxMemoryPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.MaxMemoryPolicyTypeConfiguration);
	if err == nil {
		jsonMaxMemoryPolicyTypeConfiguration, _ := json.Marshal(dst.MaxMemoryPolicyTypeConfiguration)
		if string(jsonMaxMemoryPolicyTypeConfiguration) == "{}" { // empty struct
			dst.MaxMemoryPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.MaxMemoryPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.MaxMemoryPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into MaxPoolMembersPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.MaxPoolMembersPolicyTypeConfiguration);
	if err == nil {
		jsonMaxPoolMembersPolicyTypeConfiguration, _ := json.Marshal(dst.MaxPoolMembersPolicyTypeConfiguration)
		if string(jsonMaxPoolMembersPolicyTypeConfiguration) == "{}" { // empty struct
			dst.MaxPoolMembersPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.MaxPoolMembersPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.MaxPoolMembersPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration);
	if err == nil {
		jsonMaxStorageAndObjectStorageQuotaPolicyTypeConfiguration, _ := json.Marshal(dst.MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration)
		if string(jsonMaxStorageAndObjectStorageQuotaPolicyTypeConfiguration) == "{}" { // empty struct
			dst.MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into MaxVMsPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.MaxVMsPolicyTypeConfiguration);
	if err == nil {
		jsonMaxVMsPolicyTypeConfiguration, _ := json.Marshal(dst.MaxVMsPolicyTypeConfiguration)
		if string(jsonMaxVMsPolicyTypeConfiguration) == "{}" { // empty struct
			dst.MaxVMsPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.MaxVMsPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.MaxVMsPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into MaxVirtualServersPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.MaxVirtualServersPolicyTypeConfiguration);
	if err == nil {
		jsonMaxVirtualServersPolicyTypeConfiguration, _ := json.Marshal(dst.MaxVirtualServersPolicyTypeConfiguration)
		if string(jsonMaxVirtualServersPolicyTypeConfiguration) == "{}" { // empty struct
			dst.MaxVirtualServersPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.MaxVirtualServersPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.MaxVirtualServersPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into MessageOfTheDayPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.MessageOfTheDayPolicyTypeConfiguration);
	if err == nil {
		jsonMessageOfTheDayPolicyTypeConfiguration, _ := json.Marshal(dst.MessageOfTheDayPolicyTypeConfiguration)
		if string(jsonMessageOfTheDayPolicyTypeConfiguration) == "{}" { // empty struct
			dst.MessageOfTheDayPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.MessageOfTheDayPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.MessageOfTheDayPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into NetworkQuotaPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.NetworkQuotaPolicyTypeConfiguration);
	if err == nil {
		jsonNetworkQuotaPolicyTypeConfiguration, _ := json.Marshal(dst.NetworkQuotaPolicyTypeConfiguration)
		if string(jsonNetworkQuotaPolicyTypeConfiguration) == "{}" { // empty struct
			dst.NetworkQuotaPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.NetworkQuotaPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.NetworkQuotaPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into PowerSchedulePolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.PowerSchedulePolicyTypeConfiguration);
	if err == nil {
		jsonPowerSchedulePolicyTypeConfiguration, _ := json.Marshal(dst.PowerSchedulePolicyTypeConfiguration)
		if string(jsonPowerSchedulePolicyTypeConfiguration) == "{}" { // empty struct
			dst.PowerSchedulePolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.PowerSchedulePolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.PowerSchedulePolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into RouterQuotaPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.RouterQuotaPolicyTypeConfiguration);
	if err == nil {
		jsonRouterQuotaPolicyTypeConfiguration, _ := json.Marshal(dst.RouterQuotaPolicyTypeConfiguration)
		if string(jsonRouterQuotaPolicyTypeConfiguration) == "{}" { // empty struct
			dst.RouterQuotaPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.RouterQuotaPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.RouterQuotaPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into ShutdownPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.ShutdownPolicyTypeConfiguration);
	if err == nil {
		jsonShutdownPolicyTypeConfiguration, _ := json.Marshal(dst.ShutdownPolicyTypeConfiguration)
		if string(jsonShutdownPolicyTypeConfiguration) == "{}" { // empty struct
			dst.ShutdownPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.ShutdownPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.ShutdownPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into StorageServerStorageQuotaPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.StorageServerStorageQuotaPolicyTypeConfiguration);
	if err == nil {
		jsonStorageServerStorageQuotaPolicyTypeConfiguration, _ := json.Marshal(dst.StorageServerStorageQuotaPolicyTypeConfiguration)
		if string(jsonStorageServerStorageQuotaPolicyTypeConfiguration) == "{}" { // empty struct
			dst.StorageServerStorageQuotaPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.StorageServerStorageQuotaPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.StorageServerStorageQuotaPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into TagsPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.TagsPolicyTypeConfiguration);
	if err == nil {
		jsonTagsPolicyTypeConfiguration, _ := json.Marshal(dst.TagsPolicyTypeConfiguration)
		if string(jsonTagsPolicyTypeConfiguration) == "{}" { // empty struct
			dst.TagsPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.TagsPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.TagsPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into UserCreationPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.UserCreationPolicyTypeConfiguration);
	if err == nil {
		jsonUserCreationPolicyTypeConfiguration, _ := json.Marshal(dst.UserCreationPolicyTypeConfiguration)
		if string(jsonUserCreationPolicyTypeConfiguration) == "{}" { // empty struct
			dst.UserCreationPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.UserCreationPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.UserCreationPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into UserGroupCreationPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.UserGroupCreationPolicyTypeConfiguration);
	if err == nil {
		jsonUserGroupCreationPolicyTypeConfiguration, _ := json.Marshal(dst.UserGroupCreationPolicyTypeConfiguration)
		if string(jsonUserGroupCreationPolicyTypeConfiguration) == "{}" { // empty struct
			dst.UserGroupCreationPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.UserGroupCreationPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.UserGroupCreationPolicyTypeConfiguration = nil
	}

	// try to unmarshal JSON data into WorkflowPolicyTypeConfiguration
	err = json.Unmarshal(data, &dst.WorkflowPolicyTypeConfiguration);
	if err == nil {
		jsonWorkflowPolicyTypeConfiguration, _ := json.Marshal(dst.WorkflowPolicyTypeConfiguration)
		if string(jsonWorkflowPolicyTypeConfiguration) == "{}" { // empty struct
			dst.WorkflowPolicyTypeConfiguration = nil
		} else {
			return nil // data stored in dst.WorkflowPolicyTypeConfiguration, return on the first match
		}
	} else {
		dst.WorkflowPolicyTypeConfiguration = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(AddPoliciesRequestPolicyConfig)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AddPoliciesRequestPolicyConfig) MarshalJSON() ([]byte, error) {
	if src.ApprovePolicyTypeConfiguration != nil {
		return json.Marshal(&src.ApprovePolicyTypeConfiguration)
	}

	if src.BackupCreationPolicyTypeConfiguration != nil {
		return json.Marshal(&src.BackupCreationPolicyTypeConfiguration)
	}

	if src.BackupTargetsPolicyTypeConfiguration != nil {
		return json.Marshal(&src.BackupTargetsPolicyTypeConfiguration)
	}

	if src.BudgetPolicyTypeConfiguration != nil {
		return json.Marshal(&src.BudgetPolicyTypeConfiguration)
	}

	if src.ClusterResourceNamePolicyTypeConfiguration != nil {
		return json.Marshal(&src.ClusterResourceNamePolicyTypeConfiguration)
	}

	if src.CypherAccessPolicyTypeConfiguration != nil {
		return json.Marshal(&src.CypherAccessPolicyTypeConfiguration)
	}

	if src.DelayedDeletePolicyTypeConfiguration != nil {
		return json.Marshal(&src.DelayedDeletePolicyTypeConfiguration)
	}

	if src.ExpirationPolicyTypeConfiguration != nil {
		return json.Marshal(&src.ExpirationPolicyTypeConfiguration)
	}

	if src.FileShareStorageQuotaPolicyTypeConfiguration != nil {
		return json.Marshal(&src.FileShareStorageQuotaPolicyTypeConfiguration)
	}

	if src.HostnamePolicyTypeConfiguration != nil {
		return json.Marshal(&src.HostnamePolicyTypeConfiguration)
	}

	if src.InstanceNamePolicyTypeConfiguration != nil {
		return json.Marshal(&src.InstanceNamePolicyTypeConfiguration)
	}

	if src.MaxContainersPolicyTypeConfiguration != nil {
		return json.Marshal(&src.MaxContainersPolicyTypeConfiguration)
	}

	if src.MaxCoresPolicyTypeConfiguration != nil {
		return json.Marshal(&src.MaxCoresPolicyTypeConfiguration)
	}

	if src.MaxHostsPolicyTypeConfiguration != nil {
		return json.Marshal(&src.MaxHostsPolicyTypeConfiguration)
	}

	if src.MaxLoadBalancerPoolsPolicyTypeConfiguration != nil {
		return json.Marshal(&src.MaxLoadBalancerPoolsPolicyTypeConfiguration)
	}

	if src.MaxMemoryPolicyTypeConfiguration != nil {
		return json.Marshal(&src.MaxMemoryPolicyTypeConfiguration)
	}

	if src.MaxPoolMembersPolicyTypeConfiguration != nil {
		return json.Marshal(&src.MaxPoolMembersPolicyTypeConfiguration)
	}

	if src.MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration != nil {
		return json.Marshal(&src.MaxStorageAndObjectStorageQuotaPolicyTypeConfiguration)
	}

	if src.MaxVMsPolicyTypeConfiguration != nil {
		return json.Marshal(&src.MaxVMsPolicyTypeConfiguration)
	}

	if src.MaxVirtualServersPolicyTypeConfiguration != nil {
		return json.Marshal(&src.MaxVirtualServersPolicyTypeConfiguration)
	}

	if src.MessageOfTheDayPolicyTypeConfiguration != nil {
		return json.Marshal(&src.MessageOfTheDayPolicyTypeConfiguration)
	}

	if src.NetworkQuotaPolicyTypeConfiguration != nil {
		return json.Marshal(&src.NetworkQuotaPolicyTypeConfiguration)
	}

	if src.PowerSchedulePolicyTypeConfiguration != nil {
		return json.Marshal(&src.PowerSchedulePolicyTypeConfiguration)
	}

	if src.RouterQuotaPolicyTypeConfiguration != nil {
		return json.Marshal(&src.RouterQuotaPolicyTypeConfiguration)
	}

	if src.ShutdownPolicyTypeConfiguration != nil {
		return json.Marshal(&src.ShutdownPolicyTypeConfiguration)
	}

	if src.StorageServerStorageQuotaPolicyTypeConfiguration != nil {
		return json.Marshal(&src.StorageServerStorageQuotaPolicyTypeConfiguration)
	}

	if src.TagsPolicyTypeConfiguration != nil {
		return json.Marshal(&src.TagsPolicyTypeConfiguration)
	}

	if src.UserCreationPolicyTypeConfiguration != nil {
		return json.Marshal(&src.UserCreationPolicyTypeConfiguration)
	}

	if src.UserGroupCreationPolicyTypeConfiguration != nil {
		return json.Marshal(&src.UserGroupCreationPolicyTypeConfiguration)
	}

	if src.WorkflowPolicyTypeConfiguration != nil {
		return json.Marshal(&src.WorkflowPolicyTypeConfiguration)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableAddPoliciesRequestPolicyConfig struct {
	value *AddPoliciesRequestPolicyConfig
	isSet bool
}

func (v NullableAddPoliciesRequestPolicyConfig) Get() *AddPoliciesRequestPolicyConfig {
	return v.value
}

func (v *NullableAddPoliciesRequestPolicyConfig) Set(val *AddPoliciesRequestPolicyConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAddPoliciesRequestPolicyConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAddPoliciesRequestPolicyConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddPoliciesRequestPolicyConfig(val *AddPoliciesRequestPolicyConfig) *NullableAddPoliciesRequestPolicyConfig {
	return &NullableAddPoliciesRequestPolicyConfig{value: val, isSet: true}
}

func (v NullableAddPoliciesRequestPolicyConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddPoliciesRequestPolicyConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


