/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the InstanceNamePolicyTypeConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceNamePolicyTypeConfiguration{}

// InstanceNamePolicyTypeConfiguration Configuration settings for the following policy types: - Instance Name 
type InstanceNamePolicyTypeConfiguration struct {
	NamingType *string `json:"namingType,omitempty"`
	NamingPattern *string `json:"namingPattern,omitempty"`
	NamingConflict *bool `json:"namingConflict,omitempty"`
}

// NewInstanceNamePolicyTypeConfiguration instantiates a new InstanceNamePolicyTypeConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceNamePolicyTypeConfiguration() *InstanceNamePolicyTypeConfiguration {
	this := InstanceNamePolicyTypeConfiguration{}
	return &this
}

// NewInstanceNamePolicyTypeConfigurationWithDefaults instantiates a new InstanceNamePolicyTypeConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceNamePolicyTypeConfigurationWithDefaults() *InstanceNamePolicyTypeConfiguration {
	this := InstanceNamePolicyTypeConfiguration{}
	return &this
}

// GetNamingType returns the NamingType field value if set, zero value otherwise.
func (o *InstanceNamePolicyTypeConfiguration) GetNamingType() string {
	if o == nil || IsNil(o.NamingType) {
		var ret string
		return ret
	}
	return *o.NamingType
}

// GetNamingTypeOk returns a tuple with the NamingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceNamePolicyTypeConfiguration) GetNamingTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NamingType) {
		return nil, false
	}
	return o.NamingType, true
}

// IsSetNamingType returns a boolean if a field has been set.
func (o *InstanceNamePolicyTypeConfiguration) IsSetNamingType() bool {
	if o != nil && !IsNil(o.NamingType) {
		return true
	}

	return false
}

// SetNamingType gets a reference to the given string and assigns it to the NamingType field.
func (o *InstanceNamePolicyTypeConfiguration) SetNamingType(v string) {
	o.NamingType = &v
}

// GetNamingPattern returns the NamingPattern field value if set, zero value otherwise.
func (o *InstanceNamePolicyTypeConfiguration) GetNamingPattern() string {
	if o == nil || IsNil(o.NamingPattern) {
		var ret string
		return ret
	}
	return *o.NamingPattern
}

// GetNamingPatternOk returns a tuple with the NamingPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceNamePolicyTypeConfiguration) GetNamingPatternOk() (*string, bool) {
	if o == nil || IsNil(o.NamingPattern) {
		return nil, false
	}
	return o.NamingPattern, true
}

// IsSetNamingPattern returns a boolean if a field has been set.
func (o *InstanceNamePolicyTypeConfiguration) IsSetNamingPattern() bool {
	if o != nil && !IsNil(o.NamingPattern) {
		return true
	}

	return false
}

// SetNamingPattern gets a reference to the given string and assigns it to the NamingPattern field.
func (o *InstanceNamePolicyTypeConfiguration) SetNamingPattern(v string) {
	o.NamingPattern = &v
}

// GetNamingConflict returns the NamingConflict field value if set, zero value otherwise.
func (o *InstanceNamePolicyTypeConfiguration) GetNamingConflict() bool {
	if o == nil || IsNil(o.NamingConflict) {
		var ret bool
		return ret
	}
	return *o.NamingConflict
}

// GetNamingConflictOk returns a tuple with the NamingConflict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceNamePolicyTypeConfiguration) GetNamingConflictOk() (*bool, bool) {
	if o == nil || IsNil(o.NamingConflict) {
		return nil, false
	}
	return o.NamingConflict, true
}

// IsSetNamingConflict returns a boolean if a field has been set.
func (o *InstanceNamePolicyTypeConfiguration) IsSetNamingConflict() bool {
	if o != nil && !IsNil(o.NamingConflict) {
		return true
	}

	return false
}

// SetNamingConflict gets a reference to the given bool and assigns it to the NamingConflict field.
func (o *InstanceNamePolicyTypeConfiguration) SetNamingConflict(v bool) {
	o.NamingConflict = &v
}

func (o InstanceNamePolicyTypeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceNamePolicyTypeConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NamingType) {
		toSerialize["namingType"] = o.NamingType
	}
	if !IsNil(o.NamingPattern) {
		toSerialize["namingPattern"] = o.NamingPattern
	}
	if !IsNil(o.NamingConflict) {
		toSerialize["namingConflict"] = o.NamingConflict
	}
	return toSerialize, nil
}

type NullableInstanceNamePolicyTypeConfiguration struct {
	value *InstanceNamePolicyTypeConfiguration
	isSet bool
}

func (v NullableInstanceNamePolicyTypeConfiguration) Get() *InstanceNamePolicyTypeConfiguration {
	return v.value
}

func (v *NullableInstanceNamePolicyTypeConfiguration) Set(val *InstanceNamePolicyTypeConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceNamePolicyTypeConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceNamePolicyTypeConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceNamePolicyTypeConfiguration(val *InstanceNamePolicyTypeConfiguration) *NullableInstanceNamePolicyTypeConfiguration {
	return &NullableInstanceNamePolicyTypeConfiguration{value: val, isSet: true}
}

func (v NullableInstanceNamePolicyTypeConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceNamePolicyTypeConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


