/*
Morpheus API

Morpheus is a powerful cloud management tool that provides provisioning, monitoring, logging, backups, and application deployment strategies.  This document describes the Morpheus API protocol and the available endpoints. Sections are organized in the same manner as they appear in the Morpheus UI.

API version: 8.0.6
Contact: dev@morpheusdata.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk

import (
	"encoding/json"
)

// checks if the ListSubnetTypes200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListSubnetTypes200Response{}

// ListSubnetTypes200Response struct for ListSubnetTypes200Response
type ListSubnetTypes200Response struct {
	SubnetTypes []ListSubnetTypes200ResponseAllOfSubnetTypesInner `json:"subnetTypes,omitempty"`
	Meta *ListActivity200ResponseAllOfMeta `json:"meta,omitempty"`
}

// NewListSubnetTypes200Response instantiates a new ListSubnetTypes200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListSubnetTypes200Response() *ListSubnetTypes200Response {
	this := ListSubnetTypes200Response{}
	return &this
}

// NewListSubnetTypes200ResponseWithDefaults instantiates a new ListSubnetTypes200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListSubnetTypes200ResponseWithDefaults() *ListSubnetTypes200Response {
	this := ListSubnetTypes200Response{}
	return &this
}

// GetSubnetTypes returns the SubnetTypes field value if set, zero value otherwise.
func (o *ListSubnetTypes200Response) GetSubnetTypes() []ListSubnetTypes200ResponseAllOfSubnetTypesInner {
	if o == nil || IsNil(o.SubnetTypes) {
		var ret []ListSubnetTypes200ResponseAllOfSubnetTypesInner
		return ret
	}
	return o.SubnetTypes
}

// GetSubnetTypesOk returns a tuple with the SubnetTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubnetTypes200Response) GetSubnetTypesOk() ([]ListSubnetTypes200ResponseAllOfSubnetTypesInner, bool) {
	if o == nil || IsNil(o.SubnetTypes) {
		return nil, false
	}
	return o.SubnetTypes, true
}

// IsSetSubnetTypes returns a boolean if a field has been set.
func (o *ListSubnetTypes200Response) IsSetSubnetTypes() bool {
	if o != nil && !IsNil(o.SubnetTypes) {
		return true
	}

	return false
}

// SetSubnetTypes gets a reference to the given []ListSubnetTypes200ResponseAllOfSubnetTypesInner and assigns it to the SubnetTypes field.
func (o *ListSubnetTypes200Response) SetSubnetTypes(v []ListSubnetTypes200ResponseAllOfSubnetTypesInner) {
	o.SubnetTypes = v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ListSubnetTypes200Response) GetMeta() ListActivity200ResponseAllOfMeta {
	if o == nil || IsNil(o.Meta) {
		var ret ListActivity200ResponseAllOfMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListSubnetTypes200Response) GetMetaOk() (*ListActivity200ResponseAllOfMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// IsSetMeta returns a boolean if a field has been set.
func (o *ListSubnetTypes200Response) IsSetMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ListActivity200ResponseAllOfMeta and assigns it to the Meta field.
func (o *ListSubnetTypes200Response) SetMeta(v ListActivity200ResponseAllOfMeta) {
	o.Meta = &v
}

func (o ListSubnetTypes200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListSubnetTypes200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubnetTypes) {
		toSerialize["subnetTypes"] = o.SubnetTypes
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableListSubnetTypes200Response struct {
	value *ListSubnetTypes200Response
	isSet bool
}

func (v NullableListSubnetTypes200Response) Get() *ListSubnetTypes200Response {
	return v.value
}

func (v *NullableListSubnetTypes200Response) Set(val *ListSubnetTypes200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListSubnetTypes200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListSubnetTypes200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListSubnetTypes200Response(val *ListSubnetTypes200Response) *NullableListSubnetTypes200Response {
	return &NullableListSubnetTypes200Response{value: val, isSet: true}
}

func (v NullableListSubnetTypes200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListSubnetTypes200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


